using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using PurchaseTrackerAPI.DAL;
using PurchaseTrackerAPI.Models;
using PurchaseTrackerAPI.StaticStuff;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using Z.Expressions;
using System.Data;
using System.Web;
using System.Text.RegularExpressions;
using org.mariuszgromada.math.mxparser;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Auth;
using Microsoft.WindowsAzure.Storage.Blob;
using System.IO;
using PurchaseTrackerAPI.DAL.Interfaces;
using PurchaseTrackerAPI.BL.Interfaces;
using PurchaseTrackerAPI.IoT.Interfaces;
using PurchaseTrackerAPI.IoT;
using System.Threading;
using OfficeOpenXml;
using Microsoft.Extensions.Logging;
using System.Collections;
using System.Net;
using Amazon.S3.Model;
using Amazon.S3;
using Amazon.Runtime.Internal.Endpoints.StandardLibrary;
using Microsoft.AspNetCore.StaticFiles;
using Swashbuckle.AspNetCore.Swagger;

namespace PurchaseTrackerAPI.BL
{
    public class TblPurchaseScheduleSummaryBL : ITblPurchaseScheduleSummaryBL
    {
        private readonly ILogger loggerObj;
        private readonly INotification notification;
        private readonly INotification notify;
        private readonly Icommondao _iCommonDAO;
        private readonly ITblPurchaseScheduleStatusHistoryBL _iTblPurchaseScheduleStatusHistoryBL;
        private readonly ITblPurchaseWeighingStageSummaryDAO _iTblPurchaseWeighingStageSummaryDAO;
        private readonly ITblConfigParamsBL _iTblConfigParamsBL;
        private readonly ITblConfigParamsDAO _iTblConfigParamsDAO;
        private readonly IDimStatusBL _iDimStatusBL;
        private readonly ITblPurchaseVehicleSpotEntryBL _iTblPurchaseVehicleSpotEntryBL;
        private readonly ICircularDependancyBL _iCircularDependancyBL;
        private readonly Idimensionbl _idimensionBL;
        private readonly ITblQualityPhaseBL _iTblQualityPhaseBL;
        private readonly ITblPurchaseGradingDtlsBL _iTblPurchaseGradingDtlsBL;
        private readonly ICircularDependancyBL _iTblPurchaseEnquiryBL;
        private readonly ITblPurchaseWeighingStageSummaryBL _iTblPurchaseWeighingStageSummaryBL;
        private readonly ITblPurchaseScheduleSummaryDAO _iTblPurchaseScheduleSummaryDAO;
        private readonly ITblPurchaseVehicleDetailsBL _iTblPurchaseVehicleDetailsBL;
        private readonly ITblPurchaseInvoiceItemDetailsDAO _iTblPurchaseInvoiceItemDetailsDAO;
        private readonly ITblPurchaseUnloadingDtlBL _iTblPurchaseUnloadingDtlBL;
        private readonly ITblGradeExpressionDtlsBL _iTblGradeExpressionDtlsBL;
        private readonly ITblPurchaseManagerSupplierBL _iTblPurchaseManagerSupplierBL;
        private readonly Itblalertinstancebl _itblalertinstancebl;
        private readonly ITblPurchaseVehicleMaterialSampleDAO _iTblPurchaseVehicleMaterialSampleDAO;
        private readonly ITblPurchaseVehicleDetailsDAO _iTblPurchaseVehicleDetailsDAO;
        private readonly ITblPurchaseParityDetailsBL _iTblPurchaseParityDetailsBL;
        private readonly ITblPurchaseEnquiryDetailsBL _iTblPurchaseEnquiryDetailsBL;
        private readonly ITblExpressionDtlsBL _iTblExpressionDtlsBL;
        private readonly ITblPurchaseInvoiceAddrDAO _iTblPurchaseInvoiceAddrDAO;
        private readonly ITblProdClassificationBL _iTblProdClassificationBL;
        private readonly ITblAddonsFunDtlsBL _iTblAddonsFunDtlsBL;
        private readonly ITblBaseItemMetalCostBL _iTblBaseItemMetalCostBL;
        private readonly ITblPurchaseInvoiceItemDetailsBL _iTblPurchaseInvoiceItemDetailsBL;
        private readonly ITblRecycleDocumentBL _iTblRecycleDocumentBL;
        private readonly ITblModuleBL _iTblModuleBL;
        private readonly ITblUserBL _iTblUserBL;
        private readonly ITblProductItemBL _iTblProductItemBL;
        private readonly ITblQualityPhaseDtlsBL _iTblQualityPhaseDtlsBL;
        private readonly ITblVariablesBL _iTblVariablesBL;
        private readonly ITblSpotVehicleMaterialDtlsBL _iTblSpotVehicleMaterialDtlsBL;
        private readonly IConnectionString _iConnectionString;
        private readonly ITblPurchaseVehicleStageCntBL _iTblPurchaseVehicleStageCntBL;
        private readonly ITblPurchaseEnquiryQtyConsumptionBL _iTblPurchaseEnquiryQtyConsumptionBL;

        private readonly ITblPurchaseItemDescBL _iTblPurchaseItemDescBL;

        private readonly ITblPartyWeighingMeasuresBL _iTblPartyWeighingMeasuresBL;
        //private readonly ITblRateBandDeclarationPurchaseBL _iTblRateBandDeclarationPurchaseBL;
        private readonly IIotCommunication _iIotCommunication;
        private readonly IGateCommunication _iGateCommunication;
        private readonly ITblWeighingMachineDAO _iTblWeighingMachineDAO;
        private readonly IWeighingCommunication _iWeighingCommunication;
        private readonly IDimStatusDAO _iDimStatusDAO;
        private readonly ITblGateBL _iTblGateBL;
        private readonly ITblGlobalRatePurchaseDAO _iTblGlobalRatePurchaseDAO;
        private readonly Idimensiondao _iDimensiondao;
        private IModbusRefConfig _iModbusRefConfig;
        private ITblPurchaseVehicleStatusHistoryBL _iTblPurchaseVehicleStatusHistoryBL;

        private readonly ITblPurchaseVehFreightDtlsBL _iTblPurchaseVehFreightDtlsBL;
        private readonly ITblPurchaseSchStatusHistoryBL _iTblPurchaseSchStatusHistoryBL;
        private readonly ITblScheduleDensityBL _iTblScheduleDensityBL;
        private readonly IDimReportTemplateBL _iDimReportTemplateBL;
        private readonly IRunReport _iRunReport;
        private readonly ITblPurchaseSchTcDtlsBL _iTblPurchaseSchTcDtlsBL;
        private readonly ITblPartyWeighingMeasuresDAO _iTblPartyWeighingMeasuresDAO;
        private readonly ITblOrganizationBL _iTblOrganizationBL;
        private readonly IReportDAO _ireportDAO;
        private readonly ITblPurchaseEnquiryDAO _iTblPurchaseEnquiryDAO;

        private readonly ITblPurchaseVehLinkSaudaBL _iTblPurchaseVehLinkSaudaBL;
        private readonly ITblPurchaseEnquiryDetailsDAO _iTblPurchaseEnquiryDetailsDAO;
        private readonly ITblPurchaseVehLinkSaudaDAO _iTblPurchaseVehLinkSaudaDAO;
        private readonly ITblReportsBackupDtlsBL _iTblReportsBackupDtlsBL;
        private readonly ITblSpotEntryContainerDtlsBL _iTblSpotEntryContainerDtlsBL;
        //private readonly ITblPurchaseInvoiceBL _iTblPurchaseInvoiceBL;


        private static readonly object SaveLinkExistingSuada = new object();
        private static readonly object dataExtractionLockObj = new object();

        //private readonly ITblGlobalRatePurchaseDAO _iTblGlobalRatePurchaseDAO;
        public TblPurchaseScheduleSummaryBL(ITblSpotEntryContainerDtlsBL iTblSpotEntryContainerDtlsBL,
        Icommondao icommondao,
            Idimensionbl idimensionBL
           , ITblPartyWeighingMeasuresDAO iTblPartyWeighingMeasuresDAO
            , IConnectionString iConnectionString
            , ITblConfigParamsBL iTblConfigParamsBL
            , ICircularDependancyBL iCircularDependancyBL
             , ITblPurchaseVehicleSpotEntryBL iTblPurchaseVehicleSpotEntryBL
           , ITblQualityPhaseBL iTblQualityPhaseBL
          , ITblPurchaseGradingDtlsBL iTblPurchaseGradingDtlsBL
           , IDimStatusBL iDimStatusBL,
            INotification inotify, IDimStatusDAO iDimStatusDAO
            , ITblPurchaseWeighingStageSummaryBL iTblPurchaseWeighingStageSummaryBL
           , ITblPurchaseScheduleSummaryDAO iTblPurchaseScheduleSummaryDAO
           , ITblPurchaseVehicleDetailsBL iTblPurchaseVehicleDetailsBL
            , ITblPurchaseWeighingStageSummaryDAO iTblPurchaseWeighingStageSummaryDAO
           , ITblPurchaseScheduleStatusHistoryBL iTblPurchaseScheduleStatusHistoryBL
            , ITblConfigParamsDAO iTblConfigParamsDAO
            , ITblPurchaseInvoiceItemDetailsDAO iTblPurchaseInvoiceItemDetailsDAO
            , ITblPurchaseUnloadingDtlBL iTblPurchaseUnloadingDtlBL
           , ITblGradeExpressionDtlsBL iTblGradeExpressionDtlsBL
            , ITblPurchaseManagerSupplierBL iTblPurchaseManagerSupplierBL
           , Itblalertinstancebl itblalertinstancebl
            , ITblPurchaseVehicleMaterialSampleDAO itblPurchaseVehicleMaterialSampleDAO
            , ITblPurchaseVehicleDetailsDAO iTblPurchaseVehicleDetailsDAO
            , ITblPurchaseParityDetailsBL iTblPurchaseParityDetailsBL
            , ITblPurchaseEnquiryDetailsBL iTblPurchaseEnquiryDetailsBL
            , ITblExpressionDtlsBL iTblExpressionDtlsBL
            , ITblPurchaseInvoiceAddrDAO iTblPurchaseInvoiceAddrDAO
            , ITblProdClassificationBL iTblProdClassificationBL
            , ITblAddonsFunDtlsBL iTblAddonsFunDtlsBL
            , ITblBaseItemMetalCostBL iTblBaseItemMetalCostBL
            , ITblPurchaseInvoiceItemDetailsBL iTblPurchaseInvoiceItemDetailsBL
            , ITblModuleBL iTblModuleBL
           , ITblRecycleDocumentBL iTblRecycleDocumentBL
            , ITblUserBL iTblUserBL
            , ITblProductItemBL iTblProductItemBL
            , ITblQualityPhaseDtlsBL iTblQualityPhaseDtlsBL
            , ITblVariablesBL iTblVariablesBL
            , ITblSpotVehicleMaterialDtlsBL iTblSpotVehicleMaterialDtlsBL
            , ITblPurchaseVehicleStageCntBL iTblPurchaseVehicleStageCntBL
            , ITblGlobalRatePurchaseDAO iTblGlobalRatePurchaseDAO
            , ITblPurchaseEnquiryQtyConsumptionBL iTblPurchaseEnquiryQtyConsumptionBL
            , ITblPurchaseItemDescBL iTblPurchaseItemDescBL
            , ITblGateBL iTblGateBL,
             ITblWeighingMachineDAO iTblWeighingMachineDAO, IGateCommunication iGateCommunication, IIotCommunication iIotCommunication
            , IWeighingCommunication iWeighingCommunication, Idimensiondao idimensiondao, IModbusRefConfig iModbusRefConfig
            , ITblPartyWeighingMeasuresBL iTblPartyWeighingMeasuresBL
            , ITblPurchaseVehicleStatusHistoryBL iTblPurchaseVehicleStatusHistoryBL

            , ITblPurchaseVehFreightDtlsBL iTblPurchaseVehFreightDtlsBL
            , ILogger<TblPurchaseScheduleSummaryBL> logger
            , ITblPurchaseSchStatusHistoryBL iTblPurchaseSchStatusHistoryBL
            //, ITblRateBandDeclarationPurchaseBL iTblRateBandDeclarationPurchaseBL
            , ITblScheduleDensityBL iTblScheduleDensityBL
             , IDimReportTemplateBL iDimReportTemplateBL
           , IRunReport iRunReport
            , ITblPurchaseSchTcDtlsBL iTblPurchaseSchTcDtlsBL
            , ITblOrganizationBL iTblOrganizationBL
            , IReportDAO ireportDAO
            //, IReportDAO ireportDAO
            , ITblPurchaseVehLinkSaudaBL iTblPurchaseVehLinkSaudaBL
            , ITblPurchaseEnquiryDetailsDAO iTblPurchaseEnquiryDetailsDAO
            //, itblpurchasesch iTblPurchaseSchStatusHistoryBL
            , ITblPurchaseEnquiryDAO iTblPurchaseEnquiryDAO
            , ITblPurchaseVehLinkSaudaDAO iTblPurchaseVehLinkSaudaDAO
            //,ITblPurchaseInvoiceBL iTblPurchaseInvoiceBL
            , ITblReportsBackupDtlsBL iTblReportsBackupDtlsBL

            )
        {
            _iRunReport = iRunReport;
            _iDimReportTemplateBL = iDimReportTemplateBL;
            notification = inotify;
            notify = inotify;
            _iConnectionString = iConnectionString;
            _iTblPurchaseWeighingStageSummaryBL = iTblPurchaseWeighingStageSummaryBL;
            _iTblPurchaseVehicleStageCntBL = iTblPurchaseVehicleStageCntBL;
            _iTblSpotVehicleMaterialDtlsBL = iTblSpotVehicleMaterialDtlsBL;
            _iTblVariablesBL = iTblVariablesBL;
            _iTblQualityPhaseDtlsBL = iTblQualityPhaseDtlsBL;
            _iTblProductItemBL = iTblProductItemBL;
            _iTblUserBL = iTblUserBL;
            _iCommonDAO = icommondao;
            _iTblPartyWeighingMeasuresDAO = iTblPartyWeighingMeasuresDAO;
            _iTblRecycleDocumentBL = iTblRecycleDocumentBL;
            _iTblPurchaseUnloadingDtlBL = iTblPurchaseUnloadingDtlBL;
            _iTblPurchaseInvoiceItemDetailsDAO = iTblPurchaseInvoiceItemDetailsDAO;
            _iTblConfigParamsDAO = iTblConfigParamsDAO;
            _iTblPurchaseScheduleStatusHistoryBL = iTblPurchaseScheduleStatusHistoryBL;
            _iTblPurchaseWeighingStageSummaryDAO = iTblPurchaseWeighingStageSummaryDAO;
            _iTblConfigParamsBL = iTblConfigParamsBL;
            _iTblPurchaseVehicleDetailsBL = iTblPurchaseVehicleDetailsBL;
            _iTblPurchaseScheduleSummaryDAO = iTblPurchaseScheduleSummaryDAO;
            _iDimStatusBL = iDimStatusBL;
            _iTblPurchaseGradingDtlsBL = iTblPurchaseGradingDtlsBL;
            _iTblQualityPhaseBL = iTblQualityPhaseBL;
            _iTblPurchaseVehicleSpotEntryBL = iTblPurchaseVehicleSpotEntryBL;
            _idimensionBL = idimensionBL;
            _iCircularDependancyBL = iCircularDependancyBL;
            _iTblPurchaseEnquiryBL = iCircularDependancyBL;
            _iTblGradeExpressionDtlsBL = iTblGradeExpressionDtlsBL;
            _iTblPurchaseManagerSupplierBL = iTblPurchaseManagerSupplierBL;
            _itblalertinstancebl = itblalertinstancebl;
            _iTblPurchaseVehicleMaterialSampleDAO = itblPurchaseVehicleMaterialSampleDAO;
            _iTblPurchaseVehicleDetailsDAO = iTblPurchaseVehicleDetailsDAO;
            _iTblPurchaseParityDetailsBL = iTblPurchaseParityDetailsBL;
            _iTblPurchaseEnquiryDetailsBL = iTblPurchaseEnquiryDetailsBL;
            _iTblExpressionDtlsBL = iTblExpressionDtlsBL;
            _iTblPurchaseInvoiceAddrDAO = iTblPurchaseInvoiceAddrDAO;
            _iTblProdClassificationBL = iTblProdClassificationBL;
            _iTblAddonsFunDtlsBL = iTblAddonsFunDtlsBL;
            _iTblPurchaseInvoiceItemDetailsBL = iTblPurchaseInvoiceItemDetailsBL;
            _iTblModuleBL = iTblModuleBL;
            _iTblBaseItemMetalCostBL = iTblBaseItemMetalCostBL;
            _iTblGlobalRatePurchaseDAO = iTblGlobalRatePurchaseDAO;
            _iTblPurchaseEnquiryQtyConsumptionBL = iTblPurchaseEnquiryQtyConsumptionBL;
            _iTblPurchaseItemDescBL = iTblPurchaseItemDescBL;
            _iIotCommunication = iIotCommunication;
            _iGateCommunication = iGateCommunication;
            _iTblWeighingMachineDAO = iTblWeighingMachineDAO;
            _iWeighingCommunication = iWeighingCommunication;
            _iDimStatusDAO = iDimStatusDAO;
            _iTblGateBL = iTblGateBL;
            _iTblPartyWeighingMeasuresBL = iTblPartyWeighingMeasuresBL;
            _iTblPurchaseVehFreightDtlsBL = iTblPurchaseVehFreightDtlsBL;
            // _iTblRateBandDeclarationPurchaseBL = iTblRateBandDeclarationPurchaseBL;
            _iDimensiondao = idimensiondao;
            _iModbusRefConfig = iModbusRefConfig;
            _iTblPurchaseVehicleStatusHistoryBL = iTblPurchaseVehicleStatusHistoryBL;
            loggerObj = logger;
            _iTblPurchaseSchStatusHistoryBL = iTblPurchaseSchStatusHistoryBL;
            _iTblScheduleDensityBL = iTblScheduleDensityBL;
            _iTblPurchaseSchTcDtlsBL = iTblPurchaseSchTcDtlsBL;
            _iTblOrganizationBL = iTblOrganizationBL;
            _ireportDAO = ireportDAO;
            _iTblPurchaseEnquiryDAO = iTblPurchaseEnquiryDAO;
            _iTblPurchaseVehLinkSaudaBL = iTblPurchaseVehLinkSaudaBL;
            _iTblPurchaseEnquiryDetailsDAO = iTblPurchaseEnquiryDetailsDAO;
            _iTblPurchaseVehLinkSaudaDAO = iTblPurchaseVehLinkSaudaDAO;
            //_iTblPurchaseInvoiceBL = iTblPurchaseInvoiceBL;
            _iTblReportsBackupDtlsBL = iTblReportsBackupDtlsBL;
            _iTblSpotEntryContainerDtlsBL = iTblSpotEntryContainerDtlsBL;


        }
        #region Selection
        public List<TblPurchaseScheduleSummaryTO> SelectAllTblPurchaseScheduleSummary()
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllTblPurchaseScheduleSummary();
        }
        // public  TblPurchaseMaterialSampleTO GetTblPurchaseMaterialSample(int purchaseScheduleSummaryId)
        // {
        //     return TblPurchaseVehicleMaterialSampleDAO.getTblPurchaseMaterialSample(purchaseScheduleSummaryId);
        // }


        //Nikhil[2018-05-25] Add to get enquirywise schedule
        public List<TblPurchaseScheduleSummaryTO> SelectAllEnquiryScheduleSummary(Int32 purchaseEnquiryId, SqlConnection conn, SqlTransaction tran)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummary(purchaseEnquiryId, conn, tran);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    {
                        _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryList[i]);
                    }
                }

            }
            return tblPurchaseScheduleSummaryList;
        }
        public TblPurchaseScheduleSummaryTO SelectAllEnquiryScheduleSummaryTO(Int32 idPurchaseScheduleSummary, Boolean isActive, SqlConnection conn, SqlTransaction tran)
        {
            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTO(idPurchaseScheduleSummary, isActive, conn, tran);
            if (tblPurchaseScheduleSummaryTO != null)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT) ||
                    confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.BOTH))
                {
                    _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryTO);
                }
            }
            return tblPurchaseScheduleSummaryTO;
        }
        public TblPurchaseScheduleSummaryTO SelectAllEnquiryScheduleSummaryTOByRootScheduleID(Int32 RootScheduleId, Boolean isActive, SqlConnection conn, SqlTransaction tran)
        {

            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTOByRootID(RootScheduleId, isActive, conn, tran);
            //Added  by @KKM For fetch Gate Data From IoT
            if (tblPurchaseScheduleSummaryTO != null)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT) ||
                    confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.BOTH))
                {
                    _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryTO);
                }
            }
            return tblPurchaseScheduleSummaryTO;
        }

        public TblPurchaseScheduleSummaryTO SelectScheduleSummaryDetailByScheduleID(Int32 purchaseEnquiryId, Int32 PrevStatusId,Int32 rootScheduleId, SqlConnection conn, SqlTransaction tran)
        {
            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = _iTblPurchaseScheduleSummaryDAO.SelectScheduleSummaryTOByPurchaseSummaryID(purchaseEnquiryId, PrevStatusId,rootScheduleId, conn, tran);
            return tblPurchaseScheduleSummaryTO;
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllEnquiryScheduleSummaryTOByRootScheduleID(Int32 RootScheduleId, Boolean isActive)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTOByRootID(RootScheduleId, isActive);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {

                    //for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    // {
                    _iIotCommunication.GetItemDataFromIotAndMergeMulti(tblPurchaseScheduleSummaryList);
                    //}
                }

            }
            return tblPurchaseScheduleSummaryList;
        }
        public TblPurchaseScheduleSummaryTO SelectAllEnquiryScheduleSummaryTO(Int32 parentScheduleId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTO(parentScheduleId);
        }
        public TblPurchaseScheduleSummaryTO SelectAllEnquiryScheduleSummaryTOByParentScheduleId(Int32 parentScheduleId, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTOByParentScheduleId(parentScheduleId, conn, tran);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllEnquiryScheduleSummaryDtlsByEnquiryId(Int32 purchaseEnquiryId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryDtlsByEnquiryId(purchaseEnquiryId);
        }

        public void GetScheduleLatestStatus(List<TblPurchaseScheduleSummaryTO> scheduleList)
        {

            if (scheduleList != null && scheduleList.Count > 0)
            {
                Boolean isGetGradeExpDtls = false;
                for (int i = 0; i < scheduleList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO scheduleTO = scheduleList[i];

                    scheduleTO.PurchaseScheduleSummaryDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                    scheduleTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(scheduleTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);

                    List<TblPurchaseScheduleSummaryTO> tempTOList = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(scheduleTO.ActualRootScheduleId, true);
                    if (tempTOList != null && tempTOList.Count == 1)
                    {
                        scheduleTO.StatusId = tempTOList[0].StatusId;
                        scheduleTO.StatusDesc = tempTOList[0].StatusDesc;
                        scheduleTO.StatusName = tempTOList[0].StatusName;
                    }

                }
            }
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllEnquiryScheduleSummaryTOByRootId(Int32 rootScheduleId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {

                    //for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    // {
                    _iIotCommunication.GetItemDataFromIotAndMergeMulti(tblPurchaseScheduleSummaryList);
                    //}
                }

            }
            return tblPurchaseScheduleSummaryList;
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllEnquiryScheduleSummaryTOByRootId(Int32 rootScheduleId, SqlConnection conn, SqlTransaction tran)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    //for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    //{
                    _iIotCommunication.GetItemDataFromIotAndMergeMulti(tblPurchaseScheduleSummaryList);
                    //}
                }

            }
            return tblPurchaseScheduleSummaryList;
        }


        public List<TblPurchaseScheduleSummaryTO> SelectVehicleScheduleByRootAndStatusId(Int32 rootScheduleId, Int32 statusId, Int32 vehiclePhaseId, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectVehicleScheduleByRootAndStatusId(rootScheduleId, statusId, vehiclePhaseId, conn, tran);
        }

        public Int32 SelectVehicleScheduleByRootAndStatusIdCount(Int32 rootScheduleId, Int32 statusId, Int32 vehiclePhaseId, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectVehicleScheduleByRootAndStatusIdCount(rootScheduleId, statusId, vehiclePhaseId, conn, tran);
        }

        public List<TblPurchaseScheduleSummaryTO> SelectVehicleScheduleByRootAndStatusId(Int32 rootScheduleId, Int32 statusId, Int32 vehiclePhaseId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();
            string tempStatusIds = statusId.ToString();

            int confiqId = _iTblConfigParamsDAO.IoTSetting();
            if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                statusId = (Int32)Constants.TranStatusE.New;

                tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectVehicleScheduleByRootAndStatusId(rootScheduleId, statusId, vehiclePhaseId);

                //List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus((Int32)Constants.txnTypeEnum.SCRAP_VEHICLE_SCHEDULE);
                //_iIotCommunication.setGateDetailsFormIoT(tempStatusIds, statusList, tblPurchaseScheduleSummaryTOList);

                _iIotCommunication.GetItemDataFromIotAndMergeMulti(tblPurchaseScheduleSummaryTOList);

            }
            else
            {
                tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectVehicleScheduleByRootAndStatusId(rootScheduleId, statusId, vehiclePhaseId);
            }

            return tblPurchaseScheduleSummaryTOList;
        }

        //Saket [2020-05-23] Added for optimization
        public List<TblPurchaseScheduleSummaryTO> SelectVehicleScheduleDBBackUp(Int32 statusId, Int32 isDBBackUp)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectVehicleScheduleDBBackUp(statusId, isDBBackUp);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectVehicleScheduleByRootAndStatusId(Int32 rootScheduleId, string statusIds, string vehiclePhaseIds)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectVehicleScheduleByRootAndStatusId(rootScheduleId, statusIds, vehiclePhaseIds);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllEnquiryScheduleSummary(Int32 purchaseEnquiryId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummary(purchaseEnquiryId);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectEnquiryScheduleSummary(Int32 purchaseEnquiryId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectEnquiryScheduleSummary(purchaseEnquiryId);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForPurchaseEnquiry(Int32 purchaseEnquiryId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListForPurchaseEnquiry(purchaseEnquiryId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                // for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                // {
                //     TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                //     List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                //     tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary);
                //     if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;

                //         _iTblGradeExpressionDtlsBL.SelectGradeExpDtlsList(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList);
                //         // for (int k = 0; k < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; k++)
                //         // {
                //         //     tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].GradeExpressionDtlsTOList = _iTblGradeExpressionDtlsBL.SelectGradeExpressionDtlsByScheduleId(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].IdVehiclePurchase.ToString());
                //         // }
                //     }
                // }
            }

            return tblPurchaseScheduleSummaryTOList;
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForPurchaseEnquiry(Int32 purchaseEnquiryId, Int32 rootScheduleId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryDtlsByEnquiryId(purchaseEnquiryId, rootScheduleId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                //Added  by @KKM For fetch Gate Data From IoT
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                    {
                        _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryTOList[i]);
                    }
                }
                // for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                // {
                //     TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                //     List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                //     tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary);
                //     if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;

                //         for (int k = 0; k < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; k++)
                //         {
                //             tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].GradeExpressionDtlsTOList = _iTblGradeExpressionDtlsBL.SelectGradeExpressionDtlsByScheduleId(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].IdVehiclePurchase.ToString());
                //         }
                //     }
                // }
            }

            return tblPurchaseScheduleSummaryTOList;
        }

        public List<TblPurchaseScheduleSummaryTO> GetVehicleListForPendingQualityFlags(string pmUserId)
        {
            //chetan[16-jan-2020] added for get data from IOT
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.GetVehicleListForPendingQualityFlags(pmUserId);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    {
                        _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryList[i]);
                    }
                }
                return tblPurchaseScheduleSummaryList;
            }
            return null;
            //return _iTblPurchaseScheduleSummaryDAO.GetVehicleListForPendingQualityFlags(pmUserId);
        }



        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListByDate(DateTime scheduleDate)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListByDate(scheduleDate);
        }

        public List<VehicleStatusDateTO> SelectAllVehicleTrackingDtls(TblPurSchSummaryFilterTO tblPurSchSummaryFilterTO)
        {
            List<VehicleStatusDateTO> vehicleStatusDateTOList = _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleTrackingDtls(tblPurSchSummaryFilterTO); //, conn, tran);
            return vehicleStatusDateTOList;

        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsList(TblPurSchSummaryFilterTO tblPurSchSummaryFilterTO) //, SqlConnection conn, SqlTransaction tran)
        {

            if (tblPurSchSummaryFilterTO.IsInStatusIds == true)
            {
                TblConfigParamsTO TblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_STATUS_DISPLAYED_ON_PENDING_VEHICLE_SCREEN);
                if (TblConfigParamsTO != null)
                {
                    if (TblConfigParamsTO.ConfigParamVal.ToString() == "0")
                    {
                        tblPurSchSummaryFilterTO.InStatusIds = null;
                    }
                    else
                    {
                        tblPurSchSummaryFilterTO.InStatusIds = TblConfigParamsTO.ConfigParamVal.ToString();
                    }
                }
            }

            var tempStatusIds = tblPurSchSummaryFilterTO.InStatusIds;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                //tblPurSchSummaryFilterTO.InStatusIds = Convert.ToString((int)Constants.TranStatusE.New); //+ "," + statusId;
            }
            //@IoT Added By KKM
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsList(tblPurSchSummaryFilterTO); //, conn, tran);
            int confiqId = _iTblConfigParamsDAO.IoTSetting();
            if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus((Int32)Constants.txnTypeEnum.SCRAP_VEHICLE_SCHEDULE);
                _iIotCommunication.setGateDetailsFormIoT(tempStatusIds, statusList, tblPurchaseScheduleSummaryList);

            }
            return tblPurchaseScheduleSummaryList;
        }

        public List<TblPurchaseScheduleSummaryTO> GetVehSummaryForDashboard(TblPurSchSummaryFilterTO tblPurSchSummaryFilterTO)
        {
            List<TblPurchaseScheduleSummaryTO> returnList = new List<TblPurchaseScheduleSummaryTO>();
            //tblPurSchSummaryFilterTO.SkipDateTime = false;
            //tblPurSchSummaryFilterTO.FromDate = _iCommonDAO.ServerDateTime;
            //tblPurSchSummaryFilterTO.ToDate = tblPurSchSummaryFilterTO.FromDate;
            //tblPurSchSummaryFilterTO.IsInStatusIds = false;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = SelectAllVehicleDetailsList(tblPurSchSummaryFilterTO);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                List<TblPurchaseScheduleSummaryTO> spotVehList = new List<TblPurchaseScheduleSummaryTO>();
                List<TblPurchaseScheduleSummaryTO> insidePremisesVehList = new List<TblPurchaseScheduleSummaryTO>();
                List<TblPurchaseScheduleSummaryTO> ousidePremisesVehList = new List<TblPurchaseScheduleSummaryTO>();
                List<TblPurchaseScheduleSummaryTO> completeVehList = new List<TblPurchaseScheduleSummaryTO>();

                String insidePremisesIds = String.Empty;
                String outsidePremisesIds = String.Empty;
                String completeIds = String.Empty;

                TblConfigParamsTO insidePremisesConfigVal = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_INSIDE_PREMISES_VEH_STATUS_IDS);
                if (insidePremisesConfigVal != null)
                {
                    insidePremisesIds = Convert.ToString(insidePremisesConfigVal.ConfigParamVal);
                }

                TblConfigParamsTO outsidePremisesConfigVal = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_OUTSIDE_PREMISES_VEH_STATUS_IDS);
                if (outsidePremisesConfigVal != null)
                {
                    outsidePremisesIds = Convert.ToString(outsidePremisesConfigVal.ConfigParamVal);
                }

                TblConfigParamsTO completeConfigVal = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_COMPLETE_VEH_STATUS_IDS);
                if (completeConfigVal != null)
                {
                    completeIds = Convert.ToString(completeConfigVal.ConfigParamVal);
                }

                String userId = String.Empty;
                if (!String.IsNullOrEmpty(tblPurSchSummaryFilterTO.UserId))
                {
                    //userId = Convert.ToInt32(tblPurSchSummaryFilterTO.UserId);
                    userId = Convert.ToString(tblPurSchSummaryFilterTO.UserId);
                }

                List<TblProdClassificationTO> TblProdClassificationTOCatlist = _iTblProdClassificationBL.SelectAllProdClassificationListyByItemProdCatgE(Constants.ItemProdCategoryE.SCRAP_OR_WASTE);
                List<TblProdClassificationTO> TblProdClassificationTOSpecificationlist = new List<TblProdClassificationTO>();
                if (TblProdClassificationTOCatlist != null && TblProdClassificationTOCatlist.Count > 0)
                {
                    string catStr = (string.Join(",", TblProdClassificationTOCatlist.Select(x => x.IdProdClass.ToString()).ToArray()));

                    List<TblProdClassificationTO> TblProdClassificationTOSubCatlist = _iTblProdClassificationBL.SelectAllTblProdClassification(catStr, "SC");
                    if (TblProdClassificationTOSubCatlist != null && TblProdClassificationTOSubCatlist.Count > 0)
                    {
                        string subCatStr = (string.Join(",", TblProdClassificationTOSubCatlist.Select(x => x.IdProdClass.ToString()).ToArray()));

                        TblProdClassificationTOSpecificationlist = _iTblProdClassificationBL.SelectAllTblProdClassification(subCatStr, "S");
                    }

                }

                List<TblPurchaseVehicleSpotEntryTO> tblPurchaseVehicleSpotEntryTOList = _iTblPurchaseVehicleSpotEntryBL.SelectAllSpotVehCountForDashboard(userId, 0, 0);

                if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
                {
                    List<Int32> distinctMaterialType = TblProdClassificationTOSpecificationlist.Select(x => x.IdProdClass).Distinct().ToList();
                    if (distinctMaterialType != null && distinctMaterialType.Count > 0)
                    {
                        for (int i = 0; i < distinctMaterialType.Count; i++)
                        {
                            TblPurchaseScheduleSummaryTO returnTO = new TblPurchaseScheduleSummaryTO();

                            TblProdClassificationTO tempTO = TblProdClassificationTOSpecificationlist.Where(a => a.IdProdClass == distinctMaterialType[i]).FirstOrDefault();
                            if (tempTO != null)
                            {
                                returnTO.ProdClassDesc = tempTO.ProdClassDesc;
                            }

                            #region Total Vehicles
                            List<TblPurchaseScheduleSummaryTO> orderList = tblPurchaseScheduleSummaryList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                            if (orderList != null && orderList.Count > 0)
                            {
                                returnTO.TotalVehQtyForC = orderList.Sum(a => a.Qty);
                                returnTO.TotalVehQtyForC = Math.Round(returnTO.TotalVehQtyForC, 3);
                                returnTO.TotalVehCntForC = orderList.Count;
                            }

                            List<TblPurchaseScheduleSummaryTO> enquiryList = tblPurchaseScheduleSummaryList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                            if (enquiryList != null && enquiryList.Count > 0)
                            {
                                returnTO.TotalVehQtyForNC = enquiryList.Sum(a => a.Qty);
                                returnTO.TotalVehQtyForNC = Math.Round(returnTO.TotalVehQtyForNC, 3);
                                returnTO.TotalVehCntForNC = enquiryList.Count;
                            }
                            #endregion

                            #region Inside Premises
                            if (!String.IsNullOrEmpty(insidePremisesIds))
                            {
                                insidePremisesVehList = tblPurchaseScheduleSummaryList.Where(s => insidePremisesIds.Contains(Convert.ToString(s.StatusId))).ToList();
                                if (insidePremisesVehList != null && insidePremisesVehList.Count > 0)
                                {
                                    List<TblPurchaseScheduleSummaryTO> insidePreOrderList = insidePremisesVehList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                                    if (insidePreOrderList != null && insidePreOrderList.Count > 0)
                                    {
                                        returnTO.InsidePremisesVehQtyForC = insidePreOrderList.Sum(a => a.Qty);
                                        returnTO.InsidePremisesVehQtyForC = Math.Round(returnTO.InsidePremisesVehQtyForC, 3);
                                        returnTO.InsidePremisesCntForC = insidePreOrderList.Count;
                                    }

                                    List<TblPurchaseScheduleSummaryTO> insidePreEnquiryList = insidePremisesVehList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                                    if (insidePreEnquiryList != null && insidePreEnquiryList.Count > 0)
                                    {
                                        returnTO.InsidePremisesQtyForNC = insidePreEnquiryList.Sum(a => a.Qty);
                                        returnTO.InsidePremisesQtyForNC = Math.Round(returnTO.InsidePremisesQtyForNC, 3);
                                        returnTO.InsidePremisesVehCntForNC = insidePreEnquiryList.Count;
                                    }
                                }
                            }
                            #endregion

                            #region Outside Premises
                            if (!String.IsNullOrEmpty(outsidePremisesIds))
                            {
                                ousidePremisesVehList = tblPurchaseScheduleSummaryList.Where(s => outsidePremisesIds.Contains(Convert.ToString(s.StatusId))).ToList();
                                if (ousidePremisesVehList != null && ousidePremisesVehList.Count > 0)
                                {
                                    List<TblPurchaseScheduleSummaryTO> outsidePreOrderList = ousidePremisesVehList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                                    if (outsidePreOrderList != null && outsidePreOrderList.Count > 0)
                                    {
                                        returnTO.OutsidePremisesVehQtyForC = outsidePreOrderList.Sum(a => a.Qty);
                                        returnTO.OutsidePremisesVehQtyForC = Math.Round(returnTO.OutsidePremisesVehQtyForC, 3);
                                        returnTO.OutsidePremisesCntForC = outsidePreOrderList.Count;
                                    }

                                    List<TblPurchaseScheduleSummaryTO> outsidePreEnquiryList = ousidePremisesVehList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                                    if (outsidePreEnquiryList != null && outsidePreEnquiryList.Count > 0)
                                    {
                                        returnTO.OutsidePremisesQtyForNC = outsidePreEnquiryList.Sum(a => a.Qty);
                                        returnTO.OutsidePremisesQtyForNC = Math.Round(returnTO.OutsidePremisesQtyForNC, 3);
                                        returnTO.OutsidePremisesVehCntForNC = outsidePreEnquiryList.Count;
                                    }
                                }
                            }
                            #endregion

                            #region Complete Vehicles
                            if (!String.IsNullOrEmpty(completeIds))
                            {
                                completeVehList = tblPurchaseScheduleSummaryList.Where(s => completeIds.Contains(Convert.ToString(s.StatusId))).ToList();
                                if (completeVehList != null && completeVehList.Count > 0)
                                {
                                    List<TblPurchaseScheduleSummaryTO> completeVehOrderList = completeVehList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                                    if (completeVehOrderList != null && completeVehOrderList.Count > 0)
                                    {
                                        returnTO.CompleteVehQtyForC = completeVehOrderList.Sum(a => a.Qty);
                                        returnTO.CompleteVehQtyForC = Math.Round(returnTO.CompleteVehQtyForC, 3);
                                        returnTO.CompleteVehCntForC = completeVehOrderList.Count;
                                    }

                                    List<TblPurchaseScheduleSummaryTO> completeVehEnquiryList = completeVehList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM && a.ProdClassId == distinctMaterialType[i]).ToList();
                                    if (completeVehEnquiryList != null && completeVehEnquiryList.Count > 0)
                                    {
                                        returnTO.CompleteVehQtyForNC = completeVehEnquiryList.Sum(a => a.Qty);
                                        returnTO.CompleteVehQtyForNC = Math.Round(returnTO.CompleteVehQtyForNC, 3);
                                        returnTO.CompleteVehCntForNC = completeVehEnquiryList.Count;
                                    }
                                }
                            }
                            #endregion


                            #region Spot Vehicles

                            if (tblPurchaseVehicleSpotEntryTOList != null && tblPurchaseVehicleSpotEntryTOList.Count > 0)
                            {
                                List<TblPurchaseVehicleSpotEntryTO> tempSpotVehList = tblPurchaseVehicleSpotEntryTOList.Where(a => a.ProdClassId == distinctMaterialType[i]).ToList();
                                if (tempSpotVehList != null && tempSpotVehList.Count > 0)
                                {
                                    returnTO.TotalSpotVehQty = tempSpotVehList.Sum(a => a.SpotVehicleQty);
                                    returnTO.TotalSpotVehQty = Math.Round(returnTO.TotalSpotVehQty, 3);
                                    returnTO.TotalSpotVehCnt = tempSpotVehList.Count;
                                }

                                if (i == 0)
                                {
                                    List<TblPurchaseVehicleSpotEntryTO> otherSpotVehList = tblPurchaseVehicleSpotEntryTOList.Where(a => !distinctMaterialType.Contains(a.ProdClassId)).ToList();
                                    if (otherSpotVehList != null && otherSpotVehList.Count > 0)
                                    {
                                        returnTO.OtherSpotVehQty = otherSpotVehList.Sum(a => a.SpotVehicleQty);
                                        returnTO.OtherSpotVehQty = Math.Round(returnTO.OtherSpotVehQty, 3);
                                        returnTO.OtherSpotVehCnt = otherSpotVehList.Count;
                                    }
                                }

                            }

                            #endregion

                            returnList.Add(returnTO);

                        }
                    }
                }
            }

            return returnList;
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForGradeNote(TblPurSchSummaryFilterTO tblPurSchSummaryFilterTO, String purchaseManagerIds) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListForGradeNote(tblPurSchSummaryFilterTO, purchaseManagerIds); //, conn, tran);
        }

        //Added by minal 26 May 2021 For Dropbox
        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForGradeNoteForDropbox(string vehicleIds, int cOrNcId) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListForGradeNoteForDropbox(vehicleIds, cOrNcId); //, conn, tran);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForMasterReportForDropbox(string vehicleIds, int cOrNcId) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListForMasterReportForDropbox(vehicleIds, cOrNcId); //, conn, tran);
        }
        //Added by minal 
        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForMasterReport(TblPurSchSummaryFilterTO tblPurSchSummaryFilterTO, String purchaseManagerIds) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListForMasterReport(tblPurSchSummaryFilterTO, purchaseManagerIds); //, conn, tran);
        }

        public List<TblPurchaseScheduleSummaryTO> SelectVehicleListForAllCommonApprovals(TblPurSchSummaryFilterTO tblPurSchSummaryFilterTO) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectVehicleListForAllCommonApprovals(tblPurSchSummaryFilterTO); //, conn, tran);
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailList(String statusId, Int32 loggedInUserId, DateTime date) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllReportedVehicleDetailList(statusId, loggedInUserId, date); //, conn, tran);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailList(DateTime fromDate, DateTime toDate, string statusId, Int32 loggedInUserId, Int32 showList, Int32 idPurchaseScheduleSummary, Int32 rootScheduleId) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllReportedVehicleDetailList(fromDate, toDate, statusId, loggedInUserId, showList, idPurchaseScheduleSummary, rootScheduleId); //, conn, tran);
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailListForRecovery(DateTime fromDate, DateTime toDate, string statusId, Int32 loggedInUserId, Int32 rootScheduleId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllReportedVehicleDetailListForRecovery(fromDate, toDate, statusId, loggedInUserId, rootScheduleId); //, conn, tran);
        }

        //Prajakta[2021-01-13] Commented and added following method
        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailsListPhasewise(DateTime fromDate, DateTime toDate, String userId, Int32 rootScheduleId, string showListE) //, SqlConnection conn, SqlTransaction tran)
        {
            string ignoreStatusIds = "";
            TblConfigParamsTO tblConfigParamsTOMaterial = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IGNORE_STATUS_FOR_CORRECTION_SCREEN);
            if (tblConfigParamsTOMaterial != null)
            {
                ignoreStatusIds = Convert.ToString(tblConfigParamsTOMaterial.ConfigParamVal);
            }
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllReportedVehicleDetailsListPhasewise(fromDate, toDate, userId, rootScheduleId, showListE, ignoreStatusIds); //, conn, tran);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    {
                        _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryList[i]);
                    }
                }
            }
            return tblPurchaseScheduleSummaryList;
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailsListPhasewiseForComp(TblPurSchSummaryFilterTO tblPurSchSummaryFilterTO)
        {
            string ignoreStatusIds = "";
            TblConfigParamsTO tblConfigParamsTOMaterial = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IGNORE_STATUS_FOR_CORRECTION_SCREEN);
            if (tblConfigParamsTOMaterial != null)
            {
                ignoreStatusIds = Convert.ToString(tblConfigParamsTOMaterial.ConfigParamVal);
                if (!String.IsNullOrEmpty(ignoreStatusIds))
                    tblPurSchSummaryFilterTO.NotInStatusIds = ignoreStatusIds;
            }
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllReportedVehicleDetailsListPhasewiseForComp(tblPurSchSummaryFilterTO);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                //GetCorrectionUnldPadtaDtls(tblPurchaseScheduleSummaryList);
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    {
                        _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryList[i]);
                    }
                }
            }
            return tblPurchaseScheduleSummaryList;
        }
        public void GetCorrectionUnldPadtaDtls(List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList)
        {
            Int32 statusId = (Int32)Constants.TranStatusE.UNLOADING_COMPLETED;
            Int32 correctionPhaseId = (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS;
            Int32 gradingPhaseId = (Int32)Constants.PurchaseVehiclePhasesE.GRADING;

            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO scheduleSummaryTO = tblPurchaseScheduleSummaryList[i];


                    List<TblPurchaseScheduleSummaryTO> gradingComplList = SelectVehicleScheduleByRootAndStatusId(scheduleSummaryTO.ActualRootScheduleId, statusId, gradingPhaseId);
                    if (gradingComplList == null || gradingComplList.Count == 0)
                    {
                        continue;
                    }

                    //scheduleSummaryTO.GradingComplOn = gradingComplList[0].UpdatedOn;

                    List<TblPurchaseScheduleSummaryTO> correctionComplList = SelectVehicleScheduleByRootAndStatusId(scheduleSummaryTO.ActualRootScheduleId, statusId, correctionPhaseId);
                    if (correctionComplList == null || correctionComplList.Count == 0)
                    {
                        continue;
                    }

                    TblPurchaseScheduleSummaryTO correctionTO = new TblPurchaseScheduleSummaryTO();

                    if (correctionComplList.Count == 1)
                    {
                        correctionTO = correctionComplList[0];

                    }
                    if (correctionComplList.Count > 1)
                    {
                        correctionTO = correctionComplList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).FirstOrDefault();
                    }

                    if (correctionTO != null)
                    {
                        if (scheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            scheduleSummaryTO.CorrectionPadtaAmt = correctionTO.UnldDatePadtaPerTon;
                        else if (scheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                        {
                            scheduleSummaryTO.CorrectionPadtaAmt = correctionTO.UnldDatePadtaPerTonForNC;
                        }
                    }
                }
            }
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailsList(String vehicleNo, String statusId, Int32 idPurchaseScheduleSummary) //, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllReportedVehicleDetailsList(vehicleNo, statusId, idPurchaseScheduleSummary); //, conn, tran);
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllTblPurchaseScheduleSummaryList()
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllTblPurchaseScheduleSummary();

        }
        public List<TblPurchaseScheduleSummaryTO> SelectTblPurchaseScheduleSummaryDetails(Int32 idSchedulePurchaseSummary, Boolean isActive)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleSummaryDetails(idSchedulePurchaseSummary, isActive);
            if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    //for (int i = 0; i < tblPurchaseScheduleSummaryList.Count; i++)
                    //{

                    _iIotCommunication.GetItemDataFromIotAndMergeMulti(tblPurchaseScheduleSummaryList);
                    // }
                }
            }
            return tblPurchaseScheduleSummaryList;
        }

        public List<TblPurchaseScheduleSummaryTO> SelectTblPurchaseScheduleSummaryDetailsDB(Int32 idSchedulePurchaseSummary, Boolean isActive)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleSummaryDetails(idSchedulePurchaseSummary, isActive);
            return tblPurchaseScheduleSummaryList;
        }

        public List<TblPurchaseScheduleSummaryTO> SelectTblPurchaseScheduleDtlsByRootScheduleId(Int32 rootScheduleId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleDtlsByRootScheduleId(rootScheduleId);
        }

        public List<TblPurchaseScheduleSummaryTO> SelectTblPurchaseScheduleDtlsByRootScheduleId(Int32 rootScheduleId, string statusIds)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleDtlsByRootScheduleId(rootScheduleId, statusIds);
        }

        public List<TblPurchaseScheduleSummaryTO> SelectTblPurchaseScheduleDtlsByRootScheduleId(Int32 rootScheduleId, string statusIds, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleDtlsByRootScheduleId(rootScheduleId, statusIds, conn, tran);
        }
        // public  TblPurchaseScheduleSummaryTO SelectTblPurchaseScheduleSummaryTO(Int32 idPurchaseScheduleSummary)
        // {
        //     DataTable tblPurchaseScheduleSummaryTODT = _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleSummary(idPurchaseScheduleSummary);
        //     List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = ConvertDTToList(tblPurchaseScheduleSummaryTODT);
        //     if(tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count == 1)
        //         return tblPurchaseScheduleSummaryTOList[0];
        //     else
        //         return null;
        // }


        public DropDownTO SelectSuperwiserFromTblPurchaseScheduleSummary(int statusId)
        {

            Int32 roleTypeId = Convert.ToInt32(Constants.SystemRoleTypeE.UNLOADING_SUPERVISOR);
            String roleIds = _idimensionBL.GetRoleIdsStrFromRoleTypeId(roleTypeId);

            List<TblPurchaseScheduleSummaryTO> objList = new List<TblPurchaseScheduleSummaryTO>();
            objList = _iTblPurchaseScheduleSummaryDAO.SelectSuperwiserFromTblPurchaseScheduleSummary(statusId, roleIds);

            List<DropDownTO> userList = _iTblUserBL.GetUnloadingPersonListForDropDown(roleIds.ToString());
            Dictionary<int, int> superwiserlst = new Dictionary<int, int>();
            foreach (var i in userList)
            {
                superwiserlst.Add(i.Value, 0);
            }

            foreach (TblPurchaseScheduleSummaryTO obj in objList)
            {
                foreach (var i in userList)
                {
                    if (obj.SupervisorId == Convert.ToInt32(i.Value))
                    {
                        superwiserlst[i.Value] = superwiserlst[i.Value] + 1;
                    }
                }
            }
            // below code will return superwiserid who having min   vehile  assigned
            var userid = superwiserlst.OrderBy(i => i.Value).FirstOrDefault().Key;

            // return userid.ToString();
            return userList.Where(x => x.Value == userid).FirstOrDefault();

        }
        public List<TblPurchaseScheduleSummaryTO> GetScheduleDetailsByPurchaseEnquiryIdForDisplay(Int32 enquiryPurchaseId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForPurchaseEnquiry(enquiryPurchaseId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                // for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                // {
                //     TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                //     List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                //     tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary);
                //     if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                //     }
                // }
            }


            return tblPurchaseScheduleSummaryTOList;

        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllCorrectionCompleVehicles(DateTime toDate, Int32 cOrNcId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllCorrectionCompleVehicles(toDate, cOrNcId);
        }

        public List<TblPurchaseScheduleSummaryTO> UnloadingRateScrapQuery(DateTime fromDate, DateTime toDate)
        {
            return _iTblPurchaseScheduleSummaryDAO.UnloadingRateScrapQuery(fromDate, toDate);
        }

        public TblPurchaseScheduleSummaryTO SelectTblPurchaseScheduleSummaryDtlsTO(Int32 isPurchaseScheduleSummary, Int32 rootScheduleId, Int32 isGetQtyOfNewStatus = 0)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleSummaryDetailsList(isPurchaseScheduleSummary, rootScheduleId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count == 1)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    _iIotCommunication.GetItemDataFromIotAndMerge(tblPurchaseScheduleSummaryTOList[0]);
                }
                if (isGetQtyOfNewStatus == 1)
                {
                    Boolean isForBrm = false;
                    TblConfigParamsTO tblConfigParamsTOIsBrm = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
                    if (tblConfigParamsTOIsBrm != null && tblConfigParamsTOIsBrm.ConfigParamVal.ToString() == "1")
                    {
                        isForBrm = true;
                    }
                    if (isForBrm == true)
                    {
                        List<TblPurchaseScheduleSummaryTO> TempTblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleDtlsByRootScheduleId(tblPurchaseScheduleSummaryTOList[0].RootScheduleId, Convert.ToString((Int32)Constants.TranStatusE.New));
                        if (TempTblPurchaseScheduleSummaryTOList != null && TempTblPurchaseScheduleSummaryTOList.Count > 0)
                        {
                            tblPurchaseScheduleSummaryTOList[0].Qty = TempTblPurchaseScheduleSummaryTOList[0].Qty;
                        }
                    }
                }
                return tblPurchaseScheduleSummaryTOList[0];
            }
            else
                return null;

        }



        public TblPurchaseScheduleSummaryTO GetVehicleDetailsByScheduleIds(Int32 IdPurchaseScheduleSummary, Int32 statusId, Int32 vehiclePhaseId, Int32 rootScheduleId, Int32 isGetQtyOfNewStatus = 0)
        {

            //TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryReturnTO = new TblPurchaseScheduleSummaryTO();

            Boolean isGetGradeExpDtls = false;
            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = SelectTblPurchaseScheduleSummaryDtlsTO(IdPurchaseScheduleSummary, rootScheduleId, isGetQtyOfNewStatus);
            if (tblPurchaseScheduleSummaryTO != null)
            {
                if (vehiclePhaseId > 0)
                {
                    if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(statusId) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(vehiclePhaseId))
                    {
                        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                        tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                        if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                        {
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                        }
                        return tblPurchaseScheduleSummaryTO;
                    }
                    else if (tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId > 0)
                    {
                        return GetVehicleDetailsByScheduleIds(tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId, statusId, vehiclePhaseId, 0);
                    }
                    else
                        return null;
                }
                else
                {
                    if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(statusId))
                    {
                        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                        tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                        if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                        {
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                        }
                        return tblPurchaseScheduleSummaryTO;
                    }
                    else if (tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId > 0)
                    {
                        return GetVehicleDetailsByScheduleIds(tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId, statusId, vehiclePhaseId, 0);
                    }
                    else
                        return null;
                }

            }
            return null;
        }

        public List<TblPurchaseScheduleSummaryTO> GetAllVehicleListForGrading(String statusId, DateTime fromDate, DateTime toDate, Int32 loggedInUserId, Int32 idPurchaseScheduleSummary, Int32 rootScheduleId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryReturnTOList = new List<TblPurchaseScheduleSummaryTO>();
            //Below code for get all new status List @KKM
            var tempStatusIds = statusId;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                tempStatusIds = Convert.ToString((int)Constants.TranStatusE.New);
            }
            List<TblPurchaseScheduleSummaryTO> templist = SelectAllReportedVehicleDetailList(fromDate, toDate, tempStatusIds, loggedInUserId, Convert.ToInt32(Constants.ShowListE.GRADING), idPurchaseScheduleSummary, rootScheduleId);
            //Deepali[12-02-2019]commented for code optimization // added new flag for getting list IsGradingCompleted
            // if (templist != null && templist.Count > 0)
            // {
            //     for (int i = 0; i < templist.Count; i++)
            //     {
            //         if (templist[i].StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED) ||
            //            templist[i].StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_IS_IN_PROCESS))
            //         {
            //             tblPurchaseScheduleSummaryTOList.Add(templist[i]);
            //         }
            //         else
            //         {
            //             List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOTempList = TblPurchaseScheduleSummaryBL.SelectTblPurchaseScheduleDtlsByRootScheduleId(templist[i].RootScheduleId, Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED).ToString());
            //             if (tblPurchaseScheduleSummaryTOTempList != null && tblPurchaseScheduleSummaryTOTempList.Count > 0)
            //             {
            //                 if (tblPurchaseScheduleSummaryTOTempList[0].VehiclePhaseId != Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING))
            //                 {
            //                     tblPurchaseScheduleSummaryTOList.Add(tblPurchaseScheduleSummaryTOTempList[0]);
            //                 }
            //             }

            //         }
            //     }
            // }

            // if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            // {

            //     //for loop to get final list --sttaus id=UC or Up push as it or get uC parent TO
            //     for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
            //     {
            //         TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];

            //         //To Get Weighing List
            //         List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = new List<TblPurchaseWeighingStageSummaryTO>();
            //         tblPurchaseWeighingStageSummaryTOList = BL.TblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseScheduleSummaryTO.RootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString());
            //         // if(tblPurchaseScheduleSummaryTO.StatusId==Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED))
            //         // {
            //         //     tblPurchaseWeighingStageSummaryTOList = BL.TblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString());
            //         // }
            //         // else
            //         // {
            //         //     tblPurchaseWeighingStageSummaryTOList = BL.TblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString());
            //         // }

            //         if (tblPurchaseWeighingStageSummaryTOList != null && tblPurchaseWeighingStageSummaryTOList.Count > 0)
            //         {
            //             Boolean isMaterialUnloaded = false;
            //             for (int k = 0; k < tblPurchaseWeighingStageSummaryTOList.Count; k++)
            //             {
            //                 if (!isMaterialUnloaded)
            //                 {
            //                     List<TblPurchaseUnloadingDtlTO> tblPurchaseUnloadingDtlTOList = BL.TblPurchaseUnloadingDtlBL.SelectAllTblPurchaseUnloadingDtlList(tblPurchaseWeighingStageSummaryTOList[k].IdPurchaseWeighingStage);
            //                     if (tblPurchaseUnloadingDtlTOList != null && tblPurchaseUnloadingDtlTOList.Count > 0)
            //                     {
            //                         if (Convert.ToBoolean(tblPurchaseUnloadingDtlTOList[0].IsConfirmUnloading))
            //                         {
            //                             isMaterialUnloaded = true;
            //                             List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
            //                             tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary);
            //                             if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
            //                             {
            //                                 tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
            //                             }
            //                             tblPurchaseScheduleSummaryReturnTOList.Add(tblPurchaseScheduleSummaryTO);
            //                         }

            //                     }
            //                 }

            //             }

            //         }
            //     }
            // }

            tblPurchaseScheduleSummaryReturnTOList = templist;
            //Filter data status wise after fetching IoT Data @KKM
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                //List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus();
                //chetan[24-feb-2020] added for iot status transction wise
                int transctionTypeId = (int)PurchaseTrackerAPI.StaticStuff.Constants.TransactionTypeE.SAUDA;
                List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus(transctionTypeId);
                _iIotCommunication.setGateDetailsFormIoT(statusId, statusList, tblPurchaseScheduleSummaryReturnTOList);
                tblPurchaseScheduleSummaryReturnTOList = tblPurchaseScheduleSummaryReturnTOList.Where(s => statusId.Contains(Convert.ToString(s.StatusId))).ToList();
            }
            return tblPurchaseScheduleSummaryReturnTOList;
        }

        public List<TblPurchaseScheduleSummaryTO> GetAllVehicleListForRecovery(String statusId, Int32 loggedInUserId, DateTime fromDate, DateTime toDate, Int32 rootScheduleId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryReturnTOList = new List<TblPurchaseScheduleSummaryTO>();
            //Below code for get all new status List @KKM
            var tempStatusIds = statusId;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                tempStatusIds = Convert.ToString((int)Constants.TranStatusE.New);
            }
            List<TblPurchaseScheduleSummaryTO> templist = SelectAllReportedVehicleDetailListForRecovery(fromDate, toDate, tempStatusIds, loggedInUserId, rootScheduleId);
            tblPurchaseScheduleSummaryReturnTOList = templist;
            //Filter data status wise after fetching IoT Data @KKM
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                //List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus();
                int transactionTypeId = (int)PurchaseTrackerAPI.StaticStuff.Constants.TransactionTypeE.SAUDA;
                List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus(transactionTypeId);
                _iIotCommunication.setGateDetailsFormIoT(statusId, statusList, tblPurchaseScheduleSummaryReturnTOList);
                tblPurchaseScheduleSummaryReturnTOList = tblPurchaseScheduleSummaryReturnTOList.Where(s => statusId.Contains(Convert.ToString(s.StatusId))).ToList();
            }
            return tblPurchaseScheduleSummaryReturnTOList;
        }

        public List<TblPurchaseScheduleSummaryTO> GetAllVehicleListForUnloading(String statusId, Int32 loggedInUserId, DateTime fromDate, DateTime toDate, int showList, Int32 idPurchaseScheduleSummary, Int32 rootScheduleId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryReturnTOList = new List<TblPurchaseScheduleSummaryTO>();
            var tempStatusIds = statusId;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                tempStatusIds = Convert.ToString((int)Constants.TranStatusE.New);
            }
            //List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllReportedVehicleDetailList(fromDate, toDate, tempStatusIds, loggedInUserId, Convert.ToInt32(Constants.ShowListE.UNLOADING), idPurchaseScheduleSummary, rootScheduleId);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllReportedVehicleDetailList(fromDate, toDate, tempStatusIds, loggedInUserId, showList, idPurchaseScheduleSummary, rootScheduleId);

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.IsGradingUnldCompleted == 0).ToList();

                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {
                    if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                    {
                        //List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus();
                        int transactionTypeId = (int)PurchaseTrackerAPI.StaticStuff.Constants.TransactionTypeE.SAUDA;
                        List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus(transactionTypeId);
                        _iIotCommunication.setGateDetailsFormIoT(statusId, statusList, tblPurchaseScheduleSummaryTOList);
                        tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(s => statusId.Contains(Convert.ToString(s.StatusId))).ToList();
                    }
                }

                tblPurchaseScheduleSummaryReturnTOList = tblPurchaseScheduleSummaryTOList;
            }

            return tblPurchaseScheduleSummaryReturnTOList;
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailsList(String statusId, DateTime date)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllReportedVehicleDetailList(statusId, 0, date);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);

                // for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                // {
                //     TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                //     List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                //     tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary);
                //     if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                //     }
                // }
            }

            return tblPurchaseScheduleSummaryTOList;
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllReportedVehicleDetailsList(DateTime fromDate, DateTime toDate, string statusId, Int32 idPurchaseScheduleSummary, Int32 rootScheduleId)
        {
            var tempStatusIds = statusId;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                tempStatusIds = Convert.ToString((int)Constants.TranStatusE.New); //+ "," + statusId;
            }
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllReportedVehicleDetailList(fromDate, toDate, tempStatusIds, 0, Convert.ToInt32(Constants.ShowListE.ALL), idPurchaseScheduleSummary, rootScheduleId);
            //Added By Kiran 12-12-18

            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                //If Multiple gate
                List<TblPurchaseScheduleSummaryTO> distGate = tblPurchaseScheduleSummaryTOList.GroupBy(g => g.GateId).Select(s => s.FirstOrDefault()).ToList();

                GateIoTResult gateIoTResult = new GateIoTResult();
                //GetIotEncodedStatusIdsForGivenStatus for DB status To IoT status
                string finalStatusId = _iIotCommunication.GetIotEncodedStatusIdsForGivenStatus(statusId);
                for (int g = 0; g < distGate.Count; g++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTOTemp = distGate[g];
                    TblGateTO tblGateTO = new TblGateTO(tblPurchaseScheduleSummaryTOTemp.GateId, tblPurchaseScheduleSummaryTOTemp.IoTUrl, tblPurchaseScheduleSummaryTOTemp.MachineIP, tblPurchaseScheduleSummaryTOTemp.PortNumber);
                    GateIoTResult statusWiseData = _iIotCommunication.GetLoadingSlipsByStatusFromIoTByStatusId(finalStatusId, tblGateTO);

                    if (statusWiseData != null && statusWiseData.Data != null)
                    {
                        gateIoTResult.Data.AddRange(statusWiseData.Data);
                    }
                }
                if (gateIoTResult != null && gateIoTResult.Data != null)
                {
                    List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus((Int32)Constants.txnTypeEnum.SCRAP_VEHICLE_SCHEDULE);
                    for (int d = 0; d < tblPurchaseScheduleSummaryTOList.Count; d++)
                    {
                        var data = gateIoTResult.Data.Where(w => Convert.ToInt32(w[0]) == tblPurchaseScheduleSummaryTOList[d].ModbusRefId).FirstOrDefault();
                        if (data != null)
                        {
                            //tblPurchaseScheduleSummaryTOList[d].VehicleNo = Convert.ToString(data[(int)IoTConstants.GateIoTColE.VehicleNo]);
                            tblPurchaseScheduleSummaryTOList[d].VehicleNo = _iIotCommunication.GetVehicleNumbers(Convert.ToString(data[(int)IoTConstants.GateIoTColE.VehicleNo]), true);
                            //if (data.Length > 3)
                            //    tblPurchaseScheduleSummaryTOList[d].TransporterOrgId = Convert.ToInt32(data[(int)IoTConstants.GateIoTColE.TransportorId]);
                            DimStatusTO dimStatusTO = statusList.Where(w => w.IotStatusId == Convert.ToInt32(data[(int)IoTConstants.GateIoTColE.StatusId])).FirstOrDefault();
                            if (dimStatusTO != null)
                            {
                                tblPurchaseScheduleSummaryTOList[d].StatusId = dimStatusTO.IdStatus;
                                tblPurchaseScheduleSummaryTOList[d].StateName = dimStatusTO.StatusName;
                                tblPurchaseScheduleSummaryTOList[d].StatusDesc = dimStatusTO.StatusDesc;
                                tblPurchaseScheduleSummaryTOList[d].ColorCode = dimStatusTO.ColorCode;
                                dimStatusTO = GetNextStatusTO(dimStatusTO.IdStatus, statusList, 1);
                                if (dimStatusTO != null)
                                {
                                    tblPurchaseScheduleSummaryTOList[d].PreviousStatusId = dimStatusTO.IdStatus;
                                    tblPurchaseScheduleSummaryTOList[d].PreviousStatusName = dimStatusTO.StatusName;
                                }
                            }

                        }
                        //else
                        //{
                        //    tblPurchaseScheduleSummaryTOList.RemoveAt(d);
                        //    d--;
                        //}
                    }
                }
                tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(s => statusId.Contains(Convert.ToString(s.StatusId))).ToList();
            }

            SetStatusForNCScheduleSummmary(tblPurchaseScheduleSummaryTOList);

            //Saket [2019-02-01] Performance Issue
            //if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            //{
            //    for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
            //    {
            //        TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
            //        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

            //        tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary);
            //        if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
            //        {
            //            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
            //        }

            //        _iTblPurchaseVehicleDetailsBL.GetGradeExpressionDetails(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList);
            //    }
            //}

            return tblPurchaseScheduleSummaryTOList;
        }
        //Priyanka [22-02-2019] : Extract method for set the status for NC schedule.
        private void SetStatusForNCScheduleSummmary(List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList)
        {
            List<TblPurchaseScheduleSummaryTO> list = new List<TblPurchaseScheduleSummaryTO>();
            //Prajakta[2019-03-12] Added if condition
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                String MaterialTypeId = String.Empty;
                TblConfigParamsTO tblConfigParamsTOMaterial = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_CONFIG_SETTING_FOR_CONTAINER_AND_LOTSIZE);
                if (tblConfigParamsTOMaterial != null)
                {
                    MaterialTypeId = (tblConfigParamsTOMaterial.ConfigParamVal).ToString();
                }
                if (!String.IsNullOrEmpty(MaterialTypeId))
                {
                    //list = tblPurchaseScheduleSummaryTOList.Where(e => !MaterialTypeId.Contains(e.ProdClassId.ToString())).ToList();

                    //list = tblPurchaseScheduleSummaryTOList.Where(e => (e.COrNcId == 0 || e.ProdClassId == MaterialTypeId) && e.StatusId == Convert.ToInt32(Constants.TranStatusE.New)).ToList();
                    list = tblPurchaseScheduleSummaryTOList.Where(e => (e.COrNcId == 0 || MaterialTypeId.Contains(e.ProdClassId.ToString())) && e.StatusId == Convert.ToInt32(Constants.TranStatusE.New)).ToList();
                }
                else
                {
                    list = tblPurchaseScheduleSummaryTOList.Where(e => e.COrNcId == 0 && e.StatusId == Convert.ToInt32(Constants.TranStatusE.New)).ToList();
                }

                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {
                    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
                    if (tblConfigParamsTO != null && Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 1)
                    {
                        List<DimStatusTO> dimStatusTOList = _iDimStatusBL.SelectAllDimStatusList();

                        //Prajakta[2019-03-12] Added if condition
                        if (list != null && list.Count > 0)
                        {
                            for (int i = 0; i < list.Count; i++)
                            {
                                DimStatusTO dimStatusTONext = GetNextStatusTO(list[i].PreviousStatusId, dimStatusTOList, 1);
                                if (dimStatusTONext != null)
                                {
                                    list[i].PreviousStatusId = dimStatusTONext.IdStatus;
                                    list[i].PreviousStatusName = dimStatusTONext.StatusName;
                                }
                            }
                        }

                    }

                    foreach (var item in tblPurchaseScheduleSummaryTOList)
                    {
                        if (item.StatusId == (int)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING
                            || item.StatusId == (int)Constants.TranStatusE.REJECTED_VEHICLE_OUT
                        || item.StatusId == (int)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_GROSS_WEIGHT || item.StatusId == (int)Constants.TranStatusE.WEIGHING_COMPLETED || item.StatusId == (int)Constants.TranStatusE.VEHICLE_REJECTED_BEFORE_WEIGHING)
                        {
                            item.PreviousStatusId = (int)Constants.TranStatusE.VEHICLE_OUT;
                            item.PreviousStatusName = "Vehicle Out";

                        }
                    }
                }

            }

        }

        public DimStatusTO GetNextStatusTO(Int32 currentStatusId, List<DimStatusTO> dimStatusTOList, Int32 isNext)
        {
            DimStatusTO dimStatusTONext = new DimStatusTO();
            if (isNext == 1)
            {
                dimStatusTONext = dimStatusTOList.Where(w => w.PrevStatusId == currentStatusId).FirstOrDefault();
            }
            else if (isNext == 2)
            {
                dimStatusTONext = dimStatusTOList.Where(w => w.PrevStatusId == currentStatusId).FirstOrDefault();
                if (dimStatusTONext != null)
                {
                    dimStatusTONext = dimStatusTOList.Where(w => w.PrevStatusId == dimStatusTONext.IdStatus).FirstOrDefault();
                }

            }
            return dimStatusTONext;
        }

        public List<TblPurchaseScheduleSummaryTO> GetScheduleDetailsByPurchaseEnquiryId(Int32 enquiryPurchaseId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummary(enquiryPurchaseId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                // for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                // {
                //     TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                //     List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                //     tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary);
                //     if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                //     }
                // }
            }


            return tblPurchaseScheduleSummaryTOList;
        }
        public void GetSameProdItemsCombinedList(List<TblPurchaseScheduleSummaryTO> filterList, Boolean isConsiderRec)
        {

            if (filterList != null && filterList.Count > 0)
            {
                for (int i = 0; i < filterList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = filterList[i];
                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                    {
                        //List<Int32> distinctProdItemIds = new List<Int32>();
                        List<TblPurchaseVehicleDetailsTO> distinctList = new List<TblPurchaseVehicleDetailsTO>();

                        //distinctProdItemIds = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Select(x => x.ProdItemId).Distinct().ToList();
                        if (isConsiderRec)
                            distinctList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.GroupBy(x => new { x.ProdItemId, x.Recovery, x.Rate }).Select(s => s.FirstOrDefault()).ToList();
                        else
                            distinctList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.GroupBy(x => new { x.ProdItemId, x.Rate }).Select(s => s.FirstOrDefault()).ToList();

                        if (distinctList != null && distinctList.Count > 0)
                        {

                            List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsFinalTOList = new List<TblPurchaseVehicleDetailsTO>();
                            for (int k = 0; k < distinctList.Count; k++)
                            {
                                Int32 index = 1;
                                List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                                if (isConsiderRec)
                                    tblPurchaseVehicleDetailsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.ProdItemId == distinctList[k].ProdItemId && a.Recovery == distinctList[k].Recovery && a.Rate == distinctList[k].Rate).ToList();
                                else
                                    tblPurchaseVehicleDetailsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.ProdItemId == distinctList[k].ProdItemId && a.Rate == distinctList[k].Rate).ToList();

                                if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                                {
                                    TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTempTO = new TblPurchaseVehicleDetailsTO();
                                    for (int m = 0; m < tblPurchaseVehicleDetailsTOList.Count; m++)
                                    {
                                        if (m == 0)
                                        {
                                            tblPurchaseVehicleDetailsTempTO = tblPurchaseVehicleDetailsTOList[m];
                                        }
                                        else
                                        {
                                            tblPurchaseVehicleDetailsTempTO.Qty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                            tblPurchaseVehicleDetailsTempTO.Qty = Math.Round(tblPurchaseVehicleDetailsTempTO.Qty, 3);

                                            tblPurchaseVehicleDetailsTempTO.ProductRecovery += tblPurchaseVehicleDetailsTOList[m].ProductRecovery;
                                            tblPurchaseVehicleDetailsTempTO.ProductRecovery = Math.Round(tblPurchaseVehicleDetailsTempTO.ProductRecovery, 3);

                                            tblPurchaseVehicleDetailsTempTO.ProductAomunt += tblPurchaseVehicleDetailsTOList[m].ProductAomunt;
                                        }

                                    }
                                    tblPurchaseVehicleDetailsFinalTOList.Add(tblPurchaseVehicleDetailsTOList[0]);
                                }
                            }
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsFinalTOList;

                        }


                    }

                }
            }
        }

        public void GetSameProdItemsCombinedListForReportByItemName(List<TblPurchaseScheduleSummaryTO> filterList)
        {
            if (filterList != null && filterList.Count > 0)
            {
                for (int i = 0; i < filterList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = filterList[i];
                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                    {
                        List<TblPurchaseVehicleDetailsTO> distinctList = new List<TblPurchaseVehicleDetailsTO>();
                        foreach (var item in tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            item.ItemName = item.ItemName.Trim();
                        }
                        distinctList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.GroupBy(x => new { x.ItemName }).Select(s => s.FirstOrDefault()).ToList();

                        if (distinctList != null && distinctList.Count > 0)
                        {

                            List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsFinalTOList = new List<TblPurchaseVehicleDetailsTO>();
                            for (int k = 0; k < distinctList.Count; k++)
                            {
                                List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                                tblPurchaseVehicleDetailsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.ItemName == distinctList[k].ItemName).ToList();
                                if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                                {
                                    TblPurchaseVehicleDetailsTO TblPurchaseVehicleDetailsTempTO = new TblPurchaseVehicleDetailsTO();
                                    double totalCost = 0;
                                    double totalQty = 0;

                                    double totalRecovery = 0;
                                    double totalMetalCost = 0;

                                    for (int m = 0; m < tblPurchaseVehicleDetailsTOList.Count; m++)
                                    {
                                        if (m == 0)
                                        {
                                            TblPurchaseVehicleDetailsTempTO = tblPurchaseVehicleDetailsTOList[m];

                                            totalCost += tblPurchaseVehicleDetailsTOList[m].TotalCost * tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalQty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalRecovery += tblPurchaseVehicleDetailsTOList[m].Recovery * tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalMetalCost += tblPurchaseVehicleDetailsTOList[m].MetalCost * tblPurchaseVehicleDetailsTOList[m].Qty;

                                        }
                                        else
                                        {
                                            TblPurchaseVehicleDetailsTempTO.Qty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalQty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalRecovery += tblPurchaseVehicleDetailsTOList[m].Recovery * tblPurchaseVehicleDetailsTOList[m].Qty;

                                            totalMetalCost += tblPurchaseVehicleDetailsTOList[m].MetalCost * tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalCost += tblPurchaseVehicleDetailsTOList[m].TotalCost * tblPurchaseVehicleDetailsTOList[m].Qty;

                                            TblPurchaseVehicleDetailsTempTO.Qty = Math.Round(TblPurchaseVehicleDetailsTempTO.Qty, 3);
                                            TblPurchaseVehicleDetailsTempTO.ProductAomunt += tblPurchaseVehicleDetailsTOList[m].ProductAomunt;

                                        }
                                    }
                                    TblPurchaseVehicleDetailsTempTO.Recovery = totalRecovery / totalQty;
                                    TblPurchaseVehicleDetailsTempTO.Recovery = Math.Round(TblPurchaseVehicleDetailsTempTO.Recovery, 3);

                                    TblPurchaseVehicleDetailsTempTO.MetalCost = totalMetalCost / totalQty;
                                    TblPurchaseVehicleDetailsTempTO.MetalCost = Math.Round(TblPurchaseVehicleDetailsTempTO.MetalCost, 3);

                                    TblPurchaseVehicleDetailsTempTO.TotalCost = totalCost / totalQty;
                                    TblPurchaseVehicleDetailsTempTO.TotalCost = Math.Round(TblPurchaseVehicleDetailsTempTO.TotalCost, 3);

                                    tblPurchaseVehicleDetailsFinalTOList.Add(tblPurchaseVehicleDetailsTOList[0]);
                                }
                            }
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsFinalTOList;

                        }


                    }

                }
            }
        }

        public void GetUnloadingPadtaDtlsForVehSche(List<TblPurchaseScheduleSummaryTO> scheduleList)
        {
            if (scheduleList != null && scheduleList.Count > 0)
            {

                for (int i = 0; i < scheduleList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO correctionSummaryTO = scheduleList[i];
                    List<TblPurchaseScheduleSummaryTO> alreadyExitsScheduleList = SelectVehicleScheduleByRootAndStatusId(correctionSummaryTO.ActualRootScheduleId, (Int32)Constants.TranStatusE.UNLOADING_COMPLETED, (Int32)Constants.PurchaseVehiclePhasesE.CORRECTION_BASE_METAL_COMPARE_DTLS);
                    if (alreadyExitsScheduleList != null && alreadyExitsScheduleList.Count > 0)
                    {
                        alreadyExitsScheduleList = alreadyExitsScheduleList.Where(a => a.COrNcId == correctionSummaryTO.COrNcId).ToList();
                        for (int j = 0; j < alreadyExitsScheduleList.Count; j++)
                        {
                            List<TblPurchaseScheduleSummaryTO> tempScheduleList = new List<TblPurchaseScheduleSummaryTO>();
                            tempScheduleList.Add(alreadyExitsScheduleList[j]);
                            Boolean isGetGradeExpDtls = false;
                            _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tempScheduleList, isGetGradeExpDtls);

                            GetSameProdItemsCombinedListForReportByItemName(tempScheduleList);
                            TblPurchaseScheduleSummaryTO correctionCompareTO = tempScheduleList[0];

                            if (correctionSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            {
                                correctionSummaryTO.CalculatedMetalCost = correctionCompareTO.CalculatedMetalCost;
                                correctionSummaryTO.BaseMetalCost = correctionCompareTO.BaseMetalCost;
                                correctionSummaryTO.Padta = correctionCompareTO.Padta;
                            }
                            else if (correctionSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                            {
                                correctionSummaryTO.CalculatedMetalCostForNC = correctionCompareTO.CalculatedMetalCostForNC;
                                correctionSummaryTO.BaseMetalCostForNC = correctionCompareTO.BaseMetalCostForNC;
                                correctionSummaryTO.PadtaForNC = correctionCompareTO.PadtaForNC;
                            }


                            if (correctionCompareTO.PurchaseScheduleSummaryDetailsTOList != null && correctionCompareTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                            {
                                if (correctionSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && correctionSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                                {
                                    for (int k = 0; k < correctionSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; k++)
                                    {

                                        var res = correctionCompareTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.ProdItemId == correctionSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].ProdItemId).FirstOrDefault();
                                        if (res != null)
                                        {
                                            //correctionSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].MetalCost = res.MetalCost;
                                            correctionSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].TotalCost = res.TotalCost;
                                            correctionSummaryTO.PurchaseScheduleSummaryDetailsTOList[k].TotalProduct = res.TotalProduct;
                                        }

                                    }
                                }
                            }
                        }

                    }
                }
            }
        }


        public void GetSameProdItemsCombinedListForReport(List<TblPurchaseScheduleSummaryTO> filterList)
        {
            if (filterList != null && filterList.Count > 0)
            {
                for (int i = 0; i < filterList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = filterList[i];
                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                    {
                        List<TblPurchaseVehicleDetailsTO> distinctList = new List<TblPurchaseVehicleDetailsTO>();
                        distinctList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.GroupBy(x => new { x.ProdItemId }).Select(s => s.FirstOrDefault()).ToList();

                        if (distinctList != null && distinctList.Count > 0)
                        {

                            List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsFinalTOList = new List<TblPurchaseVehicleDetailsTO>();
                            for (int k = 0; k < distinctList.Count; k++)
                            {
                                List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                                tblPurchaseVehicleDetailsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.ProdItemId == distinctList[k].ProdItemId).ToList();
                                if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                                {
                                    TblPurchaseVehicleDetailsTO TblPurchaseVehicleDetailsTempTO = new TblPurchaseVehicleDetailsTO();
                                    double totalCostAndQty = 0;
                                    double totalQty = 0;

                                    double totalRecovery = 0;
                                    double totalMetalCost = 0;

                                    for (int m = 0; m < tblPurchaseVehicleDetailsTOList.Count; m++)
                                    {
                                        //Prajakta[2019-04-02] Commented
                                        // if (tblPurchaseVehicleDetailsTOList.Count > 1)
                                        // {
                                        //     totalCostAndQty += tblPurchaseVehicleDetailsTOList[m].TotalCost * tblPurchaseVehicleDetailsTOList[m].Qty;
                                        //     totalQty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                        //     totalRecovery += tblPurchaseVehicleDetailsTOList[m].Recovery * tblPurchaseVehicleDetailsTOList[m].Qty;
                                        //     totalMetalCost += tblPurchaseVehicleDetailsTOList[m].MetalCost * tblPurchaseVehicleDetailsTOList[m].Qty;
                                        // }
                                        if (m == 0)
                                        {
                                            TblPurchaseVehicleDetailsTempTO = tblPurchaseVehicleDetailsTOList[m];

                                            //totalCostAndQty += tblPurchaseVehicleDetailsTOList[m].TotalCost * tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalQty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalRecovery += tblPurchaseVehicleDetailsTOList[m].Recovery * tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalMetalCost += tblPurchaseVehicleDetailsTOList[m].MetalCost * tblPurchaseVehicleDetailsTOList[m].Qty;

                                        }
                                        else
                                        {
                                            // TblPurchaseVehicleDetailsTempTO.Recovery = tblPurchaseVehicleDetailsTOList.Average(x => x.Recovery);
                                            //TblPurchaseVehicleDetailsTempTO.Qty = tblPurchaseVehicleDetailsTOList.Sum(x => x.Qty);
                                            TblPurchaseVehicleDetailsTempTO.Qty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                            totalQty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                            //TblPurchaseVehicleDetailsTempTO.Recovery += tblPurchaseVehicleDetailsTOList[m].Recovery;
                                            totalRecovery += tblPurchaseVehicleDetailsTOList[m].Recovery * tblPurchaseVehicleDetailsTOList[m].Qty;

                                            //TblPurchaseVehicleDetailsTempTO.MetalCost += tblPurchaseVehicleDetailsTOList[m].MetalCost;
                                            totalMetalCost += tblPurchaseVehicleDetailsTOList[m].MetalCost * tblPurchaseVehicleDetailsTOList[m].Qty;

                                            TblPurchaseVehicleDetailsTempTO.Qty = Math.Round(TblPurchaseVehicleDetailsTempTO.Qty, 3);
                                            TblPurchaseVehicleDetailsTempTO.ProductAomunt += tblPurchaseVehicleDetailsTOList[m].ProductAomunt;
                                            // totalCostAndQty += tblPurchaseVehicleDetailsTOList[m].TotalCost * tblPurchaseVehicleDetailsTOList[m].Qty;
                                            // totalQty += tblPurchaseVehicleDetailsTOList[m].Qty;
                                        }
                                    }
                                    //TblPurchaseVehicleDetailsTempTO.Recovery = (TblPurchaseVehicleDetailsTempTO.Recovery) / tblPurchaseVehicleDetailsTOList.Count();
                                    TblPurchaseVehicleDetailsTempTO.Recovery = totalRecovery / totalQty;
                                    TblPurchaseVehicleDetailsTempTO.Recovery = Math.Round(TblPurchaseVehicleDetailsTempTO.Recovery, 3);

                                    //TblPurchaseVehicleDetailsTempTO.MetalCost = (TblPurchaseVehicleDetailsTempTO.MetalCost) / tblPurchaseVehicleDetailsTOList.Count();
                                    TblPurchaseVehicleDetailsTempTO.MetalCost = totalMetalCost / totalQty;
                                    TblPurchaseVehicleDetailsTempTO.MetalCost = Math.Round(TblPurchaseVehicleDetailsTempTO.MetalCost, 3);

                                    // if (totalCostAndQty > 0 && totalQty > 0)
                                    // {
                                    //     TblPurchaseVehicleDetailsTempTO.TotalCost = totalCostAndQty / totalQty;
                                    // }
                                    tblPurchaseVehicleDetailsFinalTOList.Add(tblPurchaseVehicleDetailsTOList[0]);
                                }
                            }
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsFinalTOList;

                        }


                    }

                }
            }
        }



        public List<TblPurchaseScheduleSummaryTO> GetAllScheduleDetailsByPhaseForAllVehicle(int purchaseEnquiryId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryDtlsByEnquiryId(purchaseEnquiryId);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOTempList = new List<TblPurchaseScheduleSummaryTO>();
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTONewList = new List<TblPurchaseScheduleSummaryTO>();

            Boolean isGetGradeExpDtls = false;

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                    if (tblPurchaseScheduleSummaryTO.VehiclePhaseId > 0)
                    {
                        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                        tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                        if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                        {
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                        }


                    }
                    else if (tblPurchaseScheduleSummaryTO.RootScheduleId == 0)
                    {
                        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                        tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                        if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                        {
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                        }
                    }
                    tblPurchaseScheduleSummaryTOTempList.Add(tblPurchaseScheduleSummaryTO);
                }

                if (tblPurchaseScheduleSummaryTOTempList != null && tblPurchaseScheduleSummaryTOTempList.Count > 0)
                {


                    for (int p = 0; p < tblPurchaseScheduleSummaryTOTempList.Count; p++)
                    {
                        if (tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        {
                            for (int q = 0; q < tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList.Count; q++)
                            {
                                if (tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList[q].IsNonCommercialItem == 1)
                                {
                                    tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList[q].Rate = 0;
                                }
                            }
                        }
                    }

                    List<TblPurchaseScheduleSummaryTO> filterList = new List<TblPurchaseScheduleSummaryTO>();
                    List<TblPurchaseScheduleSummaryTO> NewfilterList = new List<TblPurchaseScheduleSummaryTO>();
                    TblPurchaseScheduleSummaryTO NewfilterTo = new TblPurchaseScheduleSummaryTO();

                    //order details
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    NewfilterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.RootScheduleId == 0).ToList();
                    if (filterList.Count > 0)
                    {
                        NewfilterTo = filterList[0];
                        for (int m = 1; m < filterList.Count; m++)
                        {
                            for (int k = 0; k < filterList[m].PurchaseScheduleSummaryDetailsTOList.Count; k++)
                            {
                                NewfilterTo.PurchaseScheduleSummaryDetailsTOList.Add(filterList[m].PurchaseScheduleSummaryDetailsTOList[k]);

                            }
                        }

                        filterList[0].PurchaseScheduleSummaryDetailsTOList = NewfilterTo.PurchaseScheduleSummaryDetailsTOList;
                        NewfilterList.Add(filterList[0]);
                    }

                    if (NewfilterList != null && NewfilterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(NewfilterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(NewfilterList);
                    }


                    //outside inspection
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    NewfilterList = new List<TblPurchaseScheduleSummaryTO>();

                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION)).ToList();
                    if (filterList.Count > 0)
                    {
                        NewfilterTo = filterList[0];
                        for (int m = 1; m < filterList.Count; m++)
                        {
                            for (int k = 0; k < filterList[m].PurchaseScheduleSummaryDetailsTOList.Count; k++)
                            {
                                NewfilterTo.PurchaseScheduleSummaryDetailsTOList.Add(filterList[m].PurchaseScheduleSummaryDetailsTOList[k]);
                            }
                        }

                        filterList[0].PurchaseScheduleSummaryDetailsTOList = NewfilterTo.PurchaseScheduleSummaryDetailsTOList;
                        NewfilterList.Add(filterList[0]);
                    }

                    if (NewfilterList != null && NewfilterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(NewfilterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(NewfilterList);
                    }

                    //unloading
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    NewfilterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)).ToList();
                    if (filterList.Count > 0)
                    {
                        NewfilterTo = filterList[0];
                        for (int m = 1; m < filterList.Count; m++)
                        {
                            for (int k = 0; k < filterList[m].PurchaseScheduleSummaryDetailsTOList.Count; k++)
                            {
                                NewfilterTo.PurchaseScheduleSummaryDetailsTOList.Add(filterList[m].PurchaseScheduleSummaryDetailsTOList[k]);

                            }
                        }

                        filterList[0].PurchaseScheduleSummaryDetailsTOList = NewfilterTo.PurchaseScheduleSummaryDetailsTOList;
                        NewfilterList.Add(filterList[0]);
                    }

                    if (NewfilterList != null && NewfilterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(NewfilterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(NewfilterList);
                    }


                    //grading
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    NewfilterList = new List<TblPurchaseScheduleSummaryTO>();

                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).ToList();

                    if (filterList.Count > 0)
                    {
                        NewfilterTo = filterList[0];
                        for (int m = 1; m < filterList.Count; m++)
                        {
                            for (int k = 0; k < filterList[m].PurchaseScheduleSummaryDetailsTOList.Count; k++)
                            {
                                NewfilterTo.PurchaseScheduleSummaryDetailsTOList.Add(filterList[m].PurchaseScheduleSummaryDetailsTOList[k]);

                            }
                        }

                        filterList[0].PurchaseScheduleSummaryDetailsTOList = NewfilterTo.PurchaseScheduleSummaryDetailsTOList;
                        NewfilterList.Add(filterList[0]);
                    }


                    if (NewfilterList != null && NewfilterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(NewfilterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(NewfilterList);
                    }


                    //recover
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    NewfilterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.RECOVERY)).ToList();
                    if (filterList.Count > 0)
                    {
                        NewfilterTo = filterList[0];
                        for (int m = 1; m < filterList.Count; m++)
                        {
                            for (int k = 0; k < filterList[m].PurchaseScheduleSummaryDetailsTOList.Count; k++)
                            {
                                NewfilterTo.PurchaseScheduleSummaryDetailsTOList.Add(filterList[m].PurchaseScheduleSummaryDetailsTOList[k]);

                            }
                        }

                        filterList[0].PurchaseScheduleSummaryDetailsTOList = NewfilterTo.PurchaseScheduleSummaryDetailsTOList;
                        NewfilterList.Add(filterList[0]);
                    }

                    if (NewfilterList != null && NewfilterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(NewfilterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(NewfilterList);
                    }


                    //correction
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    NewfilterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.CORRECTIONS)).ToList();
                    if (filterList.Count > 0)
                    {
                        NewfilterTo = filterList[0];
                        for (int m = 1; m < filterList.Count; m++)
                        {
                            for (int k = 0; k < filterList[m].PurchaseScheduleSummaryDetailsTOList.Count; k++)
                            {
                                NewfilterTo.PurchaseScheduleSummaryDetailsTOList.Add(filterList[m].PurchaseScheduleSummaryDetailsTOList[k]);

                            }
                        }

                        filterList[0].PurchaseScheduleSummaryDetailsTOList = NewfilterTo.PurchaseScheduleSummaryDetailsTOList;
                        NewfilterList.Add(filterList[0]);
                    }

                    if (NewfilterList != null && NewfilterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(NewfilterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(NewfilterList);
                    }

                }
            }

            return tblPurchaseScheduleSummaryTONewList;
        }


        public List<TblPurchaseScheduleSummaryTO> GetAllScheduleDetailsByPhase(int purchaseEnquiryId)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryDtlsByEnquiryId(purchaseEnquiryId);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOTempList = new List<TblPurchaseScheduleSummaryTO>();
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTONewList = new List<TblPurchaseScheduleSummaryTO>();
            Boolean isGetGradeExpDtls = false;
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                    if (tblPurchaseScheduleSummaryTO.VehiclePhaseId > 0)
                    {
                        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                        tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                        if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                        {
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                        }

                        tblPurchaseScheduleSummaryTOTempList.Add(tblPurchaseScheduleSummaryTO);
                    }
                }

                if (tblPurchaseScheduleSummaryTOTempList != null && tblPurchaseScheduleSummaryTOTempList.Count > 0)
                {
                    List<TblPurchaseScheduleSummaryTO> filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION)).ToList();
                    if (filterList != null && filterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(filterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).ToList();
                    if (filterList != null && filterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(filterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.RECOVERY)).ToList();
                    if (filterList != null && filterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(filterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.CORRECTIONS)).ToList();
                    if (filterList != null && filterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(filterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)).ToList();
                    if (filterList != null && filterList.Count > 0)
                    {
                        GetSameProdItemsCombinedList(filterList, true);
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }

                    AsignSeqNoForScheduleItemDts(tblPurchaseScheduleSummaryTOTempList);
                }
            }
            return tblPurchaseScheduleSummaryTOTempList;
        }


        public void AsignSeqNoForScheduleItemDts(List<TblPurchaseScheduleSummaryTO> scheduleTOList)
        {

            Int32 maxSeqNo = 0;
            Dictionary<Int32, List<Int32>> seqNoDct = new Dictionary<int, List<int>>();

            for (int i = 0; i < scheduleTOList.Count; i++)
            {

                Dictionary<Int32, List<Int32>> usedSeqNoDct = new Dictionary<int, List<int>>();

                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = scheduleTOList[i];
                if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                {
                    for (int j = 0; j < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; j++)
                    {
                        TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[j];

                        Int32 itemId = tblPurchaseVehicleDetailsTO.ProdItemId;

                        if (seqNoDct.ContainsKey(itemId))
                        {
                            List<Int32> tempSeqNoList = seqNoDct[itemId];

                            Int32 isSeqNoAssing = 0;

                            for (int k = 0; k < tempSeqNoList.Count; k++)
                            {
                                Int32 availableNo = tempSeqNoList[k];
                                if (usedSeqNoDct.ContainsKey(itemId))
                                {
                                    List<Int32> usedNoList = usedSeqNoDct[itemId];

                                    Int32 isNoExist = usedNoList.Where(w => w == availableNo).FirstOrDefault();

                                    if (isNoExist > 0)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        //List<Int32> a = new List<int>();
                                        usedNoList.Add(availableNo);
                                        usedSeqNoDct[itemId] = usedNoList;
                                        tblPurchaseVehicleDetailsTO.GroupBySeqNo = availableNo;
                                        isSeqNoAssing = 1;
                                        break;
                                    }

                                }
                                else
                                {
                                    List<Int32> a = new List<int>();
                                    a.Add(availableNo);
                                    usedSeqNoDct.Add(itemId, a);
                                    tblPurchaseVehicleDetailsTO.GroupBySeqNo = availableNo;
                                    isSeqNoAssing = 1;
                                    break;
                                }
                            }

                            if (isSeqNoAssing == 0)
                            {
                                maxSeqNo++;
                                tempSeqNoList.Add(maxSeqNo);
                                seqNoDct[itemId] = tempSeqNoList;

                                List<Int32> ab = usedSeqNoDct[itemId];
                                ab.Add(maxSeqNo);
                                usedSeqNoDct[itemId] = ab;

                                tblPurchaseVehicleDetailsTO.GroupBySeqNo = maxSeqNo;
                            }
                        }
                        else
                        {
                            List<Int32> tempSeqList = new List<int>();
                            maxSeqNo++;
                            tempSeqList.Add(maxSeqNo);
                            seqNoDct.Add(itemId, tempSeqList);
                            tblPurchaseVehicleDetailsTO.GroupBySeqNo = maxSeqNo;
                        }

                    }
                }
            }

        }

        public ResultMessage UpdateApprovedWeighingDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, int loginUserId)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            ResultMessage Result = new ResultMessage();
            List<TblPurchaseScheduleStatusHistoryTO> HistoryTOListOld = new List<TblPurchaseScheduleStatusHistoryTO>();
            TblPurchaseScheduleStatusHistoryTO HistoryTOOld = new TblPurchaseScheduleStatusHistoryTO();

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();
                Result.Result = 0;
                int PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.RootScheduleId > 0 ? tblPurchaseScheduleSummaryTO.RootScheduleId : tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;

                Boolean isGetAllWeighingStage = true;

                List<TblPurchaseWeighingStageSummaryTO> WeighingDtlList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(PurchaseScheduleSummaryId, ((Int32)Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran, isGetAllWeighingStage);
                TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryTO = new TblPurchaseWeighingStageSummaryTO();
                if (WeighingDtlList != null && WeighingDtlList.Count > 0)
                {
                    foreach (var WeighingTO in WeighingDtlList)
                    {
                        if (WeighingTO.IsValid == 1)
                        {
                            tblPurchaseWeighingStageSummaryTO = WeighingTO;
                            break;
                        }
                    }
                    if (tblPurchaseWeighingStageSummaryTO != null)
                    {
                        tblPurchaseWeighingStageSummaryTO.IsValid = 0;
                        Result.Result = _iTblPurchaseWeighingStageSummaryDAO.updateIsValidFlagToInvalid(tblPurchaseWeighingStageSummaryTO, conn, tran);
                    }
                    if (Result.Result == 0)
                    {
                        tran.Rollback();
                        Result.MessageType = ResultMessageE.Error;
                        Result.Text = "Record could not be saved";
                        Result.DisplayMessage = "Record could not be saved";
                        return Result;
                    }
                    HistoryTOListOld = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(PurchaseScheduleSummaryId, false, true, (int)Constants.TranStatusE.UNLOADING_IS_IN_PROCESS, conn, tran);
                    foreach (var item in HistoryTOListOld)
                    {
                        item.IsApproved = tblPurchaseScheduleSummaryTO.IsApproved;
                        item.IsActive = 0;
                        item.IsLatest = 0;
                        item.UpdatedBy = loginUserId;
                        item.UpdatedOn = _iCommonDAO.ServerDateTime;
                        Result.Result = _iTblPurchaseScheduleStatusHistoryBL.UpdateTblPurchaseScheduleStatusHistory(item, conn, tran);
                    }
                    if (Result.Result <= 0)
                    {
                        tran.Rollback();
                        Result.MessageType = ResultMessageE.Error;
                        Result.Text = "Record could not be saved";
                        Result.DisplayMessage = "Record could not be saved";
                        return Result;
                    }



                    if (tblPurchaseScheduleSummaryTO.IsApproved == 1)
                    {
                        TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                        List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                        Int32 conversionFact = 1000;
                        //get purchase manager of supplier
                        tblAlertUsersTOList = new List<TblAlertUsersTO>();
                        string sourceEntityId = null;

                        if (sourceEntityId == null)
                        {

                            if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                            {
                                sourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId.ToString();
                            }
                            else
                            {
                                sourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary.ToString();
                            }
                        }
                        List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                        _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL, sourceEntityId);

                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_APPROVED;
                        tblAlertInstanceTO.AlertAction = "Vehicle Schedule Approved";
                        tblAlertInstanceTO.AlertComment = "Vehicle no: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is approved for further weighing process";
                        tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = _iCommonDAO.ServerDateTime;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceDisplayId = "VEHICLE_SCHEDULE_APPROVED";
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                        {
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        }
                        else
                        {
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        }
                        tblAlertInstanceTO.RaisedBy = tblPurchaseWeighingStageSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = _iCommonDAO.ServerDateTime;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        //Reset Prev alert of Vehicle pending approval
                        AlertsToReset alertsToReset = new AlertsToReset();
                        alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                        ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                        resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL;
                        resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                        tblAlertInstanceTO.AlertsToReset = alertsToReset;


                        notification.SendNotificationToUsers(tblAlertInstanceTO);

                    }




                    tran.Commit();
                    Result.MessageType = ResultMessageE.Information;
                    Result.Text = "Weighing stage approved successfully";
                    Result.DisplayMessage = "Weighing stage approved successfully";
                    return Result;
                }
                else
                {
                    tran.Rollback();
                    Result.MessageType = ResultMessageE.Error;
                    Result.Text = "Record could not be saved";
                    Result.DisplayMessage = "Record could not be saved";
                    return Result;
                }
                return Result;
            }
            catch (Exception e)
            {
                return Result;
            }
            finally
            {
                conn.Close();
            }

        }


        //public static void AsignSeqNoForScheduleItemDts(List<TblPurchaseScheduleSummaryTO> scheduleTOList)
        //{

        //    Int32 count = 0;

        //    List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsTOList=new List<TblPurchaseVehicleDetailsTO>();
        //    Dictionary<String, Int32> itemSeqNoDCT = new Dictionary<String, Int32>();

        //    if(scheduleTOList!=null && scheduleTOList.Count>0)
        //    {
        //        for (int i = 0; i < scheduleTOList.Count; i++)
        //        {
        //            if(scheduleTOList[i].PurchaseScheduleSummaryDetailsTOList!=null && scheduleTOList[i].PurchaseScheduleSummaryDetailsTOList.Count>0)
        //            {
        //                scheduleItemDtlsTOList.AddRange(scheduleTOList[i].PurchaseScheduleSummaryDetailsTOList);
        //            }
        //        }
        //    }

        //    if(scheduleItemDtlsTOList!=null && scheduleItemDtlsTOList.Count>0)
        //    {
        //        for (int k = 0; k < scheduleItemDtlsTOList.Count; k++)
        //        {
        //            TblPurchaseVehicleDetailsTO scheduleItemDtlsTO=scheduleItemDtlsTOList[k];

        //            string uniqueKey=scheduleItemDtlsTO.ProdItemId + "***" + scheduleItemDtlsTO.Recovery + "***" ;

        //            if(itemSeqNoDCT.ContainsKey(uniqueKey))
        //            {
        //                scheduleItemDtlsTO.GroupBySeqNo=itemSeqNoDCT[uniqueKey];
        //            }
        //            else
        //            {
        //                count++; 
        //                itemSeqNoDCT.Add(uniqueKey,count);
        //                scheduleItemDtlsTO.GroupBySeqNo=count;

        //            }
        //        }
        //    }
        //}

        // public static void AsignSeqNoForScheduleItemDts(List<TblPurchaseScheduleSummaryTO> scheduleTOList)
        // {

        //     if (scheduleTOList != null && scheduleTOList.Count > 0)
        //     {
        //         for (int i = 0; i < scheduleTOList.Count; i++)
        //         {
        //             if (scheduleTOList[i].PurchaseScheduleSummaryDetailsTOList != null && scheduleTOList[i].PurchaseScheduleSummaryDetailsTOList.Count > 0)
        //             {
        //                 scheduleItemDtlsTOList.AddRange(scheduleTOList[i].PurchaseScheduleSummaryDetailsTOList);
        //             }
        //         }
        //     }

        //     if (scheduleItemDtlsTOList != null && scheduleItemDtlsTOList.Count > 0)
        //     {
        //         distinctList = scheduleItemDtlsTOList.GroupBy(x => new { x.ProdItemId }).Select(s => s.FirstOrDefault()).ToList();

        //         Int32 maxNo = 0;
        //         if (distinctList != null && distinctList.Count > 0)
        //         {
        //             for (int q = 0; q < distinctList.Count; q++)
        //             {

        //                 List<TblPurchaseVehicleDetailsTO> gruopByScheduleItemDtlsList = scheduleItemDtlsTOList.Where(a => a.ProdItemId == distinctList[q].ProdItemId).ToList();
        //                 if (gruopByScheduleItemDtlsList != null && gruopByScheduleItemDtlsList.Count > 0)
        //                 {
        //                     for (int k = 0; k < gruopByScheduleItemDtlsList.Count; k++)
        //                     {
        //                         TblPurchaseVehicleDetailsTO scheduleItemDtlsTO = gruopByScheduleItemDtlsList[k];

        //                         if (tempList != null && tempList.Count > 0)
        //                         {
        //                             var res = tempList.Where(a => a.ProdItemId == scheduleItemDtlsTO.ProdItemId).ToList();
        //                             if (res != null && res.Count > 0)
        //                             {
        //                                 Boolean isItemExits = false;
        //                                 for (int m = 0; m < res.Count; m++)
        //                                 {
        //                                     if (res[m].Recovery == scheduleItemDtlsTO.Recovery)
        //                                     {
        //                                         TblPurchaseVehicleDetailsTO tempTO = scheduleItemDtlsTO;
        //                                         // tempTO.ItemSrNo = res[m].ItemSrNo + 1;
        //                                         var maxObject = tempList.OrderByDescending(item => item.ItemSrNo).First();
        //                                         tempTO.GroupBySeqNo = res[m].GroupBySeqNo;
        //                                         tempTO.ItemSrNo = maxObject.ItemSrNo + 1;
        //                                         tempList.Add(tempTO);
        //                                         isItemExits = true;
        //                                         break;

        //                                     }

        //                                 }

        //                                 if (!isItemExits)
        //                                 {
        //                                     // Int32 maxSrNoItem = tempList.Max(p => p.ItemSrNo);
        //                                     var maxObject = tempList.OrderByDescending(item => item.ItemSrNo).First();

        //                                     List<TblPurchaseVehicleDetailsTO> dinctRecovery = tempList.GroupBy(x => new { x.Recovery }).Select(s => s.FirstOrDefault()).ToList();
        //                                     if (dinctRecovery != null && dinctRecovery.Count == 1)
        //                                     {
        //                                         TblPurchaseVehicleDetailsTO tempTO = scheduleItemDtlsTO;
        //                                         tempTO.ItemSrNo = maxObject.ItemSrNo + 1;
        //                                         tempTO.GroupBySeqNo = maxObject.GroupBySeqNo;
        //                                         tempList.Add(tempTO);
        //                                     }
        //                                     else
        //                                     {
        //                                         TblPurchaseVehicleDetailsTO tempTO = scheduleItemDtlsTO;
        //                                         tempTO.ItemSrNo = maxObject.ItemSrNo + 1;
        //                                         tempTO.GroupBySeqNo = maxObject.GroupBySeqNo + 1;
        //                                         tempList.Add(tempTO);
        //                                     }



        //                                 }
        //                             }
        //                         }
        //                         else
        //                         {
        //                             TblPurchaseVehicleDetailsTO tempTO = scheduleItemDtlsTO;
        //                             tempTO.ItemSrNo = 1;
        //                             tempTO.GroupBySeqNo = maxNo + 1;
        //                             tempList.Add(tempTO);
        //                         }

        //                     }
        //                     var maxObject1 = tempList.OrderByDescending(item => item.ItemSrNo).First();
        //                     maxNo = maxObject1.GroupBySeqNo;
        //                     tempList = new List<TblPurchaseVehicleDetailsTO>();



        public List<TblPurchaseScheduleSummaryTO> GetAllScheduleDetailsByPhaseAndVehicleID(int IdPurchaseScheduleSummary)
        {

            TblPurchaseInvoiceTO PurchaseInvoiceTO = new TblPurchaseInvoiceTO();
            Boolean isImpuritiesAdded = false;
            double totalImpurities = 0;
            string impuritiesStr = String.Empty;
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryTOByRootId(IdPurchaseScheduleSummary);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOTempList = new List<TblPurchaseScheduleSummaryTO>();
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTONewList = new List<TblPurchaseScheduleSummaryTO>();
            TblPurchaseVehicleSpotEntryTO spotEntryTO = new TblPurchaseVehicleSpotEntryTO();
            spotEntryTO = _iTblPurchaseVehicleSpotEntryBL.SelectTblPurchaseVehicleSpotEntryTOByRootId(IdPurchaseScheduleSummary);
            Boolean isGetGradeExpDtls = false;
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(IdPurchaseScheduleSummary);
                if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                {
                    PurchaseInvoiceTO = InvoiceTOList[0];
                    string configParamName = Constants.CP_SCRAP_OTHER_TAXES_FOR_TCS_IN_GRADE_NOTE;
                    TblConfigParamsTO configParamsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(configParamName);
                    if (configParamsTO != null)
                    {
                        List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOList = _iTblPurchaseInvoiceItemDetailsDAO.SelectAllTblPurchaseInvoiceItemDetails(PurchaseInvoiceTO.IdInvoicePurchase);
                        if (purchaseInvoiceItemDetailsTOList != null && purchaseInvoiceItemDetailsTOList.Count > 0)
                        {
                            PurchaseInvoiceTO.TblPurchaseInvoiceItemDetailsTOList = purchaseInvoiceItemDetailsTOList;
                            List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOListTemp = purchaseInvoiceItemDetailsTOList.Where(w => configParamsTO.ConfigParamVal.Contains(w.OtherTaxId.ToString())).ToList();
                            if (purchaseInvoiceItemDetailsTOListTemp != null && purchaseInvoiceItemDetailsTOListTemp.Count > 0)
                            {
                                foreach (var arr in purchaseInvoiceItemDetailsTOListTemp)
                                {
                                    if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TCS)
                                    {
                                        PurchaseInvoiceTO.TcsAmt = arr.TaxableAmt;
                                    }
                                    if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.OTHER_EXPENCES)
                                    {
                                        PurchaseInvoiceTO.OtherExpAmt = arr.TaxableAmt;
                                    }
                                    if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TRANSPORTER_ADVANCE)
                                    {
                                        PurchaseInvoiceTO.TransportorAdvAmt = arr.TaxableAmt;
                                    }
                                }
                            }
                        }
                    }

                }
                tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.OrderBy(o => o.VehiclePhaseSequanceNo).ToList();

                //Prajakta[2019-04-11] Added
                List<TblPurchaseScheduleSummaryTO> scheduleTOList = new List<TblPurchaseScheduleSummaryTO>();
                //prajakta[2019-11-22] Added IOT condition to get order details for both type vehicle For DB
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    scheduleTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.New && a.RootScheduleId == a.IdPurchaseScheduleSummary).ToList();
                }
                else
                {
                    scheduleTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.New).ToList();
                }

                if (scheduleTOList != null && scheduleTOList.Count > 0)
                {
                    tblPurchaseScheduleSummaryTOTempList.AddRange(scheduleTOList);
                }

                scheduleTOList = new List<TblPurchaseScheduleSummaryTO>();

                scheduleTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.VehiclePhaseId > 0).ToList();
                if (scheduleTOList != null && scheduleTOList.Count > 0)
                {
                    tblPurchaseScheduleSummaryTOTempList.AddRange(scheduleTOList);
                }


                TblConfigParamsTO impuritiesConfigParamName = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.CP_SCRAP_DEFAULT_IMPURITIES_STR);
                if (impuritiesConfigParamName != null && !String.IsNullOrEmpty(impuritiesConfigParamName.ConfigParamVal))
                {
                    isImpuritiesAdded = true;
                    impuritiesStr = impuritiesConfigParamName.ConfigParamVal;
                }

                if (tblPurchaseScheduleSummaryTOTempList != null && tblPurchaseScheduleSummaryTOTempList.Count > 0)
                {
                    _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOTempList, isGetGradeExpDtls);

                    for (int q = 0; q < tblPurchaseScheduleSummaryTOTempList.Count; q++)
                    {
                        TblPurchaseScheduleSummaryTO tempScheduleTO = tblPurchaseScheduleSummaryTOTempList[q];
                        if (tempScheduleTO.PurchaseScheduleSummaryDetailsTOList != null && tempScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        {
                            tempScheduleTO.PurchaseScheduleSummaryDetailsTOList = tempScheduleTO.PurchaseScheduleSummaryDetailsTOList.OrderBy(a => a.DisplaySequanceNo).ThenBy(a => a.Recovery).ToList();
                        }
                        tempScheduleTO.TblPurchaseInvoiceTO = PurchaseInvoiceTO;
                    }
                }


                //Prajakta[2019-04-11] Commented
                // for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                // {
                //     TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                //     if (tblPurchaseScheduleSummaryTO.VehiclePhaseId > 0)
                //     {
                //         List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                //         tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                //         if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                //         {
                //             tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                //         }

                //         tblPurchaseScheduleSummaryTO.TblPurchaseInvoiceTO = PurchaseInvoiceTO;

                //         tblPurchaseScheduleSummaryTOTempList.Add(tblPurchaseScheduleSummaryTO);
                //     }
                //     else
                //     {
                //         if (tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.New)
                //         {
                //             List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                //             tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                //             if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                //             {
                //                 tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                //             }
                //             tblPurchaseScheduleSummaryTO.TblPurchaseInvoiceTO = PurchaseInvoiceTO;

                //             tblPurchaseScheduleSummaryTOTempList.Add(tblPurchaseScheduleSummaryTO);

                //         }
                //     }

                // }

                if (tblPurchaseScheduleSummaryTOTempList != null && tblPurchaseScheduleSummaryTOTempList.Count > 0)
                {

                    // for (int p = 0; p < tblPurchaseScheduleSummaryTOTempList.Count; p++)
                    // {
                    //     if (tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList.Count > 0)
                    //     {

                    //         tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList = tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList.OrderBy(a => a.DisplaySequanceNo).ThenBy(a => a.Recovery).ToList();

                    //         //Prajakta[2019-03-27] Commented
                    //         // for (int q = 0; q < tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList.Count; q++)
                    //         // {
                    //         //     if (tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList[q].IsNonCommercialItem == 1)
                    //         //     {
                    //         //         tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList[q].Rate = 0;
                    //         //     }

                    //         // }

                    //     }
                    // }

                    //New

                    Int32 rootScheduleId = tblPurchaseScheduleSummaryTOTempList[0].ActualRootScheduleId;

                    if (isImpuritiesAdded)
                    {
                        totalImpurities = GetWeighingStageWiseSumOfImpurities(rootScheduleId, impuritiesStr);
                    }

                    List<TblPurchaseScheduleSummaryTO> filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(0, (Int32)Constants.TranStatusE.New, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                    {

                        //filterList = filterList.OrderBy(a => a.CreatedOn).ToList();
                        //filterList = filterList[0];

                        for (int i = 0; i < filterList.Count; i++)
                        {
                            filterList[i].VehiclePhaseName = "Order Details";
                        }


                        AsignVehiclePhaseForBothVehicle(filterList);
                        filterList = filterList.OrderByDescending(a => a.COrNcId).ToList();
                        if (isImpuritiesAdded)
                        {
                            filterList[0].ImpuritiesStr = impuritiesStr;
                            filterList[0].TotalImpurities = 0;
                        }
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }

                    //OutSide Inspection
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    //filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION), (Int32)Constants.TranStatusE.VEHICLE_REPORTED_FOR_LOADING, tblPurchaseScheduleSummaryTOTempList);
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION), (Int32)Constants.TranStatusE.VEHICLE_PENDING_FOR_YARD_MANAGER, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                    {

                        AsignVehiclePhaseForBothVehicle(filterList);
                        filterList = filterList.OrderByDescending(a => a.COrNcId).ToList();
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }

                    //Unloading Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED), (Int32)Constants.TranStatusE.UNLOADING_COMPLETED, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                    {
                        AsignVehiclePhaseForBothVehicle(filterList);
                        filterList = filterList.OrderByDescending(a => a.COrNcId).ToList();
                        if (isImpuritiesAdded)
                        {
                            filterList[0].ImpuritiesStr = impuritiesStr;
                            filterList[0].TotalImpurities = totalImpurities;
                        }
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }


                    //Grading Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING), (Int32)Constants.TranStatusE.UNLOADING_COMPLETED, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                    {
                        AsignVehiclePhaseForBothVehicle(filterList);
                        filterList = filterList.OrderByDescending(a => a.COrNcId).ToList();
                        if (isImpuritiesAdded)
                        {
                            filterList[0].ImpuritiesStr = impuritiesStr;
                            filterList[0].TotalImpurities = totalImpurities;
                        }
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }

                    //Recovery Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.RECOVERY), (Int32)Constants.TranStatusE.UNLOADING_COMPLETED, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                    {

                        AsignVehiclePhaseForBothVehicle(filterList);
                        filterList = filterList.OrderByDescending(a => a.COrNcId).ToList();
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }


                    //Correction Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.CORRECTIONS), 0, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                    {
                        filterList = filterList.Where(a => a.StatusId != (Int32)Constants.TranStatusE.VEHICLE_OUT).ToList();


                        AsignVehiclePhaseForBothVehicle(filterList);
                        filterList = filterList.OrderByDescending(a => a.COrNcId).ToList();
                        if (isImpuritiesAdded)
                        {
                            filterList[0].ImpuritiesStr = impuritiesStr;
                            filterList[0].TotalImpurities = totalImpurities;
                        }
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    }


                    // filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION) && a.StatusId == (Int32)Constants.TranStatusE.VEHICLE_REPORTED_FOR_LOADING).ToList();
                    // if (filterList != null && filterList.Count > 0)
                    // {
                    //     GetSameProdItemsCombinedList(filterList);
                    //     tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    // }
                    // filterList = new List<TblPurchaseScheduleSummaryTO>();
                    // filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).ToList();
                    // if (filterList != null && filterList.Count > 0)
                    // {
                    //     GetSameProdItemsCombinedList(filterList);
                    //     tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    // }
                    // filterList = new List<TblPurchaseScheduleSummaryTO>();
                    // filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.CORRECTIONS)).ToList();
                    // if (filterList != null && filterList.Count > 0)
                    // {
                    //     GetSameProdItemsCombinedList(filterList);
                    //     tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    // }
                    // filterList = new List<TblPurchaseScheduleSummaryTO>();
                    // filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)).ToList();
                    // if (filterList != null && filterList.Count > 0)
                    // {
                    //     GetSameProdItemsCombinedList(filterList);
                    //     tblPurchaseScheduleSummaryTONewList.AddRange(filterList);
                    // }

                    AsignSeqNoForScheduleItemDts(tblPurchaseScheduleSummaryTONewList);
                    CombineSameVehPhaseIdRecord(tblPurchaseScheduleSummaryTONewList);

                }
            }
            //return tblPurchaseScheduleSummaryTOTempList;

            if (spotEntryTO != null)
            {
                foreach (var item in tblPurchaseScheduleSummaryTONewList)
                {
                    item.PurchaseVehicleSpotEntryTO = spotEntryTO;
                }
            }
            return tblPurchaseScheduleSummaryTONewList;
        }

        public void AsignVehiclePhaseForBothVehicle(List<TblPurchaseScheduleSummaryTO> scheduleTOList)
        {
            if (scheduleTOList != null && scheduleTOList.Count > 0)
            {
                for (int i = 0; i < scheduleTOList.Count; i++)
                {
                    if (scheduleTOList[i].COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                    {
                        if (scheduleTOList[i].IsBoth == 1)
                        {
                            scheduleTOList[i].VehiclePhaseId = 0 - scheduleTOList[i].VehiclePhaseId;
                        }

                        scheduleTOList[i].VehiclePhaseName = scheduleTOList[i].VehiclePhaseName + "- E";
                    }
                    else
                    {
                        scheduleTOList[i].VehiclePhaseName = scheduleTOList[i].VehiclePhaseName + "- O";
                    }

                }
            }
        }

        public List<TblPurchaseScheduleSummaryTO> GetAllScheduleDetailsByPhaseAndVehicleIDForApproval(int IdPurchaseScheduleSummary)
        {
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryTOByRootId(IdPurchaseScheduleSummary);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOTempList = new List<TblPurchaseScheduleSummaryTO>();
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTONewList = new List<TblPurchaseScheduleSummaryTO>();
            Boolean isGetGradeExpDtls = false;
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {

                tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.OrderBy(o => o.VehiclePhaseSequanceNo).ToList();

                for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];
                    if (tblPurchaseScheduleSummaryTO.VehiclePhaseId > 0)
                    {
                        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

                        tblPurchaseVehicleDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                        if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
                        {
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;
                        }

                        tblPurchaseScheduleSummaryTOTempList.Add(tblPurchaseScheduleSummaryTO);
                    }
                }

                if (tblPurchaseScheduleSummaryTOTempList != null && tblPurchaseScheduleSummaryTOTempList.Count > 0)
                {

                    for (int p = 0; p < tblPurchaseScheduleSummaryTOTempList.Count; p++)
                    {
                        if (tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        {
                            for (int q = 0; q < tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList.Count; q++)
                            {
                                if (tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList[q].IsNonCommercialItem == 1)
                                {
                                    tblPurchaseScheduleSummaryTOTempList[p].PurchaseScheduleSummaryDetailsTOList[q].Rate = 0;
                                }
                            }
                        }
                    }

                    //OutSide Inspection
                    List<TblPurchaseScheduleSummaryTO> filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION), 0, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);

                    //Unloading Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED), (Int32)Constants.TranStatusE.UNLOADING_COMPLETED, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);


                    //Grading Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING), 0, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);

                    //Recovery Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.RECOVERY), 0, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);


                    //Correction Completed
                    filterList = new List<TblPurchaseScheduleSummaryTO>();
                    filterList = GetVehPhaseWiseItemsList(Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.CORRECTIONS), 0, tblPurchaseScheduleSummaryTOTempList);
                    if (filterList != null && filterList.Count > 0)
                        tblPurchaseScheduleSummaryTONewList.AddRange(filterList);

                }
            }
            return tblPurchaseScheduleSummaryTONewList;
        }

        public List<TblPurchaseScheduleSummaryTO> GetVehPhaseWiseItemsList(Int32 vehiclePhase, Int32 statusId, List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOTempList)
        {
            List<TblPurchaseScheduleSummaryTO> filterList = new List<TblPurchaseScheduleSummaryTO>();

            if (statusId > 0)
            {
                filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == vehiclePhase && a.StatusId == statusId).ToList();
            }
            else
            {
                filterList = tblPurchaseScheduleSummaryTOTempList.Where(a => a.VehiclePhaseId == vehiclePhase).ToList();
            }

            if (filterList != null && filterList.Count > 0)
            {
                GetSameProdItemsCombinedList(filterList, true);
            }
            return filterList;
        }


        //Prajakta[26 Sept 2018]Added to check grading is completed for all weighing stages
        public Boolean CheckIsVehicleGradingConfirmed(Int32 purchaseScheduleId)
        {
            Boolean isConfirmGradingDtls = true;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectTblPurchaseScheduleSummaryDetails(purchaseScheduleId, false);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count == 1)
            {
                if (tblPurchaseScheduleSummaryTOList[0].StatusId == Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED)
                || tblPurchaseScheduleSummaryTOList[0].StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_OUT))
                {

                    Boolean isPartyWtApplicable = false;

                    List<TblPurchaseVehFreightDtlsTO> tblPurchaseVehFreightDtlsTOList = _iTblPurchaseVehFreightDtlsBL.SelectFreightDtlsByPurchaseScheduleId(tblPurchaseScheduleSummaryTOList[0].ActualRootScheduleId);
                    if (tblPurchaseVehFreightDtlsTOList != null && tblPurchaseVehFreightDtlsTOList.Count > 0)
                    {
                        if (tblPurchaseVehFreightDtlsTOList[0].IsValidInfo == 1)
                        {
                            isPartyWtApplicable = true;
                        }
                    }

                    List<TblPurchaseWeighingStageSummaryTO> weighingDtlsList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseScheduleSummaryTOList[0].ActualRootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString());

                    List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = new List<TblPurchaseWeighingStageSummaryTO>();
                    if (weighingDtlsList != null && weighingDtlsList.Count > 0)
                    {
                        if (isPartyWtApplicable)
                        {
                            tblPurchaseWeighingStageSummaryTOList.Add(weighingDtlsList[0]);
                        }
                        else
                        {
                            tblPurchaseWeighingStageSummaryTOList.AddRange(weighingDtlsList);
                        }

                    }

                    if (tblPurchaseWeighingStageSummaryTOList != null && tblPurchaseWeighingStageSummaryTOList.Count > 0)
                    {
                        for (int k = 0; k < tblPurchaseWeighingStageSummaryTOList.Count; k++)
                        {
                            TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryLocalTO = tblPurchaseWeighingStageSummaryTOList[k];
                            //Check if weighing stage has unloading confirmed details
                            List<TblPurchaseUnloadingDtlTO> tblPurchaseUnloadingDtlTOList = _iTblPurchaseUnloadingDtlBL.SelectAllTblPurchaseUnloadingDtlList(tblPurchaseWeighingStageSummaryLocalTO.IdPurchaseWeighingStage);
                            if (tblPurchaseUnloadingDtlTOList != null && tblPurchaseUnloadingDtlTOList.Count > 0)
                            {
                                tblPurchaseUnloadingDtlTOList = tblPurchaseUnloadingDtlTOList.Where(a => a.IsConfirmUnloading == 1).ToList();
                                if (tblPurchaseUnloadingDtlTOList != null && tblPurchaseUnloadingDtlTOList.Count > 0)
                                {
                                    List<TblPurchaseGradingDtlsTO> tblPurchaseGradingDtlsTOList = _iTblPurchaseGradingDtlsBL.SelectTblPurchaseGradingDtlsTOListByWeighingId(tblPurchaseWeighingStageSummaryLocalTO.IdPurchaseWeighingStage);
                                    if (tblPurchaseGradingDtlsTOList != null && tblPurchaseGradingDtlsTOList.Count > 0)
                                    {
                                        for (int i = 0; i < tblPurchaseGradingDtlsTOList.Count; i++)
                                        {
                                            if (tblPurchaseGradingDtlsTOList[i].IsConfirmGrading == 1)
                                                isConfirmGradingDtls = true;
                                            else
                                            {
                                                isConfirmGradingDtls = false;
                                                return false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        return false;
                                    }
                                }
                                else
                                    return false;

                            }
                            else
                                return false;

                        }
                    }
                    else
                        return false;
                }
                else
                    return false;

            }
            else
                return false;

            if (isConfirmGradingDtls)
                return true;
            else
                return false;


        }

        //Priyanka [28-04-2019] Added to get the purchase schedule summary list
        public List<TblPurchaseScheduleSummaryTO> GetAllPurchaseScheduleSummaryForCommerAppr(Int32 approvalType, Int32 idPurchaseScheduleSummary)
        {
            int MaterialTypeId = 0;
            if (approvalType == 1 || approvalType == 2)
            {
                TblConfigParamsTO tblConfigParamsTOMaterial = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_CONFIG_SETTING_FOR_CONTAINER_AND_LOTSIZE);
                if (tblConfigParamsTOMaterial != null)
                {
                    MaterialTypeId = Convert.ToInt32(tblConfigParamsTOMaterial.ConfigParamVal);
                }
            }

            String ignoreStatusIds = (Int32)Constants.TranStatusE.New + ","
            + (Int32)Constants.TranStatusE.VEHICLE_CANCELED + "," + (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING + "," + (Int32)Constants.TranStatusE.VEHICLE_REJECTED_BEFORE_WEIGHING
            + "," + (Int32)Constants.TranStatusE.REJECTED_VEHICLE_OUT
            + "," + (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_GROSS_WEIGHT;//Prajakta[2019-05-15] Added
            var tempStatusIds = ignoreStatusIds;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
            if (weightSourceConfigId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                tempStatusIds = (Int32)Constants.TranStatusE.VEHICLE_CANCELED + "," + (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING + "," + (Int32)Constants.TranStatusE.VEHICLE_REJECTED_BEFORE_WEIGHING
                     + "," + (Int32)Constants.TranStatusE.REJECTED_VEHICLE_OUT
            + "," + (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_GROSS_WEIGHT;//Prajakta[2019-05-15] Added
            }
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = _iTblPurchaseScheduleSummaryDAO.SelectAllTblPurchaseScheduleSummaryForCommercialApp(tempStatusIds, approvalType, idPurchaseScheduleSummary, MaterialTypeId);

            //@IoT Added By KKM
            int confiqId = _iTblConfigParamsDAO.IoTSetting();
            if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT) && tblPurchaseScheduleSummaryList.Count > 0)
            {
                List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus((Int32)Constants.txnTypeEnum.SCRAP_VEHICLE_SCHEDULE);
                _iIotCommunication.setGateDetailsFormIoT(ignoreStatusIds, statusList, tblPurchaseScheduleSummaryList);
                var ignoreStatusIdsList = ignoreStatusIds.Split(',').Select(s => int.Parse(s)).ToList();
                tblPurchaseScheduleSummaryList = tblPurchaseScheduleSummaryList.Where(a => !ignoreStatusIdsList.Contains(a.StatusId)).ToList();

            }
            return tblPurchaseScheduleSummaryList;


        }
        //Priyanka [01-03-2019] : Added to get the purchase schedule summary record by vehicle no.
        public List<TblPurchaseScheduleSummaryTO> GetPurchaseScheduleSummaryTOByVehicleNo(String vehicleNo, Int32 actualRootScheduleId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectPurchaseScheduleSummaryTOByVehicleNo(vehicleNo, actualRootScheduleId);
        }
        #endregion

        #region Insertion
        public int InsertTblPurchaseScheduleSummary(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            return _iTblPurchaseScheduleSummaryDAO.InsertTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO);
        }

        public int InsertTblPurchaseScheduleSummary(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.InsertTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
        }


        public ResultMessage SaveVehicleScheduleDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            int loginUserId = tblPurchaseScheduleSummaryTO.CreatedBy;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();
                Boolean isCheckForExistingQty = false;
                int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
                string vehicleNumber = "";
                // //Check If ScheduleQty is equal to the schedule details 
                // resultMessage = CheckVehScheQtyMatchWithVehGradesQty(tblPurchaseScheduleSummaryTO);
                // if (resultMessage.MessageType != ResultMessageE.Information)
                // {
                //     resultMessage.DefaultBehaviour();
                //     resultMessage.DisplayMessage = "Vehicle qty does not match with sum of vehicles grades qty.";
                //     return resultMessage;
                // }

                //Prajakta[2019-03-29] Added to check if schedule qty is within order qty
                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == NULL");
                }
                double OrgBookingQty = enquiryTO.PendingBookingQty;
                if (tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary > 0)
                {
                    isCheckForExistingQty = true;
                }

                //Update pending booking Qty for enquiry in tblPurchaseEnquiry
                result = _iTblPurchaseEnquiryBL.UpdatePendingBookingQty(enquiryTO, isCheckForExistingQty, tblPurchaseScheduleSummaryTO, conn, tran);
                if (result <= 0)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                //Update purchase enquiry item details pending qty
                if (tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.New)
                {
                    resultMessage = _iTblPurchaseEnquiryDetailsBL.UpdateEnquiryItemsPendingQty(tblPurchaseScheduleSummaryTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        resultMessage.DefaultBehaviour();
                        return resultMessage;
                    }
                }


                // double pendingQty = enquiryTO.PendingBookingQty;
                // if (pendingQty <= 0)
                // {
                //     resultMessage.DefaultBehaviour();
                //     resultMessage.DisplayMessage = "All booking qty is scheduled";
                //     return resultMessage;
                // }
                // List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryDtlsByEnquiryId(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, 0, conn, tran);
                // if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                // {
                //     double totalScheduleQty = tblPurchaseScheduleSummaryTOList.Sum(a => a.Qty);
                //     double pendingQty = enquiryTO.BookingQty - totalScheduleQty;
                //     if (pendingQty == 0)
                //     {
                //         resultMessage.DefaultBehaviour();
                //         resultMessage.DisplayMessage="All booking qty is scheduled";
                //         return resultMessage;
                //     }
                // }

                if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                {
                    tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.Qty > 0).ToList();
                }

                tblPurchaseScheduleSummaryTO.VehicleNo = tblPurchaseScheduleSummaryTO.VehicleNo.ToUpper();
                vehicleNumber = tblPurchaseScheduleSummaryTO.VehicleNo;
                if (weightSourceConfigId == (int)Constants.WeighingDataSourceE.IoT)
                {
                    tblPurchaseScheduleSummaryTO.VehicleNo = string.Empty;
                }

                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTempTO = SelectAllEnquiryScheduleSummaryTO(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, true, conn, tran);
                if (tblPurchaseScheduleSummaryTempTO == null)
                {
                    tblPurchaseScheduleSummaryTO.CreatedOn = currentDate;
                    //tblPurchaseScheduleSummaryTO.UpdatedOn =  _iCommonDAO.ServerDateTime;
                    tblPurchaseScheduleSummaryTO.IsActive = 1;
                    //@Kiran Add For get ModbusRef Id
                    if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.IoT)
                    {
                        tblPurchaseScheduleSummaryTO.ModbusRefId = _iCommonDAO.GetNextAvailableModRefIdNew();
                        if (tblPurchaseScheduleSummaryTO.ModbusRefId == 0)
                        {
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error : ModbusRef List gretter than 255 or Number not found Or Dublicate number found";
                            resultMessage.DisplayMessage = Constants.DefaultErrorMsg;
                            return resultMessage;
                        }
                    }
                    //Prajakta[2021-02-7]Commented and added above
                    //vehicleNumber = tblPurchaseScheduleSummaryTO.VehicleNo;
                    //if (weightSourceConfigId == (int)Constants.WeighingDataSourceE.IoT)
                    //{
                    //    tblPurchaseScheduleSummaryTO.VehicleNo = string.Empty;
                    //}

                    #region Assign default Gate

                    if (tblPurchaseScheduleSummaryTO.GateId == 0)
                    {
                        TblGateTO tblGateTO = _iTblGateBL.GetDefaultTblGateTO();
                        if (tblGateTO != null)
                        {
                            tblPurchaseScheduleSummaryTO.GateId = tblGateTO.IdGate;
                            tblPurchaseScheduleSummaryTO.PortNumber = tblGateTO.PortNumber;
                            tblPurchaseScheduleSummaryTO.IoTUrl = tblGateTO.IoTUrl;
                            tblPurchaseScheduleSummaryTO.MachineIP = tblGateTO.MachineIP;
                        }
                    }

                    #endregion

                    if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry > 0)
                    {
                        TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectTblPurchaseVehicleSpotEntryTO(tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry, conn, tran);
                        if (spotVehicleTO != null)
                        {
                            tblPurchaseScheduleSummaryTO.ReportedDate = spotVehicleTO.CreatedOn;
                        }
                    }


                    result = InsertTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);

                    //Added By gokul 
                    resultMessage = UpdatePendingNoOfVehiclesAgainstEnquiry(enquiryTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }


                    if (result != 0)
                    {
                        if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        {
                            for (int i = 0; i < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                            {
                                TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[i];
                                tblPurchaseVehicleDetailsTO.SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                                result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTO, conn, tran);
                                if (result <= 0)
                                {
                                    throw new Exception("Error in TblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTO, conn, tran);");
                                }
                                else
                                {

                                    if (tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Count > 0)
                                    {
                                        tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList = tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Where(a => a.ExpressionDtlsId > 0).ToList();

                                        for (int d = 0; d < tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Count; d++)
                                        {
                                            tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList[d].PurchaseScheduleDtlsId = tblPurchaseVehicleDetailsTO.IdVehiclePurchase;
                                            result = _iTblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList[d], conn, tran);
                                            if (result != 1)
                                            {
                                                throw new Exception("Error in TblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList[d], conn, tran);");
                                            }

                                        }
                                    }
                                }

                            }
                        }
                    }
                    else
                    {
                        throw new Exception("InsertTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);");
                    }
                }
                else
                {

                    tblPurchaseScheduleSummaryTO.UpdatedOn = currentDate;
                    result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
                    if (result >= 1)
                    {
                        Boolean isGetGradeExpDtls = true;
                        List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOTempList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                        if (tblPurchaseVehicleDetailsTOTempList != null && tblPurchaseVehicleDetailsTOTempList.Count > 0)
                        {
                            for (int b = 0; b < tblPurchaseVehicleDetailsTOTempList.Count; b++)
                            {

                                TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTLocalTO = tblPurchaseVehicleDetailsTOTempList[b];
                                if (tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count > 0)
                                {
                                    for (int p = 0; p < tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count; p++)
                                    {
                                        result = _iTblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);
                                        if (result < 0)
                                        {
                                            throw new Exception("TblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);");
                                        }
                                    }
                                }

                                result = _iTblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);
                                if (result <= 0)
                                {
                                    throw new Exception("TblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);");
                                }
                            }
                        }

                        if (result >= 1)
                        {
                            if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                            {
                                for (int a = 0; a < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; a++)
                                {
                                    tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                                    result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a], conn, tran);
                                    if (result <= 0)
                                    {
                                        throw new Exception("TblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a], conn, tran);");
                                    }
                                    else
                                    {

                                        if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count > 0)
                                        {
                                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Where(p => p.ExpressionDtlsId > 0).ToList();

                                            for (int d = 0; d < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count; d++)
                                            {
                                                tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d].PurchaseScheduleDtlsId = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].IdVehiclePurchase;

                                                result = _iTblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d], conn, tran);
                                                if (result != 1)
                                                {
                                                    throw new Exception("TblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d], conn, tran);");
                                                }

                                            }
                                        }
                                    }

                                }
                            }
                        }

                    }

                }


                //save vehicle history details
                resultMessage = _iTblPurchaseSchStatusHistoryBL.SavePurVehStatusHistory(tblPurchaseScheduleSummaryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                if (result >= 1)
                {
                    //Save Uploaded Images
                    if (tblPurchaseScheduleSummaryTO.RecycleDocumentTOList != null && tblPurchaseScheduleSummaryTO.RecycleDocumentTOList.Count > 0)
                    {
                        Int32 txnId = 0;
                        if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.New))
                        {
                            txnId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        }
                        else
                        {
                            txnId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        }
                        result = _iTblRecycleDocumentBL.SaveUploadedImages(tblPurchaseScheduleSummaryTO.RecycleDocumentTOList, txnId, currentDate, conn, tran);
                        if (result <= 0)
                        {
                            resultMessage.DefaultBehaviour();
                            return resultMessage;
                        }
                    }

                    if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO != null)
                    {
                        if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry > 0)
                        {
                            //Prajakta[2019-03-29] Added to check if vehicle schedule is already added for the spot vehicle
                            TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectTblPurchaseVehicleSpotEntryTO(tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry, conn, tran);
                            if (spotVehicleTO != null)
                            {
                                if (spotVehicleTO.PurchaseScheduleSummaryId > 0)
                                {
                                    resultMessage.DefaultBehaviour();
                                    resultMessage.DisplayMessage = "Vehicle No. - " + tblPurchaseScheduleSummaryTO.VehicleNo + " is already scheduled";
                                    return resultMessage;
                                }
                            }

                            tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                            result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO, conn, tran);
                            if (result <= 0)
                            {
                                resultMessage.DefaultBehaviour();
                                return resultMessage;
                            }
                        }
                    }

                }


                if (result >= 1)
                {


                    List<TblQualityPhaseTO> TblQualityPhaseTOList = new List<TblQualityPhaseTO>();
                    //Save Quality Flags
                    if (tblPurchaseScheduleSummaryTO.QualityPhaseTOList != null && tblPurchaseScheduleSummaryTO.QualityPhaseTOList.Count > 0)
                    {
                        Int32 txnId = 0;

                        txnId = tblPurchaseScheduleSummaryTO.RootScheduleId > 0 ? tblPurchaseScheduleSummaryTO.RootScheduleId : tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        // if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.New))
                        // {
                        //     txnId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        // }
                        // else
                        // {
                        //     txnId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        // }
                        foreach (var item in tblPurchaseScheduleSummaryTO.QualityPhaseTOList)
                        {
                            item.PurchaseScheduleSummaryId = txnId;
                            item.IsActive = 1;
                            item.CreatedOn = currentDate;
                            item.CreatedBy = loginUserId;

                        }

                    }


                }

                // //Update pending booking Qty for enquiry in tblPurchaseEnquiry
                // result = TblPurchaseEnquiryBL.UpdatePendingBookingQty(enquiryTO, isCheckForExistingQty, tblPurchaseScheduleSummaryTO, conn, tran);
                // if (result <= 0)
                // {
                //     resultMessage.DefaultBehaviour();
                //     return resultMessage;
                // }
                //@KKM for write vehicle details on IoT
                //if (weightSourceConfigId == (int)Constants.WeighingDataSourceE.IoT && !isCheckForExistingQty)
                if (weightSourceConfigId == (int)Constants.WeighingDataSourceE.IoT)
                {
                    if (tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.New)
                    {

                        int res = WriteDataOnIOT(tblPurchaseScheduleSummaryTO, conn, tran, vehicleNumber);
                        if (res == 0)
                        {
                            throw new Exception("Error when write data on IoT");
                        }
                    }
                }

                //Add purchase vehicle status history
                //resultMessage = InsertPurchaseVehStatusHistoryDtls(tblPurchaseScheduleSummaryTO, conn, tran);
                //if (resultMessage.MessageType != ResultMessageE.Information)
                //{
                //    resultMessage.DefaultBehaviour();
                //    return resultMessage;
                //}

                tran.Commit();
                if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry > 0)
                {
                    resultMessage = AddReportedScheduleForSpotVehicle(tblPurchaseScheduleSummaryTO, currentDate);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        //resultMessage.DefaultBehaviour();
                        return resultMessage;
                    }
                }

                if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry > 0)
                {
                    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_SEND_SPOT_ENTRY_VEHICLE_FOR_APPROVAL_IF_SCHEDULE_QTY_IS_GREATER_THAN_SAUDA_QTY);

                    if (tblConfigParamsTO != null)
                    {
                        if (tblConfigParamsTO.ConfigParamVal == 1.ToString())
                        {
                            TblConfigParamsTO tblConfigParamsTOTolerance = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_SPOT_ENTRY_VEHICLE_QTY_TOLERANCE);
                            if (tblConfigParamsTOTolerance != null)
                            {
                                if (tblConfigParamsTOTolerance.ConfigParamVal != 0.ToString())
                                {
                                    enquiryTO.PendingBookingQty = enquiryTO.PendingBookingQty + Convert.ToInt32(tblConfigParamsTOTolerance.ConfigParamVal);
                                }
                            }
                            if (enquiryTO.PendingBookingQty < 0)
                            {
                                tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL);
                            }
                        }
                    }
                }

                if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL))
                {
                    result = 0;
                    TblPurchaseScheduleStatusHistoryTO HistoryTO = new TblPurchaseScheduleStatusHistoryTO();
                    HistoryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    HistoryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL);
                    HistoryTO.PhaseId = tblPurchaseScheduleSummaryTO.VehiclePhaseId;
                    HistoryTO.AcceptStatusId = Convert.ToInt32(Constants.TranStatusE.SEND_FOR_INSPECTION);
                    HistoryTO.RejectStatusId = Convert.ToInt32(Constants.TranStatusE.SEND_FOR_INSPECTION);
                    HistoryTO.AcceptPhaseId = tblPurchaseScheduleSummaryTO.VehiclePhaseId;
                    HistoryTO.RejectPhaseId = tblPurchaseScheduleSummaryTO.VehiclePhaseId;
                    HistoryTO.CreatedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    HistoryTO.CreatedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    HistoryTO.NavigationUrl = "Unloading/OutsideInspectionForVehicleInspectn";
                    HistoryTO.StatusRemark = "Total Sauda Qty = " + enquiryTO.BookingQty + " MT, Pending Sauda Qty = " + OrgBookingQty + "MT, Scheduled Qty = " + tblPurchaseScheduleSummaryTO.Qty + " MT, Diff = " + (OrgBookingQty - tblPurchaseScheduleSummaryTO.Qty) + "MT .";
                    HistoryTO.IsIgnoreApproval = 0;
                    HistoryTO.IsActive = 1;
                    HistoryTO.IsLatest = 1;
                    HistoryTO.ApprovalType = (Int32)Constants.VehSchApprovalTypeE.SPOT_VEH_QTY_GRAETER_THAN_SAUDA_PEND_QTY;

                    result = _iTblPurchaseScheduleStatusHistoryBL.InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran);
                    if (result <= 0)
                    {
                        throw new Exception("Error In InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran)");
                    }

                    resultMessage = SendNotificationForSpotVehQtyApproval(tblPurchaseScheduleSummaryTO, enquiryTO, currentDate);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error in SendNotificationForSpotVehQtyApproval(tblPurchaseScheduleSummaryTO,enquiryTO,currentDate);");
                    }

                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " is went for approval." +
                    "Sauda Pending Qty = " + OrgBookingQty + " Vehicle Qty = " + tblPurchaseScheduleSummaryTO.Qty;
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Vehicle details added successfully";
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SaveVehicleScheduleDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }

        }

        //@KKM added for Write new data on IoT
        public int WriteDataOnIOT(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran, String vehicleNumber)
        {
            int result = 1;
            DimStatusTO statusTO = _iDimStatusDAO.SelectDimStatus(tblPurchaseScheduleSummaryTO.StatusId, conn, tran);
            if (statusTO == null || statusTO.IotStatusId == 0)
            {
                result = 0;
                return result;
            }

            // @KKM Call to post data to Gate IoT API
            List<object[]> frameList = _iIotCommunication.GenerateGateIoTFrameData(tblPurchaseScheduleSummaryTO, vehicleNumber, statusTO.IotStatusId);
            if (frameList != null && frameList.Count > 0)
            {
                for (int f = 0; f < frameList.Count; f++)
                {

                    result = _iIotCommunication.PostGateAPIDataToModbusTcpApi(tblPurchaseScheduleSummaryTO, frameList[f]);
                    if (result != 1)
                    {
                        result = 0;
                        return result;
                    }
                }
            }
            else
            {
                result = 0;
            }
            return result;
        }
        //@KKM added for update status on IoT
        public ResultMessage UpdateLoadingStatusToGateIoT(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;
            DimStatusTO statusTO = _iDimStatusDAO.SelectDimStatus(tblPurchaseScheduleSummaryTO.StatusId, conn, tran);
            if (statusTO == null || statusTO.IotStatusId == 0)
            {
                resultMessage.DefaultBehaviour("iot status id not found for loading to pass at gate iot");
                return resultMessage;
            }

            // Call to post data to Gate IoT API
            List<object[]> frameList = _iIotCommunication.GenerateGateIoTStatusFrameData(tblPurchaseScheduleSummaryTO, statusTO.IotStatusId);
            if (frameList != null && frameList.Count > 0)
            {
                for (int f = 0; f < frameList.Count; f++)
                {
                    result = _iIotCommunication.UpdateLoadingStatusOnGateAPIToModbusTcpApi(tblPurchaseScheduleSummaryTO, frameList[f]);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour("Error while PostGateAPIDataToModbusTcpApi");
                        return resultMessage;
                    }
                }
            }
            else
            {
                resultMessage.DefaultBehaviour("frameList Found Null Or Empty while PostGateAPIDataToModbusTcpApi");
                return resultMessage;
            }

            resultMessage.DefaultSuccessBehaviour();
            return resultMessage;
        }

        public ResultMessage SendNotificationForSpotVehQtyApproval(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseEnquiryTO enquiryTO, DateTime serverDateTime)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                int sourceEntityId = 0;

                sourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

                _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEH_APPROVAL_PENDING_FOR_SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY, sourceEntityId.ToString());
                _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY_REJECTED, sourceEntityId.ToString());


                //If PM assistant is doing corrections then send notification to respective PM
                if (enquiryTO != null && enquiryTO.UserId > 0)
                {
                    if (enquiryTO.UserId != tblPurchaseScheduleSummaryTO.CreatedBy)
                    {
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = enquiryTO.UserId;
                        tblAlertUsersTO.RaisedOn = serverDateTime;
                        tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEH_APPROVAL_PENDING_FOR_SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY;
                        tblAlertUsersTOList.Add(tblAlertUsersTO);
                    }

                }

                tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEH_APPROVAL_PENDING_FOR_SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY;
                tblAlertInstanceTO.AlertAction = "Vehicle Schedule Pending For Wt. Rate Approval";
                tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is pending for approval. " +
                " As Spot Veh Qty = " + tblPurchaseScheduleSummaryTO.Qty +
                " is greater than sauda pending qty = " + enquiryTO.PendingBookingQty;
                tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                tblAlertInstanceTO.IsActive = 1;
                tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                tblAlertInstanceTO.SourceDisplayId = "SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY";
                tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.IsAutoReset = 1;

                //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                notify.SendNotificationToUsers(tblAlertInstanceTO);

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "SendNotificationForSpotVehQtyApproval(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO,TblPurchaseEnquiryTO enquiryTO,DateTime serverDateTime)");
                return resultMessage;
            }

        }

        //Prajakta[2019-04-01] Commented
        // public static int SaveVehicleScheduleDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        // {

        //     SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
        //     SqlTransaction tran = null;
        //     Int32 result = 0;
        //     ResultMessage resultMessage = new StaticStuff.ResultMessage();
        //     resultMessage.MessageType = ResultMessageE.None;
        //     DateTime currentDate =  _iCommonDAO.ServerDateTime;
        //     int loginUserId = tblPurchaseScheduleSummaryTO.CreatedBy;
        //     try
        //     {
        //         conn.Open();
        //         tran = conn.BeginTransaction();

        //         //Prajakta[2019-03-29] Added to check if schedule qty is within order qty
        //         TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, conn, tran);
        //         if (enquiryTO == null)
        //         {
        //             return 0;
        //         }

        //         // List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryDtlsByEnquiryId(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, 0,conn,tran);
        //         // if(tblPurchaseScheduleSummaryTOList!=null && tblPurchaseScheduleSummaryTOList.Count>0)
        //         // {
        //         //     double totalScheduleQty=tblPurchaseScheduleSummaryTOList.Sum(a=>a.Qty);
        //         //     if(enquiryTO.BookingQty>totalScheduleQty)
        //         //     {
        //         //         return 1;
        //         //     }
        //         // }


        //         // if(enquiryTO.BookingQty)

        //         TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTempTO = SelectAllEnquiryScheduleSummaryTO(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, true, conn, tran);
        //         if (tblPurchaseScheduleSummaryTempTO == null)
        //         {
        //             tblPurchaseScheduleSummaryTO.CreatedOn = currentDate;
        //             //tblPurchaseScheduleSummaryTO.UpdatedOn =  _iCommonDAO.ServerDateTime;
        //             tblPurchaseScheduleSummaryTO.IsActive = 1;
        //             result = InsertTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
        //             if (result == 1)
        //             {
        //                 if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
        //                 {
        //                     for (int i = 0; i < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
        //                     {
        //                         TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[i];
        //                         tblPurchaseVehicleDetailsTO.SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //                         result = TblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTO, conn, tran);
        //                         if (result <= 0)
        //                         {
        //                             return 0;
        //                         }
        //                         else
        //                         {

        //                             if (tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Count > 0)
        //                             {
        //                                 for (int d = 0; d < tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Count; d++)
        //                                 {
        //                                     tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList[d].PurchaseScheduleDtlsId = tblPurchaseVehicleDetailsTO.IdVehiclePurchase;
        //                                     result = TblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList[d], conn, tran);
        //                                     if (result != 1)
        //                                     {
        //                                         tran.Rollback();
        //                                         return 0;
        //                                     }

        //                                 }
        //                             }
        //                         }

        //                     }
        //                 }


        //             }
        //             else
        //             {
        //                 return 0;
        //             }
        //         }
        //         else
        //         {

        //             tblPurchaseScheduleSummaryTO.UpdatedOn = currentDate;
        //             result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
        //             if (result >= 1)
        //             {
        //                 List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOTempList = TblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, conn, tran);
        //                 if (tblPurchaseVehicleDetailsTOTempList != null && tblPurchaseVehicleDetailsTOTempList.Count > 0)
        //                 {
        //                     for (int b = 0; b < tblPurchaseVehicleDetailsTOTempList.Count; b++)
        //                     {

        //                         TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTLocalTO = tblPurchaseVehicleDetailsTOTempList[b];
        //                         if (tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count > 0)
        //                         {
        //                             for (int p = 0; p < tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count; p++)
        //                             {
        //                                 result = _iTblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);
        //                                 if (result < 0)
        //                                 {
        //                                     tran.Rollback();
        //                                     return 0;
        //                                 }
        //                             }
        //                         }

        //                         result = TblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);
        //                         if (result <= 0)
        //                         {
        //                             return 0;
        //                         }
        //                     }
        //                 }

        //                 if (result >= 1)
        //                 {
        //                     if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
        //                     {
        //                         for (int a = 0; a < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; a++)
        //                         {
        //                             tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //                             result = TblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a], conn, tran);
        //                             if (result <= 0)
        //                             {
        //                                 return 0;
        //                             }
        //                             else
        //                             {

        //                                 if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count > 0)
        //                                 {
        //                                     for (int d = 0; d < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count; d++)
        //                                     {
        //                                         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d].PurchaseScheduleDtlsId = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].IdVehiclePurchase;
        //                                         result = TblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d], conn, tran);
        //                                         if (result != 1)
        //                                         {
        //                                             tran.Rollback();
        //                                             return 0;
        //                                         }

        //                                     }
        //                                 }
        //                             }

        //                         }
        //                     }
        //                 }

        //             }

        //         }

        //         if (result >= 1)
        //         {
        //             //Save Uploaded Images
        //             if (tblPurchaseScheduleSummaryTO.RecycleDocumentTOList != null && tblPurchaseScheduleSummaryTO.RecycleDocumentTOList.Count > 0)
        //             {
        //                 Int32 txnId = 0;
        //                 if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.New))
        //                 {
        //                     txnId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //                 }
        //                 else
        //                 {
        //                     txnId = tblPurchaseScheduleSummaryTO.RootScheduleId;
        //                 }
        //                 result = BL.TblRecycleDocumentBL.SaveUploadedImages(tblPurchaseScheduleSummaryTO.RecycleDocumentTOList, txnId, currentDate, conn, tran);
        //                 if (result <= 0)
        //                 {
        //                     return 0;
        //                 }
        //             }

        //             if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO != null)
        //             {
        //                 if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry > 0)
        //                 {
        //                     //Prajakta[2019-03-29] Added to check if vehicle schedule is already added for the spot vehicle
        //                     TblPurchaseVehicleSpotEntryTO spotVehicleTO = BL.TblPurchaseVehicleSpotEntryBL.SelectTblPurchaseVehicleSpotEntryTO(tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry, conn, tran);
        //                     if (spotVehicleTO != null)
        //                     {
        //                         if (spotVehicleTO.PurchaseScheduleSummaryId > 0)
        //                         {
        //                             return 2;
        //                         }
        //                     }

        //                     tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //                     result = BL.TblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO, conn, tran);
        //                     if (result <= 0)
        //                     {
        //                         return 0;
        //                     }
        //                 }
        //             }

        //         }


        //         if (result >= 1)
        //         {


        //             List<TblQualityPhaseTO> TblQualityPhaseTOList = new List<TblQualityPhaseTO>();
        //             //Save Quality Flags
        //             if (tblPurchaseScheduleSummaryTO.QualityPhaseTOList != null && tblPurchaseScheduleSummaryTO.QualityPhaseTOList.Count > 0)
        //             {
        //                 Int32 txnId = 0;

        //                 txnId = tblPurchaseScheduleSummaryTO.RootScheduleId > 0 ? tblPurchaseScheduleSummaryTO.RootScheduleId : tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //                 // if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.New))
        //                 // {
        //                 //     txnId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //                 // }
        //                 // else
        //                 // {
        //                 //     txnId = tblPurchaseScheduleSummaryTO.RootScheduleId;
        //                 // }
        //                 foreach (var item in tblPurchaseScheduleSummaryTO.QualityPhaseTOList)
        //                 {
        //                     item.PurchaseScheduleSummaryId = txnId;
        //                     item.IsActive = 1;
        //                     item.CreatedOn = currentDate;
        //                     item.CreatedBy = loginUserId;

        //                 }

        //             }


        //         }

        //         //Update pending booking Qty for enquiry in tblPurchaseEnquiry
        //         result = TblPurchaseEnquiryBL.UpdatePendingBookingQty(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, conn, tran);
        //         if (result <= 0)
        //         {
        //             return 0;
        //         }

        //         if (result >= 1)
        //         {

        //             tran.Commit();
        //             if (tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.IdVehicleSpotEntry > 0)
        //             {
        //                 ResultMessage resultmsg = AddReportedScheduleForSpotVehicle(tblPurchaseScheduleSummaryTO, currentDate);
        //                 if (resultmsg.MessageType != ResultMessageE.Information)
        //                 {
        //                     resultMessage.DefaultBehaviour();
        //                     resultMessage.DisplayMessage = "Sorry..Record Could not be saved.";
        //                     resultMessage.Text = "Error While Generating Notification";
        //                     return 0;
        //                 }
        //             }

        //             return 1;
        //         }
        //         else
        //         {
        //             tran.Rollback();
        //             return 0;
        //         }

        //     }
        //     catch (Exception ex)
        //     {
        //         tran.Rollback();
        //         return 0;
        //     }
        //     finally
        //     {
        //         conn.Close();
        //     }

        // }


        #endregion

        public ResultMessage AddReportedScheduleForSpotVehicle(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, DateTime currentDate)
        {
            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTempTOForStatus = new TblPurchaseScheduleSummaryTO();
            tblPurchaseScheduleSummaryTempTOForStatus = tblPurchaseScheduleSummaryTO;
            tblPurchaseScheduleSummaryTempTOForStatus.IsActive = 1;
            tblPurchaseScheduleSummaryTempTOForStatus.ParentPurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
            tblPurchaseScheduleSummaryTempTOForStatus.RootScheduleId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
            // int statusid = SelectNextStatusOfCurrentStatus(tblPurchaseScheduleSummaryTempTOForStatus.StatusId);
            List<DimStatusTO> dimStatusTOList = _iDimStatusBL.SelectAllDimStatusList();

            DimStatusTO dimStatusTO = new DimStatusTO();
            int MaterialTypeId = 0;
            TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);


            if (tblConfigParamsTO != null && Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 1)
            {
                TblConfigParamsTO tblConfigParamsTOMaterial = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_CONFIG_SETTING_FOR_CONTAINER_AND_LOTSIZE);
                if (tblConfigParamsTOMaterial != null)
                {
                    MaterialTypeId = Convert.ToInt32(tblConfigParamsTOMaterial.ConfigParamVal);
                }
                if (MaterialTypeId > 0 && MaterialTypeId == tblPurchaseScheduleSummaryTO.PurchaseVehicleSpotEntryTO.ProdClassId)
                {
                    dimStatusTO = GetNextStatusTO(tblPurchaseScheduleSummaryTO.StatusId, dimStatusTOList, 2);
                }
                else
                {
                    if (tblPurchaseScheduleSummaryTempTOForStatus.COrNcId == 1)
                        dimStatusTO = GetNextStatusTO(tblPurchaseScheduleSummaryTO.StatusId, dimStatusTOList, 1);
                    else
                        dimStatusTO = GetNextStatusTO(tblPurchaseScheduleSummaryTO.StatusId, dimStatusTOList, 2);
                }
            }
            else
                dimStatusTO = GetNextStatusTO(tblPurchaseScheduleSummaryTO.StatusId, dimStatusTOList, 1);


            if (dimStatusTO.IdStatus > 0)
            {
                tblPurchaseScheduleSummaryTempTOForStatus.StatusId = dimStatusTO.IdStatus;
            }

            tblPurchaseScheduleSummaryTempTOForStatus.IsStatusUpdate = 1;
            // tblPurchaseScheduleSummaryTempTOForStatus.StatusId = Convert.ToInt32(Stuff.Constants.TranStatusE.VEHICLE_REPORTED_FOR_LOADING);
            ResultMessage resultmsg = InsertMaterailItemDetails(tblPurchaseScheduleSummaryTempTOForStatus, false, true, currentDate);
            return resultmsg;
        }

        private int SelectNextStatusOfCurrentStatus(int statusId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectNextStatusOfCurrentStatus(statusId);
        }

        #region Updation



        public ResultMessage UpdateScheduleVehicleNoOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Int32 loginUserId)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            DateTime serverDateTime = _iCommonDAO.ServerDateTime;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                Int32 rootScheduleId = 0;
                if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    rootScheduleId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                else
                    rootScheduleId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;

                #region Check the Vehicle is already in premises.
                //List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();

                //tblPurchaseScheduleSummaryTOList = GetPurchaseScheduleSummaryTOByVehicleNo(tblPurchaseScheduleSummaryTO.VehicleNo, tblPurchaseScheduleSummaryTO.ActualRootScheduleId);
                //if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                //{
                //    resultMessage.MessageType = ResultMessageE.Error;
                //    resultMessage.Result = 0;
                //    resultMessage.DisplayMessage = "Vehicle is already entered in premises.";
                //    resultMessage.Text = "Vehicle is already entered in premises.";
                //    return resultMessage;
                //}

                //resultMessage = IsVehicleAlreadyInPremises(null, tblPurchaseScheduleSummaryTO.VehicleNo);
                resultMessage = IsVehicleAlreadyInPremisesForDBAndIOT(tblPurchaseScheduleSummaryTO, tblPurchaseScheduleSummaryTO.VehicleNo, false);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }


                #endregion

                //Get All vehicle Schedules
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId != Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    List<TblPurchaseScheduleSummaryTO> allScheduleList = SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
                    if (allScheduleList != null && allScheduleList.Count > 0)
                    {
                        for (int i = 0; i < allScheduleList.Count; i++)
                        {
                            allScheduleList[i].VehicleNo = tblPurchaseScheduleSummaryTO.VehicleNo;
                            allScheduleList[i].UpdatedOn = serverDateTime;
                            allScheduleList[i].UpdatedBy = loginUserId;
                            allScheduleList[i].ContainerNo = tblPurchaseScheduleSummaryTO.ContainerNo;
                            allScheduleList[i].LotSize = tblPurchaseScheduleSummaryTO.LotSize;
                            result = UpdateScheduleVehicleNoOnly(allScheduleList[i], conn, tran);
                            if (result != 1)
                            {
                                throw new Exception("Error while updating tblPurchaseScheduleSummaryTO");

                            }
                        }
                    }
                }
                else
                {
                    //chetan[06-Match-2020] added for update vehicle number on IOT machine
                    String vehicleNumber = tblPurchaseScheduleSummaryTO.VehicleNo;
                    GateIoTResult gateIoTResult = _iGateCommunication.GetLoadingStatusHistoryDataFromGateIoT(tblPurchaseScheduleSummaryTO);
                    if (gateIoTResult != null && gateIoTResult.Data != null && gateIoTResult.Data.Count != 0)
                    {

                        //tblPurchaseScheduleSummaryTO.VehicleNo = (string)gateIoTResult.Data[0][(int)IoTConstants.GateIoTColE.VehicleNo];
                        tblPurchaseScheduleSummaryTO.VehicleNo = _iIotCommunication.GetVehicleNumbers((string)gateIoTResult.Data[0][(int)IoTConstants.GateIoTColE.VehicleNo], true);//chetan[10-feb-2020] add for write old vehicle on IOT
                        //tblLoadingTO.TransporterOrgId = Convert.ToInt32(gateIoTResult.Data[0][(int)IoTConstants.GateIoTColE.TransportorId]);
                        String statusDate = (String)gateIoTResult.Data[0][(int)IoTConstants.GateIoTColE.StatusDate];
                        //Int32 statusId = 1;
                        //if (tblPurchaseScheduleSummaryTO.RootScheduleId != 0)
                        Int32 statusId = Convert.ToInt32(gateIoTResult.Data[0][(int)IoTConstants.GateIoTColE.StatusId]);

                        DimStatusTO dimStatusTO = _iDimStatusBL.SelectDimStatusTOByIotStatusId(statusId);
                        //tblPurchaseScheduleSummaryTO.StatusDate = IoTDateTimeStringToDate(statusDate);

                        if (dimStatusTO != null)
                        {
                            tblPurchaseScheduleSummaryTO.StatusId = dimStatusTO.IdStatus;
                            tblPurchaseScheduleSummaryTO.StatusDesc = dimStatusTO.StatusName;
                        }

                    }


                    //String vehicleNumber = tblPurchaseScheduleSummaryTO.VehicleNo;
                    int res = WriteDataOnIOT(tblPurchaseScheduleSummaryTO, conn, tran, vehicleNumber);
                    if (res != 1)
                    {
                        tran.Rollback();
                        resultMessage.DefaultBehaviour("error while update vehicle number.");
                        return resultMessage;
                    }
                }

                TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (spotVehicleTO != null)
                {
                    spotVehicleTO.VehicleNo = tblPurchaseScheduleSummaryTO.VehicleNo;
                    result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);");
                    }
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, " UpdateScheduleVehicleNoOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage UpdateDensityAndVehicleType(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Int32 loginUserId)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            DateTime serverDateTime = _iCommonDAO.ServerDateTime;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                //Get All vehicle Schedules
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId != Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    List<TblPurchaseScheduleSummaryTO> allScheduleList = SelectAllEnquiryScheduleSummaryTOByRootId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, conn, tran);
                    if (allScheduleList != null && allScheduleList.Count > 0)
                    {
                        for (int i = 0; i < allScheduleList.Count; i++)
                        {
                            allScheduleList[i].VehicleTypeId = tblPurchaseScheduleSummaryTO.VehicleTypeId;
                            allScheduleList[i].VehicleTypeName = tblPurchaseScheduleSummaryTO.VehicleTypeName;
                            result = UpdateVehicleTypeOnly(allScheduleList[i]);
                            if (result != 1)
                            {
                                throw new Exception("Error while updating VehicleType");

                            }
                        }
                    }

                    result = updateDensityAndVehicleTypeForCurrentPhase(tblPurchaseScheduleSummaryTO, conn, tran);
                    if (result != 1)
                    {
                        throw new Exception("Error while updating Density");
                    }

                    TblScheduleDensityTO tblScheduleDensityTO = new TblScheduleDensityTO();
                    tblScheduleDensityTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    tblScheduleDensityTO.PhaseId = tblPurchaseScheduleSummaryTO.PhaseIdForDensity;
                    tblScheduleDensityTO.Height = tblPurchaseScheduleSummaryTO.Height;
                    tblScheduleDensityTO.Length = tblPurchaseScheduleSummaryTO.Length;
                    tblScheduleDensityTO.Width = tblPurchaseScheduleSummaryTO.Width;
                    tblScheduleDensityTO.VehicleTypeId = tblPurchaseScheduleSummaryTO.VehicleTypeId;
                    tblScheduleDensityTO.CreatedBy = loginUserId;
                    tblScheduleDensityTO.CreatedOn = serverDateTime;

                    result = _iTblScheduleDensityBL.InsertTblScheduleDensity(tblScheduleDensityTO, conn, tran);

                    if (result != 1)
                    {
                        throw new Exception("Error while updating Density");
                    }
                }
                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, " UpdateScheduleVehicleNoOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public int updateDensityAndVehicleTypeForCurrentPhase(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.updateDensityAndVehicleTypeForCurrentPhase(tblPurchaseScheduleSummaryTO, conn, tran);
        }

        public ResultMessage UpdateSpotEntryVehicleSupplier(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, Int32 loginUserId)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            DateTime serverDateTime = _iCommonDAO.ServerDateTime;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                result = UpdateSpotEntryVehicleSupplier(tblPurchaseVehicleSpotEntryTO, conn, tran);
                if (result != 1)
                {
                    throw new Exception("Error while updating tblPurchaseVehicleSpotEntryTO");

                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, " UpdateScheduleVehicleNoOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage CompeleteRecoveryAgainstVehicle(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            DateTime serverDateTime = _iCommonDAO.ServerDateTime;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                tblPurchaseScheduleSummaryTO.RecoveryOn = serverDateTime;

                result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
                if (result != 1)
                {
                    throw new Exception("Error while updating tblPurchaseScheduleSummaryTO");

                }
                // resultMessage = UpdategradingItemDtlsAgainstVehicle(tblPurchaseScheduleSummaryTO, conn, tran);
                // if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                // {
                //     throw new Exception("Error while calculation item details");
                // }


                tran.Commit();

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, " CompeleteRecoveryAgainstVehicle(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }


        public int UpdateTblPurchaseScheduleSummary(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO);
        }
        public int UpdateVehicleTypeOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateVehicleTypeOnly(tblPurchaseScheduleSummaryTO);
        }
        public int UpdateRejectedQtyDtlsAgainstVehicle(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateRejectedQtyDtlsAgainstVehicle(tblPurchaseScheduleSummaryTO, conn, tran);
        }

        public ResultMessage UpdateWeighingCompleted(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Int32 loginUserId)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                resultMessage = UpdateWeighingCompletedAgainstVehicle(tblPurchaseScheduleSummaryTO, loginUserId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }
                // if (result > 0)
                // {

                //     tran.Commit();
                //     resultMessage.DefaultSuccessBehaviour();
                //     return resultMessage;
                // }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;


            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateWeighingCompleted(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Int32 loginUserId)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }


        public ResultMessage UpdateWeighingCompletedAgainstVehicle(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            ResultMessage resultMessage = new ResultMessage();



            #region Check if all flags are completed
            int idSummary = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
            resultMessage = CheckIfAllQualityFlagsAreCompleted(idSummary, tblPurchaseScheduleSummaryTO.VehiclePhaseId);
            if (resultMessage.Result > 0)
            {
                resultMessage.Result = 0;
                return resultMessage;
            }
            #endregion

            int res = _iTblPurchaseScheduleSummaryDAO.UpdateWeighingCompletedAgainstVehicle(tblPurchaseScheduleSummaryTO, conn, tran);
            if (res > 0)
            {
                tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.WEIGHING_COMPLETED;
                Int32 vehStatusId = tblPurchaseScheduleSummaryTO.StatusId;

                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                }

                //tblPurchaseScheduleSummaryTO.CreatedBy = loginUserId;
                //tblPurchaseScheduleSummaryTO.CreatedOn = currentDate;
                tblPurchaseScheduleSummaryTO.UpdatedBy = loginUserId;
                tblPurchaseScheduleSummaryTO.UpdatedOn = currentDate;


                res = _iTblPurchaseScheduleSummaryDAO.UpdateStatusWeighingCompletedAgainstVehicle(tblPurchaseScheduleSummaryTO, conn, tran);
                if (res != 1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }
                //save vehicle history details
                tblPurchaseScheduleSummaryTO.IsStatusUpdate = 1;
                tblPurchaseScheduleSummaryTO.StatusId = vehStatusId;
                resultMessage = _iTblPurchaseSchStatusHistoryBL.SavePurVehStatusHistory(tblPurchaseScheduleSummaryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }
                //@Added by KKM for updte status on gate IoT

                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                    DimStatusTO statusTO = _iDimStatusDAO.SelectDimStatus(Convert.ToInt32(Constants.TranStatusE.WEIGHING_COMPLETED), conn, tran);
                    if (statusTO == null || statusTO.IotStatusId == 0)
                    {
                        resultMessage.DefaultBehaviour();
                        return resultMessage;
                    }
                    object[] statusframeTO = new object[2] { tblPurchaseScheduleSummaryTO.ModbusRefId, statusTO.IotStatusId };
                    int result = _iIotCommunication.UpdateLoadingStatusOnGateAPIToModbusTcpApi(tblPurchaseScheduleSummaryTO, statusframeTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        return resultMessage;
                    }
                }
            }
            else
            {
                resultMessage.DefaultBehaviour();
                return resultMessage;
            }

            //Check If Tare Weight is already taken
            res = InsertTareWt(tblPurchaseScheduleSummaryTO, conn, tran);
            if (res <= 0)
            {
                //return res;
                resultMessage.DefaultBehaviour();
                return resultMessage;
            }


            //Mark vehicle unloading completed while weighing complete
            TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_UNLD_COMPLETE_WHILE_WEIGHING_COMPLETE, conn, tran);
            if (tblConfigParamsTO != null && tblConfigParamsTO.ConfigParamVal == "1")
            {
                resultMessage = CreateAndSaveVehUnloadingCompleteDtls(tblPurchaseScheduleSummaryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    res = 0;
                    resultMessage.Result = 0;
                    return resultMessage;
                }
            }

            if (tblPurchaseScheduleSummaryTO.IsWeighing > 0)
            {
                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                //get purchase manager of supplier
                tblAlertUsersTOList = new List<TblAlertUsersTO>();
                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO1 = tblPurchaseScheduleSummaryTO;
                string sourceEntityId = null;
                DateTime createdDate = _iCommonDAO.ServerDateTime;

                if (sourceEntityId == null)
                {
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        sourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId.ToString();
                    }
                    else
                    {
                        sourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary.ToString();
                    }
                }
                List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.WEIGHING_STAGE_COMPLETED, sourceEntityId);

                if (tblPurchaseScheduleSummaryTO1 != null)
                {
                    TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                    tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO1.SupervisorId;
                    tblAlertUsersTO.RaisedOn = createdDate;
                    tblAlertUsersTOList.Add(tblAlertUsersTO);
                }

                tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.WEIGHING_STAGE_COMPLETED;
                tblAlertInstanceTO.AlertAction = "WEIGHING_STAGE_COMPLETED";
                // tblAlertInstanceTO.AlertComment = "Weighing Stage " + tblPurchaseWeighingStageSummaryTO.WeightStageId  + " Completed For Scrap Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " With Net Weight- " + tblPurchaseWeighingStageSummaryTO.NetWeightMT;
                tblAlertInstanceTO.AlertComment = "Weighing completed for Vehicle No:" + tblPurchaseScheduleSummaryTO.VehicleNo;
                tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                tblAlertInstanceTO.EffectiveFromDate = createdDate;
                tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                tblAlertInstanceTO.IsActive = 1;
                tblAlertInstanceTO.SourceDisplayId = "WEIGHING_STAGE_COMPLETED";
                if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                {
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO1.RootScheduleId;
                }
                else
                {
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO1.IdPurchaseScheduleSummary;
                }
                //Prajakta[2019-05-22] Commented and added
                //tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                tblAlertInstanceTO.RaisedBy = loginUserId;
                tblAlertInstanceTO.RaisedOn = createdDate;
                tblAlertInstanceTO.IsAutoReset = 1;

                //Reset Prev alert of Vehicle Send In
                AlertsToReset alertsToReset = new AlertsToReset();
                alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SEND_IN;
                resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                tblAlertInstanceTO.AlertsToReset = alertsToReset;


                notification.SendNotificationToUsers(tblAlertInstanceTO);

                //Send the notification to if party net wt and actual net wt goes out of tolerance val
                TblConfigParamsTO partyNetWtTolConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_PARTY_NET_WT_ACTUAL_NET_WT_DIFF_TOLE_VAL, conn, tran);
                if (partyNetWtTolConfigTO != null && Convert.ToDouble(partyNetWtTolConfigTO.ConfigParamVal) > 0)
                {
                    resultMessage = CheckIfPartyNetWtGreaterThanActualNetWt(partyNetWtTolConfigTO, tblPurchaseScheduleSummaryTO, loginUserId, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        resultMessage.DefaultBehaviour();
                        return resultMessage;
                    }
                }


            }

            resultMessage.DefaultSuccessBehaviour();
            return resultMessage;
        }

        public ResultMessage CheckIfPartyNetWtGreaterThanActualNetWt(TblConfigParamsTO partyNetWtTolConfigTO, TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            double tolVal = Convert.ToDouble(partyNetWtTolConfigTO.ConfigParamVal);
            double partyNetWt = 0;
            double actualNetWt = 0;
            try
            {
                TblPartyWeighingMeasuresTO partyWeighingMeasureTO = _iTblPartyWeighingMeasuresBL.SelectTblPartyWeighingMeasuresTOByPurSchedSummaryId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (partyWeighingMeasureTO != null)
                {
                    partyNetWt = partyWeighingMeasureTO.NetWt;
                }

                List<TblPurchaseWeighingStageSummaryTO> intermediteWtList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(scheduleSummaryTO.ActualRootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
                if (intermediteWtList != null)
                {
                    actualNetWt = intermediteWtList.Sum(a => a.NetWeightMT);
                }
                if (partyNetWt > 0 && actualNetWt > 0)
                {
                    double diff = partyNetWt - actualNetWt;

                    if (diff > tolVal)
                    {
                        //Send Notification
                        resultMessage = SendNotificationOfPartyWeighingDiff(scheduleSummaryTO, tolVal, diff, partyNetWt, actualNetWt, loginUserId);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            resultMessage.DefaultBehaviour();
                            return resultMessage;
                        }
                    }

                }
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CheckIfPartyNetWtGreaterThanActualNetWt(Int32 rootScheduleId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage SendNotificationOfPartyWeighingDiff(TblPurchaseScheduleSummaryTO scheduleSummaryTO, double tolVal, double diff, double partyNetWt, double actualNetWt, Int32 loginUserId)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                tblAlertUsersTOList = new List<TblAlertUsersTO>();
                string sourceEntityId = null;
                DateTime createdDate = _iCommonDAO.ServerDateTime;
                sourceEntityId = scheduleSummaryTO.ActualRootScheduleId.ToString();
                List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.PARTY_NET_WT_GREATER_THAN_ACTUAL_WT, sourceEntityId);

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(scheduleSummaryTO.PurchaseEnquiryId);
                if (enquiryTO != null && enquiryTO.UserId > 0)
                {
                    //{
                    //    TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                    //    tblAlertUsersTO.UserId = enquiryTO.UserId;
                    //    tblAlertUsersTO.RaisedOn = createdDate;
                    //    tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PARTY_NET_WT_GREATER_THAN_ACTUAL_WT;
                    //    tblAlertUsersTOList.Add(tblAlertUsersTO);
                    //}
                }

                tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PARTY_NET_WT_GREATER_THAN_ACTUAL_WT;
                tblAlertInstanceTO.AlertAction = "PARTY_NET_WT_GREATER_THAN_ACTUAL_WT";
                tblAlertInstanceTO.AlertComment = "Party net wt : " + partyNetWt + " and Actual net wt : " + actualNetWt + ". Diff : " + diff +
                                                  " Limit is : " + tolVal +
                                                   " For Vehicle No. : " + scheduleSummaryTO.VehicleNo;
                tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                tblAlertInstanceTO.EffectiveFromDate = createdDate;
                tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                tblAlertInstanceTO.IsActive = 1;
                tblAlertInstanceTO.SourceDisplayId = "PARTY_NET_WT_GREATER_THAN_ACTUAL_WT";
                tblAlertInstanceTO.SourceEntityId = scheduleSummaryTO.ActualRootScheduleId;
                tblAlertInstanceTO.RaisedBy = loginUserId;
                tblAlertInstanceTO.RaisedOn = createdDate;
                tblAlertInstanceTO.IsAutoReset = 1;

                ////Reset Prev alert of Vehicle Send In
                //AlertsToReset alertsToReset = new AlertsToReset();
                //alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                //ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                //resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SEND_IN;
                //resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                //alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                //tblAlertInstanceTO.AlertsToReset = alertsToReset;

                notification.SendNotificationToUsers(tblAlertInstanceTO);

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SendNotificationOfPartyWeighingDiff(double diff,double partyNetWt,double actualNetWt)");
                return resultMessage;
            }
        }

        public int InsertTareWt(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            int res = 1;
            List<TblPurchaseWeighingStageSummaryTO> tblPurchaseAllWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseScheduleSummaryTO.RootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
            if (tblPurchaseAllWeighingStageSummaryTOList != null && tblPurchaseAllWeighingStageSummaryTOList.Count > 0)
            {
                TblPurchaseWeighingStageSummaryTO PurchaseWeighingStageSummaryTO = tblPurchaseAllWeighingStageSummaryTOList[tblPurchaseAllWeighingStageSummaryTOList.Count - 1];
                TblPurchaseWeighingStageSummaryTO PurchaseWeighingStageSummaryTareWtTO = new TblPurchaseWeighingStageSummaryTO();

                PurchaseWeighingStageSummaryTareWtTO = PurchaseWeighingStageSummaryTO;
                PurchaseWeighingStageSummaryTareWtTO.GrossWeightMT = 0;
                PurchaseWeighingStageSummaryTareWtTO.NetWeightMT = 0;
                // PurchaseWeighingStageSummaryTareWtTO.WeightStageId = 0;
                PurchaseWeighingStageSummaryTareWtTO.WeightMeasurTypeId = (int)Constants.TransMeasureTypeE.TARE_WEIGHT;
                PurchaseWeighingStageSummaryTareWtTO.WeightStageId = PurchaseWeighingStageSummaryTareWtTO.WeightStageId + 1;

                List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehWtDetailsForWeighingMachine(tblPurchaseScheduleSummaryTO.RootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.TARE_WEIGHT).ToString(), PurchaseWeighingStageSummaryTareWtTO.WeighingMachineId.ToString(), conn, tran);
                if (tblPurchaseWeighingStageSummaryTOList == null || tblPurchaseWeighingStageSummaryTOList.Count == 0)
                {
                    TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryIoT = PurchaseWeighingStageSummaryTareWtTO.DeepCopy();
                    int confiqId = _iTblConfigParamsDAO.IoTSetting();
                    if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                    {
                        tblPurchaseWeighingStageSummaryIoT.ActualWeightMT = 0;
                        tblPurchaseWeighingStageSummaryIoT.NetWeightMT = 0;
                        tblPurchaseWeighingStageSummaryIoT.GrossWeightMT = 0;
                        tblPurchaseWeighingStageSummaryIoT.WeightMeasurTypeId = 0;
                        tblPurchaseWeighingStageSummaryIoT.VehicleNo = string.Empty;
                    }
                    res = _iTblPurchaseWeighingStageSummaryBL.InsertTblPurchaseWeighingStageSummary(tblPurchaseWeighingStageSummaryIoT, conn, tran);
                    if (res == 1)
                    {
                        PurchaseWeighingStageSummaryTareWtTO.IdPurchaseWeighingStage = tblPurchaseWeighingStageSummaryIoT.IdPurchaseWeighingStage;
                        //@Added by KKM for write weghing data on weight IoT 
                        if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                        {
                            List<int[]> frameList = _iIotCommunication.GenerateFrameData(tblPurchaseScheduleSummaryTO, PurchaseWeighingStageSummaryTareWtTO);
                            if (frameList != null && frameList.Count > 0)
                            {
                                for (int f = 0; f < frameList.Count; f++)
                                {
                                    TblWeighingMachineTO machineTO = _iTblWeighingMachineDAO.SelectTblWeighingMachine(tblPurchaseWeighingStageSummaryIoT.WeighingMachineId);
                                    if (machineTO == null)
                                    {
                                        return 0;
                                    }
                                    int result = _iWeighingCommunication.PostDataFrommodbusTcpApi(tblPurchaseScheduleSummaryTO, frameList[f], machineTO);
                                    if (result != 1)
                                    {
                                        return 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return res;
        }

        public ResultMessage CreateAndSaveVehUnloadingCompleteDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {

                TblPurchaseScheduleSummaryTO unloadingCompletedTO = scheduleSummaryTO.DeepCopy();
                unloadingCompletedTO.StatusId = (Int32)Constants.TranStatusE.UNLOADING_COMPLETED;
                unloadingCompletedTO.VehiclePhaseId = (Int32)Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED;
                unloadingCompletedTO.ParentPurchaseScheduleSummaryId = scheduleSummaryTO.IdPurchaseScheduleSummary;
                unloadingCompletedTO.IsUnloadingCompleted = 1;

                //Get details
                Int32 isGradingBeforeUnld = 0;

                List<TblPurchaseUnloadingDtlTO> purchaseUnloadingDtlToList = _iTblPurchaseUnloadingDtlBL.SelectAllTblPurchaseUnloadingDtlListByScheduleId(unloadingCompletedTO.ActualRootScheduleId, isGradingBeforeUnld, conn, tran);
                if (purchaseUnloadingDtlToList == null || purchaseUnloadingDtlToList.Count == 0)
                {
                    throw new Exception("purchaseUnloadingDtlToList == null");
                }

                List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsTOList = new List<TblPurchaseVehicleDetailsTO>();

                for (int i = 0; i < purchaseUnloadingDtlToList.Count; i++)
                {
                    TblPurchaseUnloadingDtlTO tblPurchaseUnloadingDtlTO = purchaseUnloadingDtlToList[i];
                    TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = new TblPurchaseVehicleDetailsTO();

                    tblPurchaseVehicleDetailsTO.ProdItemId = tblPurchaseUnloadingDtlTO.ProdItemId;
                    tblPurchaseVehicleDetailsTO.Qty = tblPurchaseUnloadingDtlTO.QtyMT;

                    scheduleItemDtlsTOList.Add(tblPurchaseVehicleDetailsTO);
                }

                //unloadingCompletedTO.PurchaseScheduleSummaryDetailsTOList = scheduleItemDtlsTOList;
                unloadingCompletedTO.PurchaseScheduleSummaryDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                resultMessage = SaveUnloadingCompletedDtls(unloadingCompletedTO, null, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {

                    //resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in CreateAndSaveVehUnloadingCompleteDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO , SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public int UpdateScheduleVehicleNoOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateScheduleVehicleNoOnly(tblPurchaseScheduleSummaryTO, conn, tran);
        }
        public int UpdateSpotEntryVehicleSupplier(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateSpotEntryVehicleSupplier(tblPurchaseVehicleSpotEntryTO, conn, tran);
        }

        public int UpdateTblPurchaseMaterialSample(TblPurchaseMaterialSampleTO tblPurchaseMaterialSampleTO, TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, bool isSendNotification)
        {

            #region Notification

            if (isSendNotification)
            {
                SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
                conn.Open();
                SqlTransaction tran = null;
                Int32 result = 0;
                ResultMessage resultMessage = new StaticStuff.ResultMessage();
                resultMessage.MessageType = ResultMessageE.None;

                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();


                //get purchase manager of supplier
                tblAlertUsersTOList = new List<TblAlertUsersTO>();
                List<DropDownTO> PurchaseManagerList = _iTblPurchaseManagerSupplierBL.GetPurchaseManagerListOfSupplierForDropDown(tblPurchaseScheduleSummaryTO.SupplierId, conn, tran);
                if (PurchaseManagerList != null && PurchaseManagerList.Count > 0)
                {
                    for (int k = 0; k < PurchaseManagerList.Count; k++)
                    {
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.RaisedOn = _iCommonDAO.ServerDateTime;
                        tblAlertUsersTO.UserId = PurchaseManagerList[k].Value;
                        tblAlertUsersTOList.Add(tblAlertUsersTO);
                    }
                }
                //tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_SAMPLEFLAG_BY_OUTSIDE_INSPECTOR;
                tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_SAMPLEFLAG_BY_OUTSIDE_INSPECTOR";
                tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + "- Quality flag raised";
                tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                tblAlertInstanceTO.IsActive = 1;
                tblAlertInstanceTO.SourceDisplayId = "Quality flag raised";
                tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.IsAutoReset = 1;
                ResultMessage rMessage = _itblalertinstancebl.SaveNewAlertInstance(tblAlertInstanceTO, conn, tran);
                if (rMessage.MessageType != ResultMessageE.Information)
                {
                    tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Sorry..Record Could not be saved.";
                    resultMessage.Text = "Error While Generating Notification";
                }
            }


            #endregion
            return _iTblPurchaseVehicleMaterialSampleDAO.InserttblPurchaseMaterialSample(tblPurchaseMaterialSampleTO);
        }

        public int UpdateTblPurchaseScheduleSummary(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
        }

        public int UpdateTblPurchaseScheduleSummaryStatusOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummaryStatusOnly(tblPurchaseScheduleSummaryTO, conn, tran);
        }
        public int UpdatePurchaseScheduleCalculationDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdatePurchaseScheduleCalculationDtls(tblPurchaseScheduleSummaryTO, conn, tran);
        }
        public int UpdateIsActiveOnly(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateIsActiveOnly(tblPurchaseScheduleSummaryTO, conn, tran);
        }

        public int UpdateTblPurchaseScheduleSummaryCommercialApproval(Int32 rootScheduleId, Int32 CommercialApproval, Int32 CommercialVerified, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummaryCommercialApproval(rootScheduleId, CommercialApproval, CommercialVerified, conn, tran);
        }

        public int UpdateModbusRefPurchaseSchedule(Int32 rootScheduleId, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateModbusRefPurchaseSchedule(rootScheduleId, conn, tran);
        }

        public int UpdateCorNcIdOfVehicle(TblPurchaseScheduleSummaryTO scheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateCorNcIdOfVehicle(scheduleSummaryTO, conn, tran);
        }

        #endregion

        #region Deletion
        public int DeleteTblPurchaseScheduleSummary(Int32 idPurchaseScheduleSummary)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseScheduleSummary(idPurchaseScheduleSummary);
        }

        public int DeleteTblPurchaseScheduleSummary(Int32 idPurchaseScheduleSummary, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseScheduleSummary(idPurchaseScheduleSummary, conn, tran);
        }

        #endregion


        public ResultMessage CheckIfVehicleScheduleAlreadyExits(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran, Int32 count)
        {
            ResultMessage resultMessage = new ResultMessage();

            Int32 rootScheduleId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

            //Saket [2019-04-01] As their are two entris for correction for both.
            if (tblPurchaseScheduleSummaryTO.IsBoth == 1 && count == 1)
            {
                if (tblPurchaseScheduleSummaryTO.IsCorrectionCompleted == 1 && tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS)))
                {
                    count = 2;
                }
            }

            //List<TblPurchaseScheduleSummaryTO> alreadyExitsScheduleList = SelectVehicleScheduleByRootAndStatusId(rootScheduleId, tblPurchaseScheduleSummaryTO.StatusId, tblPurchaseScheduleSummaryTO.VehiclePhaseId, conn, tran);

            Int32 statusId = tblPurchaseScheduleSummaryTO.StatusId;
            Int32 alreadyExistVehCount = 0;

            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();

            if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.IoT)
            {
                if (count != 1 && statusId != (Int32)Constants.TranStatusE.VEHICLE_OUT)
                    alreadyExistVehCount = CheckVehAlreadyExitsForIOT(tblPurchaseScheduleSummaryTO, conn, tran);
            }
            else
            {
                alreadyExistVehCount = SelectVehicleScheduleByRootAndStatusIdCount(rootScheduleId, statusId, tblPurchaseScheduleSummaryTO.VehiclePhaseId, conn, tran);
            }

            if (alreadyExistVehCount != -1 && alreadyExistVehCount <= count)
            {
                resultMessage.MessageType = ResultMessageE.Information;
                resultMessage.Result = 1;
                resultMessage.Text = "Success";
                return resultMessage;
            }
            else
            {
                string statusDesc = GetVehicleStatus(tblPurchaseScheduleSummaryTO);
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.Result = 200;
                resultMessage.Text = statusDesc;
                resultMessage.DisplayMessage = statusDesc;
                return resultMessage;
            }

        }

        public Int32 CheckVehAlreadyExitsForIOT(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            Int32 alreadyExistVehCount = 0;

            List<TblPurchaseScheduleSummaryTO> alreadyExitsScheduleList = SelectVehicleScheduleByRootAndStatusId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, 0, 0, conn, tran);
            if (alreadyExitsScheduleList != null && alreadyExitsScheduleList.Count > 0)
            {
                if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)
                {
                    var res = alreadyExitsScheduleList.Where(a => a.IsUnloadingCompleted == 1).ToList();
                    if (res != null && res.Count > 0)
                    {
                        alreadyExistVehCount = 2;
                    }
                }
                else if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING)
                {
                    var res = alreadyExitsScheduleList.Where(a => a.IsGradingCompleted == 1).ToList();
                    if (res != null && res.Count > 0)
                    {
                        alreadyExistVehCount = 2;
                    }
                }
                else if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY)
                {
                    var res = alreadyExitsScheduleList.Where(a => a.IsRecovery == 1).ToList();
                    if (res != null && res.Count > 0)
                    {
                        alreadyExistVehCount = 2;
                    }
                }
                else if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)
                {
                    var res = alreadyExitsScheduleList.Where(a => a.IsCorrectionCompleted == 1).ToList();
                    if (res != null && res.Count > 0)
                    {
                        alreadyExistVehCount = 2;
                    }
                }

            }

            return alreadyExistVehCount;
        }

        public ResultMessage CheckVehicleIsAlreadyInPremisesForIOT(TblPurchaseScheduleSummaryTO scheduleSummaryTO, String vehicleNumber)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                if (scheduleSummaryTO != null)
                {
                    vehicleNumber = scheduleSummaryTO.VehicleNo;
                }

                string vehicleNo = _iIotCommunication.GetVehicleNumbers(vehicleNumber, true);

                DateTime fromDate = DateTime.MinValue;
                DateTime toDate = DateTime.MinValue;
                String statusId = Convert.ToInt32(Constants.TranStatusE.New).ToString();

                List<TblPurchaseScheduleSummaryTO> alreadyExitsVehList = SelectAllReportedVehicleDetailList(fromDate, toDate, statusId, 0, Convert.ToInt32(Constants.ShowListE.ALL), 0, 0);

                if (alreadyExitsVehList != null && alreadyExitsVehList.Count > 0)
                {
                    if (scheduleSummaryTO != null && scheduleSummaryTO.ModbusRefId > 0)
                    {
                        alreadyExitsVehList = alreadyExitsVehList.Where(a => a.ModbusRefId != scheduleSummaryTO.ModbusRefId).ToList();
                    }

                    if (alreadyExitsVehList != null && alreadyExitsVehList.Count > 0)
                    {
                        List<TblPurchaseScheduleSummaryTO> distGate = alreadyExitsVehList.GroupBy(g => g.GateId).Select(s => s.FirstOrDefault()).ToList();

                        GateIoTResult gateIoTResult = new GateIoTResult();
                        //GetIotEncodedStatusIdsForGivenStatus for DB status To IoT status
                        string finalStatusId = _iIotCommunication.GetIotEncodedStatusIdsForGivenStatus(statusId);
                        for (int g = 0; g < distGate.Count; g++)
                        {
                            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTOTemp = distGate[g];
                            TblGateTO tblGateTO = new TblGateTO(tblPurchaseScheduleSummaryTOTemp.GateId, tblPurchaseScheduleSummaryTOTemp.IoTUrl, tblPurchaseScheduleSummaryTOTemp.MachineIP, tblPurchaseScheduleSummaryTOTemp.PortNumber);
                            GateIoTResult statusWiseData = _iIotCommunication.GetLoadingSlipsByStatusFromIoTByStatusId(finalStatusId, tblGateTO);

                            if (statusWiseData != null && statusWiseData.Data != null)
                            {
                                gateIoTResult.Data.AddRange(statusWiseData.Data);
                            }
                        }
                        if (gateIoTResult != null && gateIoTResult.Data != null)
                        {
                            List<DimStatusTO> statusList = _iDimStatusDAO.SelectAllDimStatus((Int32)Constants.txnTypeEnum.SCRAP_VEHICLE_SCHEDULE);
                            for (int d = 0; d < alreadyExitsVehList.Count; d++)
                            {
                                var data = gateIoTResult.Data.Where(w => Convert.ToInt32(w[0]) == alreadyExitsVehList[d].ModbusRefId).FirstOrDefault();
                                if (data != null)
                                {
                                    alreadyExitsVehList[d].VehicleNo = _iIotCommunication.GetVehicleNumbers(Convert.ToString(data[(int)IoTConstants.GateIoTColE.VehicleNo]), true);
                                    DimStatusTO dimStatusTO = statusList.Where(w => w.IotStatusId == Convert.ToInt32(data[(int)IoTConstants.GateIoTColE.StatusId])).FirstOrDefault();
                                    if (dimStatusTO != null)
                                    {
                                        alreadyExitsVehList[d].StatusId = dimStatusTO.IdStatus;
                                        alreadyExitsVehList[d].StateName = dimStatusTO.StatusName;
                                        alreadyExitsVehList[d].StatusDesc = dimStatusTO.StatusDesc;
                                        alreadyExitsVehList[d].ColorCode = dimStatusTO.ColorCode;
                                        dimStatusTO = GetNextStatusTO(dimStatusTO.IdStatus, statusList, 1);
                                        if (dimStatusTO != null)
                                        {
                                            alreadyExitsVehList[d].PreviousStatusId = dimStatusTO.IdStatus;
                                            alreadyExitsVehList[d].PreviousStatusName = dimStatusTO.StatusName;
                                        }
                                    }

                                }

                            }
                        }

                        String statusIdStr = Convert.ToInt32(Constants.TranStatusE.New) + "," + Convert.ToInt32(Constants.TranStatusE.VEHICLE_OUT) + "," + Convert.ToInt32(Constants.TranStatusE.DELETE_VEHICLE)
               //Prajakta[2019-05-13] Added
               + "," + Convert.ToInt32(Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING)
               + "," + Convert.ToInt32(Constants.TranStatusE.VEHICLE_REJECTED_BEFORE_WEIGHING)
               + "," + Convert.ToInt32(Constants.TranStatusE.REJECTED_VEHICLE_OUT)
               + "," + Convert.ToInt32(Constants.TranStatusE.VEHICLE_REJECTED_AFTER_GROSS_WEIGHT)
               + "," + Convert.ToInt32(Constants.TranStatusE.VEHICLE_CANCELED);

                        alreadyExitsVehList = alreadyExitsVehList.Where(a => !statusIdStr.Contains(a.StatusId.ToString())).ToList();
                        if (alreadyExitsVehList != null && alreadyExitsVehList.Count > 0)
                        {
                            TblPurchaseScheduleSummaryTO alreadyExitVehTO = alreadyExitsVehList.Where(a => a.VehicleNo.ToUpper() == vehicleNo.ToUpper()).FirstOrDefault();
                            if (alreadyExitVehTO != null)
                            {
                                resultMessage.MessageType = ResultMessageE.Error;
                                resultMessage.Result = 0;
                                resultMessage.DisplayMessage = "Vehicle is already entered in premises.";
                                resultMessage.Text = "Vehicle is already entered in premises.";
                                return resultMessage;
                            }
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CheckVehicleIsAlreadyInPremisesForIOT(TblPurchaseScheduleSummaryTO scheduleSummaryTO)");
                return resultMessage;
            }
        }

        //public ResultMessage MakeIsActiveForVehicleOutOnly(TblPurchaseScheduleSummaryTO scheduleSummaryTO,SqlConnection conn,SqlTransaction tran)
        //{
        //    ResultMessage resultMessage = new ResultMessage();
        //    try
        //    {
        //        if(scheduleSummaryTO == null)
        //        {
        //            throw new Exception("scheduleSummaryTO == NULL");
        //        }

        //        List<TblPurchaseScheduleSummaryTO> alreadyExitsScheduleList = SelectVehicleScheduleByRootAndStatusId(scheduleSummaryTO.ActualRootScheduleId, 0, 0, conn, tran);
        //        if(alreadyExitsScheduleList != null && alreadyExitsScheduleList.Count > 0)
        //        {
        //            List<TblPurchaseScheduleSummaryTO> isActiveList = alreadyExitsScheduleList.Where(a => a.IsActive == 1).ToList();
        //            if(isActiveList != null && isActiveList.Count > 0)
        //            {

        //            }

        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        resultMessage.DefaultExceptionBehaviour(ex, "Error in MakeIsActiveForVehicleOutOnly()");
        //        return resultMessage;
        //    }
        //}

        public ResultMessage IsVehicleAlreadyInPremises(TblPurchaseScheduleSummaryTO scheduleSummaryTO, String vehicleNo)
        {
            ResultMessage resultMessage = new ResultMessage();
            Boolean isForBRM = false;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();

            try
            {
                if (String.IsNullOrEmpty(vehicleNo))
                {
                    if (scheduleSummaryTO != null)
                    {
                        vehicleNo = scheduleSummaryTO.VehicleNo;
                    }
                }

                if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.IoT)
                {
                    resultMessage = CheckVehicleIsAlreadyInPremisesForIOT(scheduleSummaryTO, vehicleNo);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }
                }

                if (scheduleSummaryTO == null)
                {
                    List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = GetPurchaseScheduleSummaryTOByVehicleNo(vehicleNo, 0);
                    if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.Result = 0;
                        resultMessage.DisplayMessage = "Vehicle is already entered in premises.";
                        resultMessage.Text = "Vehicle is already entered in premises.";
                        return resultMessage;
                    }
                }

                if (scheduleSummaryTO != null)
                {
                    List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();

                    int transactionTypeId = (int)PurchaseTrackerAPI.StaticStuff.Constants.TransactionTypeE.SAUDA;
                    List<DimStatusTO> dimStatusList = _iDimStatusBL.SelectAllDimStatusList(transactionTypeId);

                    DimStatusTO dimStatusTO = new DimStatusTO();
                    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
                    if (tblConfigParamsTO != null && Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 1)
                    {
                        isForBRM = true;

                        if (scheduleSummaryTO.COrNcId == 1)
                            dimStatusTO = GetNextStatusTO(scheduleSummaryTO.CurrentStatusId, dimStatusList, 1);
                        else
                            dimStatusTO = GetNextStatusTO(scheduleSummaryTO.CurrentStatusId, dimStatusList, 2);
                    }
                    else
                    {
                        dimStatusTO = GetNextStatusTO(Convert.ToInt32(Constants.TranStatusE.New), dimStatusList, 1);
                    }

                    if (dimStatusTO != null)
                    {
                        if (scheduleSummaryTO.StatusId == dimStatusTO.IdStatus)
                        {
                            tblPurchaseScheduleSummaryTOList = GetPurchaseScheduleSummaryTOByVehicleNo(scheduleSummaryTO.VehicleNo, scheduleSummaryTO.ActualRootScheduleId);
                            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                            {
                                resultMessage.MessageType = ResultMessageE.Error;
                                resultMessage.Result = 0;
                                resultMessage.DisplayMessage = "Vehicle is already entered in premises.";
                                resultMessage.Text = "Vehicle is already entered in premises.";
                                return resultMessage;
                            }
                        }
                    }
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in IsVehicleAlreadyInPremises(TblPurchaseScheduleSummaryTO scheduleSummaryTO,String vehicleNo)");
                return resultMessage;
            }
        }

        public Boolean CheckIfVehicleIsOut(Int32 weightSourceConfigId, TblPurchaseScheduleSummaryTO scheduleSummaryTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            Boolean isVehicleOut = false;

            if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.DB)
            {
                List<TblPurchaseScheduleSummaryTO> scheduleList = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(scheduleSummaryTO.ActualRootScheduleId, false);
                if (scheduleList != null && scheduleList.Count > 0)
                {
                    TblPurchaseScheduleSummaryTO vehicleOutTO = scheduleList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT).FirstOrDefault();
                    if (vehicleOutTO != null)
                    {
                        isVehicleOut = true;
                    }
                }
            }
            else
            {
                Int32 originalStatusId = scheduleSummaryTO.StatusId;
                string orginalVehNo = scheduleSummaryTO.VehicleNo;
                scheduleSummaryTO = _iIotCommunication.GetItemDataFromIotAndMerge(scheduleSummaryTO);
                if (scheduleSummaryTO != null && scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT)
                {
                    isVehicleOut = true;
                }
                scheduleSummaryTO.StatusId = originalStatusId;
                scheduleSummaryTO.VehicleNo = orginalVehNo;
            }

            return isVehicleOut;


        }

        public ResultMessage IsVehicleAlreadyInPremisesForDBAndIOT(TblPurchaseScheduleSummaryTO scheduleSummaryTO, String vehicleNo, Boolean isFirstTm)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {

                int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();

                if (scheduleSummaryTO != null)
                {
                    Boolean isVehicleOut = CheckIfVehicleIsOut(weightSourceConfigId, scheduleSummaryTO);
                    if (isVehicleOut)
                    {
                        resultMessage.DefaultSuccessBehaviour();
                        return resultMessage;
                    }
                }


                if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.DB)
                {
                    List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = GetPurchaseScheduleSummaryTOByVehicleNo(vehicleNo, 0);
                    if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                    {
                        if (!isFirstTm && scheduleSummaryTO != null)
                        {
                            tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.ActualRootScheduleId != scheduleSummaryTO.ActualRootScheduleId).ToList();
                        }

                        if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                        {
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Result = 0;
                            resultMessage.DisplayMessage = "Vehicle is already entered in premises.";
                            resultMessage.Text = "Vehicle is already entered in premises.";
                            return resultMessage;
                        }
                    }
                }
                else if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.IoT)
                {
                    resultMessage = CheckVehicleIsAlreadyInPremisesForIOT(scheduleSummaryTO, vehicleNo);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in IsVehicleAlreadyInPremisesForDBAndIOT(TblPurchaseScheduleSummaryTO scheduleSummaryTO, String vehicleNo)");
                return resultMessage;
            }
        }

        public ResultMessage UpdateVehicleRejetAfterGrossWtStatus(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {

                result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO,conn,tran);");
                }

                int deleteResult = RemoveDateFromGateAndWeightIOT(tblPurchaseScheduleSummaryTO);
                if (deleteResult != 1)
                {
                    throw new Exception("Error While RemoveDateFromGateAndWeightIOT ");
                }

                tblPurchaseScheduleSummaryTO.ModbusRefId = 0;
                result = UpdateModbusRefPurchaseSchedule(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in UpdateTblPurchaseScheduleSummary(tempScheduleTO, conn, tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateVehicleRejetAfterGrossWtStatus(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage InsertMaterailItemDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean isItemChange, Boolean isSendNotification, DateTime currentdate)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;
            string padtaApprovalMsg = "";
            Boolean isForBRM = false;
            int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
            //DateTime serverDateTime =  _iCommonDAO.ServerDateTime;
            try
            {
                if (tblPurchaseScheduleSummaryTO.RootScheduleId == 0)
                    tblPurchaseScheduleSummaryTO.RootScheduleId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

                TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
                if (tblConfigParamsTO != null && Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 1)
                {
                    isForBRM = true;

                }
                #region Check the Vehicle is already in premises.

                //if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.IoT)
                //{
                //    resultMessage = CheckVehicleIsAlreadyInPremisesForIOT(tblPurchaseScheduleSummaryTO.VehicleNo);
                //    if(resultMessage.MessageType != ResultMessageE.Information)
                //    {
                //        return resultMessage;
                //    }
                //}
                //else
                //{
                //    List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();

                //    int transactionTypeId = (int)PurchaseTrackerAPI.StaticStuff.Constants.TransactionTypeE.SAUDA;
                //    List<DimStatusTO> dimStatusList = _iDimStatusBL.SelectAllDimStatusList(transactionTypeId);

                //    DimStatusTO dimStatusTO = new DimStatusTO();
                //    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
                //    if (tblConfigParamsTO != null && Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 1)
                //    {
                //        isForBRM = true;

                //        if (tblPurchaseScheduleSummaryTO.COrNcId == 1)
                //            dimStatusTO = GetNextStatusTO(tblPurchaseScheduleSummaryTO.CurrentStatusId, dimStatusList, 1);
                //        else
                //            dimStatusTO = GetNextStatusTO(tblPurchaseScheduleSummaryTO.CurrentStatusId, dimStatusList, 2);
                //    }
                //    else
                //    {
                //        dimStatusTO = GetNextStatusTO(Convert.ToInt32(Constants.TranStatusE.New), dimStatusList, 1);
                //    }
                //    if (dimStatusTO != null)
                //    {
                //        if (tblPurchaseScheduleSummaryTO.StatusId == dimStatusTO.IdStatus)
                //        {
                //            tblPurchaseScheduleSummaryTOList = GetPurchaseScheduleSummaryTOByVehicleNo(tblPurchaseScheduleSummaryTO.VehicleNo, tblPurchaseScheduleSummaryTO.ActualRootScheduleId);
                //            //@KKM Added for IoT to avoid check Vehicle is already entered in premises
                //            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0 && weightSourceConfigId != (int)StaticStuff.Constants.WeighingDataSourceE.IoT)
                //            {
                //                resultMessage.MessageType = ResultMessageE.Error;
                //                resultMessage.Result = 0;
                //                resultMessage.DisplayMessage = "Vehicle is already entered in premises.";
                //                resultMessage.Text = "Vehicle is already entered in premises.";
                //                return resultMessage;
                //            }
                //        }
                //    }
                //}

                //Commented temp
                //resultMessage = IsVehicleAlreadyInPremises(tblPurchaseScheduleSummaryTO, null);

                resultMessage = IsVehicleAlreadyInPremisesForDBAndIOT(tblPurchaseScheduleSummaryTO, tblPurchaseScheduleSummaryTO.VehicleNo, false);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }
                #endregion

                #region  Check if vehicle's commercial approval is complete or not for generic cycle

                TblConfigParamsTO commerApprovalConfigParamTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_MAKE_COMMERCIAL_APPROVAL_MANDATORY);
                if (commerApprovalConfigParamTO != null && commerApprovalConfigParamTO.ConfigParamVal == "1")
                {
                    if (!isForBRM
                    && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
                    && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED
                    && tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM
                    )
                    {
                        if (tblPurchaseScheduleSummaryTO.CommercialApproval == 0)
                        {
                            resultMessage.MessageType = ResultMessageE.Information;
                            resultMessage.Result = 1;
                            resultMessage.DisplayMessage = "Please complete commercial details for vehicle no : " + tblPurchaseScheduleSummaryTO.VehicleNo;
                            resultMessage.Text = "Vehicle is already entered in premises.";
                            return resultMessage;
                        }
                    }
                }

                #endregion



                #region Check if all flags are completed
                if (tblPurchaseScheduleSummaryTO.ForSaveOrSubmit > 0 || tblPurchaseScheduleSummaryTO.VehiclePhaseId != (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && isForBRM)
                {
                    int res = 0;
                    //int idSummary = tblPurchaseScheduleSummaryTO.RootScheduleId > 0 ? tblPurchaseScheduleSummaryTO.RootScheduleId : tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    int idSummary = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    resultMessage = CheckIfAllQualityFlagsAreCompleted(idSummary, tblPurchaseScheduleSummaryTO.VehiclePhaseId);
                    if (resultMessage.Result > 0)
                    {
                        return resultMessage;
                    }
                }
                #endregion


                conn.Open();
                tran = conn.BeginTransaction();

                #region check if vehicle current status is already updated
                if (tblPurchaseScheduleSummaryTO.StatusId != (Int32)Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED && tblPurchaseScheduleSummaryTO.StatusId != (Int32)Constants.TranStatusE.CORRECTION_DETAILS_SAVED)
                {
                    if (tblPurchaseScheduleSummaryTO.IsIgnoreApproval != 1 && tblPurchaseScheduleSummaryTO.IsLatest != 1)
                    {
                        Int32 count = 0;
                        resultMessage = CheckIfVehicleScheduleAlreadyExits(tblPurchaseScheduleSummaryTO, conn, tran, count);
                        if (resultMessage.MessageType == ResultMessageE.Error)
                        {
                            return resultMessage;
                        }
                    }
                }

                #endregion


                TblPurchaseScheduleSummaryTO beforeUpdateTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, true, conn, tran);
                if (beforeUpdateTO == null)
                {
                    throw new Exception("Latest active TO not found against vehicle Id - " + tblPurchaseScheduleSummaryTO.ActualRootScheduleId);
                }

                if (beforeUpdateTO.ReportedDate == new DateTime())
                    tblPurchaseScheduleSummaryTO.ReportedDate = _iCommonDAO.ServerDateTime;



                resultMessage = saveData(tblPurchaseScheduleSummaryTO, isItemChange, isSendNotification, currentdate, ref padtaApprovalMsg, conn, tran);

                #region Update MaterialType

                _iTblPurchaseScheduleSummaryDAO.UpdateMaterialTypeId(tblPurchaseScheduleSummaryTO, conn, tran);

                #endregion

                #region Update SupplierId
                _iTblPurchaseScheduleSummaryDAO.UpdateSupplierId(tblPurchaseScheduleSummaryTO, conn, tran);
                TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (spotVehicleTO != null)
                {
                    spotVehicleTO.SupplierId = tblPurchaseScheduleSummaryTO.SupplierId;
                    result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);");
                    }
                }
                #endregion


                if (resultMessage.MessageType == ResultMessageE.Information)
                {

                    //Update status to db for vehicle reject after gross wt and remove from iot
                    if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.IoT
                        && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_GROSS_WEIGHT)
                    {
                        resultMessage = UpdateVehicleRejetAfterGrossWtStatus(tblPurchaseScheduleSummaryTO, conn, tran);
                    }


                    // Prajakta[2019 - 02 - 13] Commented and can be used while auto inserting Recovery record
                    // Sachin Khune[2020 - 06 - 05] Uncommented.. used while auto submit Recovery record
                    //Prajakta[2020-06-20] Commented to check vehicle type change while recovery submit

                    TblConfigParamsTO isAutoSubmitRecTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_AUTO_SUBMIT_RECOVERY_DTLS);
                    if (isAutoSubmitRecTO != null && isAutoSubmitRecTO.ConfigParamVal.ToString() == "1"
                        && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING && isForBRM)
                    //if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING)
                    {
                        TblPurchaseScheduleSummaryTO gradingScheduleTO = null;
                        TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO = null;
                        Boolean tempIsItemChange = true;
                        Boolean tempIsSendNotification = false;
                        resultMessage = SaveScheduleRecoveryDtls(tblPurchaseScheduleSummaryTO, gradingScheduleTO, weighingStageSummaryTO, tempIsItemChange, tempIsSendNotification, currentdate, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            throw new Exception("Error in SaveScheduleRecoveryDtls()");
                        }
                        //added sachin khune [2020-06-05] to get recovery submited details.
                        if (resultMessage.Tag != null)
                        {
                            tblPurchaseScheduleSummaryTO = (TblPurchaseScheduleSummaryTO)resultMessage.Tag;
                        }

                    }

                    #region For Both Spliting
                    if (tblPurchaseScheduleSummaryTO.IsBoth == 1 && !isForBRM && tblPurchaseScheduleSummaryTO.COrNcId
                        == (Int32)Constants.ConfirmTypeE.NONCONFIRM && tblPurchaseScheduleSummaryTO.InvoiceQty > 0
                        && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                    {
                        tblPurchaseScheduleSummaryTO.COrNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                        result = _iTblPurchaseScheduleSummaryDAO.UpdateCorNcIdForBothVehicle(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result == -1)
                        {
                            throw new Exception("Error in UpdateCorNcIdForBothVehicle(tblPurchaseScheduleSummaryTO, conn, tran)");
                        }
                    }

                    if (tblPurchaseScheduleSummaryTO.IsBoth == 1 && !isForBRM && tblPurchaseScheduleSummaryTO.COrNcId
                       == (Int32)Constants.ConfirmTypeE.CONFIRM && tblPurchaseScheduleSummaryTO.InvoiceQty == 0
                       && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                    {
                        tblPurchaseScheduleSummaryTO.COrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                        result = _iTblPurchaseScheduleSummaryDAO.UpdateCorNcIdForBothVehicle(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result == -1)
                        {
                            throw new Exception("Error in UpdateCorNcIdForBothVehicle(tblPurchaseScheduleSummaryTO, conn, tran)");
                        }
                    }

                    if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS &&
                    tblPurchaseScheduleSummaryTO.IsCorrectionCompleted == 1 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                    {


                        if (tblPurchaseScheduleSummaryTO.IsBoth == 1)
                        {

                            //List<TblPurchaseScheduleSummaryTO> scheduleTOList = SelectAllEnquiryScheduleSummaryTOByRootId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, conn, tran);
                            //if (scheduleTOList != null && scheduleTOList.Count > 0)
                            //{
                            //    scheduleTOList = scheduleTOList.Where(a => a.IsActive == 1).ToList();
                            //    if (scheduleTOList != null && scheduleTOList.Count == 1)
                            //    {
                            //        if (scheduleTOList[0].StatusId == tblPurchaseScheduleSummaryTO.StatusId)
                            //        {
                            //            resultMessage = SaveScheduleDtlsAsPerCorNC(tblPurchaseScheduleSummaryTO, true, conn, tran);
                            //            if (resultMessage.MessageType != ResultMessageE.Information)
                            //            {
                            //                throw new Exception("Error in SaveScheduleDtlsAsPerCorNC(tblPurchaseScheduleSummaryTO,conn,tran);");
                            //            }
                            //        }
                            //    }
                            //}

                            if (beforeUpdateTO.IsCorrectionCompleted == 0)
                            {
                                TblPurchaseScheduleSummaryTO afteUpdateTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, true, conn, tran);
                                if (afteUpdateTO == null)
                                {
                                    throw new Exception("Latest active TO not found against vehicle Id - " + tblPurchaseScheduleSummaryTO.ActualRootScheduleId);
                                }

                                if (afteUpdateTO.IsCorrectionCompleted == 1)
                                {
                                    resultMessage = SaveScheduleDtlsAsPerCorNC(tblPurchaseScheduleSummaryTO, true, conn, tran);
                                    if (resultMessage.MessageType != ResultMessageE.Information)
                                    {
                                        throw new Exception("Error in SaveScheduleDtlsAsPerCorNC(tblPurchaseScheduleSummaryTO,conn,tran);");
                                    }
                                }
                                //Select both correction saved records

                                TblConfigParamsTO isSaveUnldDateCorrectionDtlsTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IS_SAVE_UNLD_DATE_CORRECTION_DTLS, conn, tran);
                                {
                                    if (isSaveUnldDateCorrectionDtlsTO != null && Convert.ToInt32(isSaveUnldDateCorrectionDtlsTO.ConfigParamVal) == 1)
                                    {

                                        List<TblPurchaseScheduleSummaryTO> correctionCompleList = SelectVehicleScheduleByRootAndStatusId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, (Int32)Constants.TranStatusE.UNLOADING_COMPLETED, (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS, conn, tran);
                                        if (correctionCompleList != null && correctionCompleList.Count > 0)
                                        {
                                            for (int p = 0; p < correctionCompleList.Count; p++)
                                            {

                                                if (correctionCompleList[p].PurchaseScheduleSummaryDetailsTOList == null || correctionCompleList[p].PurchaseScheduleSummaryDetailsTOList.Count == 0)
                                                {
                                                    Boolean isGetGradeExpDtls = true;
                                                    correctionCompleList[p].PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(correctionCompleList[p].IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                                                }

                                                resultMessage = CalAndSaveBaseMetalComparisonDtls(correctionCompleList[p], conn, tran);
                                                if (resultMessage.MessageType != ResultMessageE.Information)
                                                {
                                                    throw new Exception("Error in CalAndSaveBaseMetalComparisonDtls(tblPurchaseScheduleSummaryTO,conn,tran);");
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            TblConfigParamsTO isSaveUnldDateCorrectionDtlsTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IS_SAVE_UNLD_DATE_CORRECTION_DTLS, conn, tran);
                            if (isSaveUnldDateCorrectionDtlsTO != null && Convert.ToInt32(isSaveUnldDateCorrectionDtlsTO.ConfigParamVal) == 1)
                            {
                                //Prajakta[2019-08-20] Added to save correction details as per unloading date padta
                                if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList == null || tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count == 0)
                                {
                                    Boolean isGetGradeExpDtls = true;
                                    tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                                }

                                resultMessage = CalAndSaveBaseMetalComparisonDtls(tblPurchaseScheduleSummaryTO, conn, tran);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    throw new Exception("Error in CalAndSaveBaseMetalComparisonDtls(tblPurchaseScheduleSummaryTO,conn,tran);");
                                }
                            }

                        }

                    }

                    #endregion


                    #region check if vehicle current status is already updated
                    if (tblPurchaseScheduleSummaryTO.StatusId != (Int32)Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED && tblPurchaseScheduleSummaryTO.StatusId != (Int32)Constants.TranStatusE.CORRECTION_DETAILS_SAVED)
                    {
                        if (tblPurchaseScheduleSummaryTO.IsIgnoreApproval != 1 && tblPurchaseScheduleSummaryTO.IsLatest != 1)
                        {
                            resultMessage = CheckIfVehicleScheduleAlreadyExits(tblPurchaseScheduleSummaryTO, conn, tran, 1);
                            if (resultMessage.MessageType == ResultMessageE.Error)
                            {
                                return resultMessage;
                            }
                        }

                    }

                    #endregion


                    int isSAPEnabled = _iTblConfigParamsDAO.IsSAPEnabled();
                    // Create PO with GRR for purchase invoice
                    //TblConfigParamsTO sapServiceEnable = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.SAPB1_SERVICES_ENABLE, conn, tran);
                    if (isSAPEnabled == 1 && tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM
                        && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS &&
                        tblPurchaseScheduleSummaryTO.IsCorrectionCompleted == 1 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                    {
                        resultMessage = _iCircularDependancyBL.CreatePurchaseInvoicePOWithGRR(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            return resultMessage;
                        }
                    }
                    if (isForBRM == true)
                    {
                        bool isForApproval = false;
                        List<TblPurchaseScheduleStatusHistoryTO> HistoryTOListforCorrectionHistorySave = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, false, isForApproval, tblPurchaseScheduleSummaryTO.StatusId, conn, tran);
                        if (HistoryTOListforCorrectionHistorySave != null && HistoryTOListforCorrectionHistorySave.Count > 0)
                        {
                            List<TblPurchaseScheduleStatusHistoryTO> HistoryTOListforCorrectionHistorySaveTemp = HistoryTOListforCorrectionHistorySave
                                .Where(w => w.IsIgnoreApproval == 0).ToList();
                            if (HistoryTOListforCorrectionHistorySaveTemp != null && HistoryTOListforCorrectionHistorySaveTemp.Count > 0)
                            {
                                HistoryTOListforCorrectionHistorySaveTemp[0].IsActive = 1;
                                HistoryTOListforCorrectionHistorySaveTemp[0].UpdatedOn = _iCommonDAO.ServerDateTime;
                                var Resultid = _iTblPurchaseScheduleStatusHistoryBL.UpdateTblPurchaseScheduleStatusHistory(HistoryTOListforCorrectionHistorySaveTemp[0], conn, tran);
                            }
                        }
                    }

                    tran.Commit();


                    #region Notification

                    ResultMessage temp = NotifyStatusChangeAgainstVehicle(tblPurchaseScheduleSummaryTO, isSendNotification, currentdate);

                    #endregion


                    resultMessage.Result = 1;
                    resultMessage.MessageType = ResultMessageE.Information;

                    if (string.IsNullOrEmpty(padtaApprovalMsg))
                    {
                        resultMessage.Text = "Submitted Successfully.";
                        resultMessage.DisplayMessage = "Submitted Successfully.";
                    }
                    else
                    {
                        resultMessage.Text = "Vehicle No : " + tblPurchaseScheduleSummaryTO.VehicleNo + " sent for approval.";
                        resultMessage.DisplayMessage = "Vehicle No : " + tblPurchaseScheduleSummaryTO.VehicleNo + " sent for approval.";
                    }
                    return resultMessage;
                }
                else
                {
                    tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Failed to update. Kindly refresh and try again";
                    resultMessage.DisplayMessage = "Failed to update. Kindly refresh and try again";
                    return resultMessage;
                }

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "InsertMaterailItemDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean isItemChange, Boolean isSendNotification, DateTime currentdate)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }

        }


        public ResultMessage SaveScheduleRecoveryDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseScheduleSummaryTO gradingScheduleTO, TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO, Boolean isItemChange, Boolean isSendNotification, DateTime currentdate, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeGradingTO = true;
                var weighingDtlsList = CustomCheckIsRecoveryAndGradingCompleted(tblPurchaseScheduleSummaryTO, ref gradingScheduleTO, isTakeGradingTO, conn, tran);

                Boolean IsRecConfirm = false;
                int recoveryBy = 0;
                if (weighingDtlsList != null && weighingDtlsList.Count > 0)
                {
                    for (int i = 0; i < weighingDtlsList.Count; i++)
                    {
                        if (weighingDtlsList[i].IsRecConfirm == 1)
                        {
                            IsRecConfirm = true;
                            recoveryBy = weighingDtlsList[i].RecoveryBy;
                            continue;
                        }
                        else
                        {
                            IsRecConfirm = false;
                            break;
                        }
                    }
                }
                if (IsRecConfirm)
                {
                    //Make Clone of object
                    if (gradingScheduleTO == null)
                    {
                        throw new Exception("gradingScheduleTO = NULL");
                    }

                    TblPurchaseScheduleSummaryTO recoveryScheduleTO = gradingScheduleTO.DeepCopy();
                    recoveryScheduleTO.UpdatedBy = recoveryBy;
                    recoveryScheduleTO.CreatedBy = recoveryBy;
                    recoveryScheduleTO.UpdatedOn = currentdate;
                    recoveryScheduleTO.ParentPurchaseScheduleSummaryId = gradingScheduleTO.IdPurchaseScheduleSummary;
                    recoveryScheduleTO.VehiclePhaseId = (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY;
                    recoveryScheduleTO.IsRecovery = 1;

                    //Comment while autoinserting the recovery data and add code of quality flag testing

                    #region Check if all flags are completed
                    int res = 0;
                    // int idSummary = tblPurchaseScheduleSummaryTO.RootScheduleId > 0 ? tblPurchaseScheduleSummaryTO.RootScheduleId : tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    int idSummary = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    resultMessage = CheckIfAllQualityFlagsAreCompleted(idSummary, tblPurchaseScheduleSummaryTO.VehiclePhaseId);
                    if (resultMessage.Result > 0)
                    {
                        return resultMessage;
                    }
                    #endregion

                    // resultMessage = CalculateRecoveryItemDtls(recoveryScheduleTO, weighingStageSummaryTO, conn, tran);
                    // if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                    // {
                    //     throw new Exception("Error while calculation item details");
                    // }

                    Boolean tempIsItemChange = true;
                    string padtaApprovalMsg = "";
                    resultMessage = saveData(recoveryScheduleTO, tempIsItemChange, isSendNotification, currentdate, ref padtaApprovalMsg, conn, tran);
                    if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error In saving recovery details");
                    }
                    //sachin [05-06-2020] return recovery submited details.                    
                    resultMessage.Tag = recoveryScheduleTO;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error while saving recovery schedule details");
                return resultMessage;
            }
        }

        public ResultMessage CheckGradingAndRecoveryCompleted(TblPurchaseScheduleSummaryTO scheduleSummaryTO)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();
                TblPurchaseScheduleSummaryTO gradingScheduleTO = null;
                Boolean isTakeGradingTO = false;
                Boolean IsRecConfirm = CheckIsRecoveryAndGradingCompleted(scheduleSummaryTO, ref gradingScheduleTO, isTakeGradingTO, conn, tran);
                if (!IsRecConfirm)
                {
                    throw new Exception("Grading or Recovery not completed");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error In CheckGradingAndRecoveryCompleted(TblPurchaseScheduleSummaryTO scheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage saveData(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean isItemChange, Boolean isSendNotification, DateTime serverDateTime, ref string padtaApprovalMsg, SqlConnection conn, SqlTransaction tran)
        {


            //Check For first Status
            int result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            ResultMessage resNew = new StaticStuff.ResultMessage();
            //string padtaApprovalMsg = "";
            try
            {
                int count = 0;
                Boolean chekApprovlCycle = true;

                if (!isItemChange)
                {
                    Boolean isGetGradeExpDtls = true;
                    tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                    tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId, isGetGradeExpDtls, conn, tran);
                    // if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList == null || tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count == 0)
                    // {
                    //     resultMessage.DefaultBehaviour();
                    //     return resultMessage;
                    // }

                }

                // //Check If ScheduleQty is equal to the schedule details 
                // resultMessage = CheckVehScheQtyMatchWithVehGradesQty(tblPurchaseScheduleSummaryTO);
                // if (resultMessage.MessageType != ResultMessageE.Information)
                // {
                //     resultMessage.DefaultBehaviour();
                //     resultMessage.DisplayMessage = "Vehicle qty does not match with sum of vehicles grades qty.";
                //     return resultMessage;
                // }

                if (tblPurchaseScheduleSummaryTO.StatusId == (int)Constants.TranStatusE.UNLOADING_COMPLETED
                    && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (int)Constants.PurchaseVehiclePhasesE.GRADING
                    && tblPurchaseScheduleSummaryTO.IsGradingCompleted == 1)
                {
                    tblPurchaseScheduleSummaryTO.GradingComplOn = serverDateTime;
                }

                if (tblPurchaseScheduleSummaryTO.StatusId == (int)Constants.TranStatusE.UNLOADING_COMPLETED
                  && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (int)Constants.PurchaseVehiclePhasesE.CORRECTIONS)
                {
                    double qty = Math.Round(tblPurchaseScheduleSummaryTO.Qty, 3);
                    double partyqty = Math.Round(tblPurchaseScheduleSummaryTO.PartyQty, 3);
                    double sumOfItems = 0;
                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                    {
                        sumOfItems = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);
                        sumOfItems = Math.Round(sumOfItems, 3);

                        // Add By Samadhan 16 Sep 2022
                        int materialTypeForCalPartyWeight = 0;
                        List<int> materialTypeForCalPartyWeightList = new List<int>(); 

                        TblConfigParamsTO configParamTOForMaterialTypeForCalPartyWeight = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_MATERIAL_TYPE_FOR_COMPARISON_CALCU_BASED_ON_PARTY_WEIGHT, conn, tran);

                        if (configParamTOForMaterialTypeForCalPartyWeight != null && configParamTOForMaterialTypeForCalPartyWeight.ConfigParamVal != null)
                        {
                            String materialTypeForCalPartyWeightStr = configParamTOForMaterialTypeForCalPartyWeight.ConfigParamVal;
                            materialTypeForCalPartyWeightList = materialTypeForCalPartyWeightStr.Split(',').Select(s => int.Parse(s)).ToList();
                            if (materialTypeForCalPartyWeightList != null && materialTypeForCalPartyWeightList.Count > 0)
                            {
                                if (materialTypeForCalPartyWeightList.Contains(tblPurchaseScheduleSummaryTO.ProdClassId) == true)
                                {
                                    materialTypeForCalPartyWeight = tblPurchaseScheduleSummaryTO.ProdClassId;
                                }

                            }
                        }
                        //int matTypeIMPORT = 0;
                        //int matTypeSPONGEIRON = 0;
                        //TblConfigParamsTO TblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_MATERIAL_TYPE_WHEN_IMPORT_COMPARISON_CALCU_BASED_ON_PARTY_WEIGHT, conn, tran);
                        //if (TblConfigParamsTO != null)
                        //{
                        //    if (TblConfigParamsTO.ConfigParamVal.ToString() != "0")
                        //    {
                        //        matTypeIMPORT = Convert.ToInt32(TblConfigParamsTO.ConfigParamVal);
                        //    }

                        //}
                        //TblConfigParamsTO TblConfigParamsSPONGEIRONTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_MATERIAL_TYPE_WHEN_SPONGEIRON_COMPARISON_CALCU_BASED_ON_PARTY_WEIGHT, conn, tran);
                        //if (TblConfigParamsSPONGEIRONTO != null)
                        //{
                        //    if (TblConfigParamsSPONGEIRONTO.ConfigParamVal.ToString() != "0")
                        //    {
                        //        matTypeSPONGEIRON = Convert.ToInt32(TblConfigParamsSPONGEIRONTO.ConfigParamVal);
                        //    }

                        //}

                        if (materialTypeForCalPartyWeight == tblPurchaseScheduleSummaryTO.ProdClassId)
                        {
                            if (partyqty > 0)
                            {
                                if (partyqty != sumOfItems)
                                {
                                    resultMessage.DefaultBehaviour();
                                    resultMessage.DisplayMessage = "Vehicle qty not matched with items qty. Please Refresh and try again.";
                                    return resultMessage;

                                }
                            }
                            else
                            {
                                if (qty != sumOfItems)
                                {
                                    resultMessage.DefaultBehaviour();
                                    resultMessage.DisplayMessage = "Vehicle qty not matched with items qty. Please Refresh and try again.";
                                    return resultMessage;
                                }
                            }

                        }
                        else
                        {
                            if (qty != sumOfItems)
                            {
                                resultMessage.DefaultBehaviour();
                                resultMessage.DisplayMessage = "Vehicle qty not matched with items qty. Please Refresh and try again.";
                                return resultMessage;
                            }
                        }

                    }

                }


                if (tblPurchaseScheduleSummaryTO.StatusId == (int)Constants.TranStatusE.VEHICLE_OUT)
                {
                    chekApprovlCycle = false;
                    tblPurchaseScheduleSummaryTO.IsVehicleOut = 1;

                }
                //else
                //{
                //    tblPurchaseScheduleSummaryTO.IsVehicleOut = 0;
                //}
                List<TblPurchaseScheduleStatusHistoryTO> HistoryTOListOld = new List<TblPurchaseScheduleStatusHistoryTO>();
                TblPurchaseScheduleStatusHistoryTO HistoryTOOld = new TblPurchaseScheduleStatusHistoryTO();
                int StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL);

                int PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.RootScheduleId > 0 ? tblPurchaseScheduleSummaryTO.RootScheduleId : tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                bool isForApproval = true;
                HistoryTOListOld = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(PurchaseScheduleSummaryId, false, isForApproval, StatusId, conn, tran);
                if (HistoryTOListOld != null && chekApprovlCycle == true)
                {
                    count = HistoryTOListOld.Where(w => w.IsLatest == 1).ToList().Count();
                    HistoryTOOld = HistoryTOListOld.Where(w => (w.RejectStatusId == tblPurchaseScheduleSummaryTO.StatusId || w.AcceptStatusId == tblPurchaseScheduleSummaryTO.StatusId) && w.IsLatest == 1).FirstOrDefault();
                }

                //Prajakta[2020-10-17] Added to save unloading date padta
                List<TblBaseItemMetalCostTO> baseMetalCostToList = GetBaseMetalCostListTo(tblPurchaseScheduleSummaryTO.ActualRootScheduleId);
                if (baseMetalCostToList != null && baseMetalCostToList.Count > 0)
                {
                    List<TblPurchaseScheduleSummaryTO> tempScheduleList = new List<TblPurchaseScheduleSummaryTO>();
                    tempScheduleList.Add(tblPurchaseScheduleSummaryTO);
                    GetUnloadingDatePadtaDtls(baseMetalCostToList[0], tempScheduleList);
                    tblPurchaseScheduleSummaryTO = tempScheduleList[0];
                }

                int res = 1;

                if (tblPurchaseScheduleSummaryTO.IsApproved != 1)
                {
                    if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS) && tblPurchaseScheduleSummaryTO.ForSaveOrSubmit == 1)
                    {
                        resNew = CheckIfPadtaWithinBand(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (resNew.Tag != null)
                            padtaApprovalMsg = resNew.Tag.ToString();

                        res = resNew.Result;
                    }
                }

                if (res <= 0 && HistoryTOOld != null && tblPurchaseScheduleSummaryTO.IsApproved != 1 && tblPurchaseScheduleSummaryTO.ForSaveOrSubmit == 1)
                {
                    tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL);
                }
                if (count > 0 && chekApprovlCycle == true)
                {
                    for (int i = 0; i < HistoryTOListOld.Count; i++)
                    {
                        if (tblPurchaseScheduleSummaryTO.IsIgnoreApproval == 1 && tblPurchaseScheduleSummaryTO.IsLatest == 1)
                        {
                            // HistoryTOListOld[i].IsLatest = 0;
                        }
                        if (tblPurchaseScheduleSummaryTO.IsLatest == 1 && tblPurchaseScheduleSummaryTO.IsApproved == 2)
                        {
                            HistoryTOListOld[i].IsApproved = 2;
                        }//Prajakta[2019-03-18] Commented And Added to update IsApproved to all previous records
                        //if (tblPurchaseScheduleSummaryTO.IsApproved == 1 && HistoryTOListOld[i].IsLatest == 1)
                        if (tblPurchaseScheduleSummaryTO.IsApproved == 1)
                        {
                            HistoryTOListOld[i].IsApproved = 1;
                        }
                        if (tblPurchaseScheduleSummaryTO.HistoryIsActive != 1 && tblPurchaseScheduleSummaryTO.IsApproved != 1 && tblPurchaseScheduleSummaryTO.IsIgnoreApproval != 1 && tblPurchaseScheduleSummaryTO.ForSaveOrSubmit == 1)
                        {
                            HistoryTOListOld[i].IsLatest = 0;
                        }
                        if (tblPurchaseScheduleSummaryTO.IsIgnoreApproval == 1 && tblPurchaseScheduleSummaryTO.IsLatest == 1 && tblPurchaseScheduleSummaryTO.ForSaveOrSubmit == 1)
                        {
                            HistoryTOListOld[i].IsLatest = 0;
                        }

                        if (tblPurchaseScheduleSummaryTO.IsLatest == 1 && tblPurchaseScheduleSummaryTO.StatusId == (int)Constants.TranStatusE.SEND_FOR_INSPECTION)
                        {
                            HistoryTOListOld[i].IsLatest = 0;
                        }

                        HistoryTOListOld[i].IsActive = 0;
                        HistoryTOListOld[i].UpdatedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        HistoryTOListOld[i].UpdatedOn = serverDateTime;

                        result = _iTblPurchaseScheduleStatusHistoryBL.UpdateTblPurchaseScheduleStatusHistory(HistoryTOListOld[i], conn, tran);
                        if (result > 0)
                        {

                        }
                        else
                        {
                            tran.Rollback();
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error While Updating Material Details";
                            return resultMessage;
                        }

                    }
                    if (HistoryTOListOld != null)
                    {
                        HistoryTOOld = HistoryTOListOld.Where(w => w.IsLatest == 1).FirstOrDefault();

                    }
                    if (result > 0)
                    {
                        result = UpdateItemDetailsForApproveAndReject(tblPurchaseScheduleSummaryTO, serverDateTime, conn, tran);
                    }
                    // result = _iTblPurchaseScheduleStatusHistoryBL.UpdateTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran);
                }
                if (count <= 0)
                {

                    // //Prajakta[2019-01-25] Added
                    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IS_CALCULATE_GRADING_DETAILS, conn, tran);
                    {
                        if (tblConfigParamsTO != null && Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 1)
                        {
                            if (tblPurchaseScheduleSummaryTO.StatusId != (Int32)Constants.TranStatusE.VEHICLE_OUT)
                            {
                                if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING)
                                {
                                    resultMessage = CalculateGradingItemsDtls(tblPurchaseScheduleSummaryTO, conn, tran);
                                    if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                                    {
                                        throw new Exception("Error while calculation item details");
                                    }
                                }
                            }

                        }
                    }

                    //Prajakta[2018-02-14] Added to save recovery details
                    if (tblPurchaseScheduleSummaryTO.StatusId != (Int32)Constants.TranStatusE.VEHICLE_OUT)
                    {
                        if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY)
                        {
                            resultMessage = CalculateRecoveryItemDtls(tblPurchaseScheduleSummaryTO, null, conn, tran);
                            if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                            {
                                throw new Exception("Error while calculation item details");
                            }
                        }
                    }


                    //Prajakta[2020-10-17] Added to save unloading date padta
                    List<TblBaseItemMetalCostTO> baseMetalCostTotempList = GetBaseMetalCostListTo(tblPurchaseScheduleSummaryTO.ActualRootScheduleId);
                    if (baseMetalCostTotempList != null && baseMetalCostTotempList.Count > 0)
                    {
                        List<TblPurchaseScheduleSummaryTO> tempScheduleList = new List<TblPurchaseScheduleSummaryTO>();
                        tempScheduleList.Add(tblPurchaseScheduleSummaryTO);
                        GetUnloadingDatePadtaDtls(baseMetalCostTotempList[0], tempScheduleList);
                        tblPurchaseScheduleSummaryTO = tempScheduleList[0];
                    }

                    isForApproval = true;
                    List<TblPurchaseScheduleStatusHistoryTO> HistoryTOListforCorrectionSave = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(PurchaseScheduleSummaryId, false, isForApproval, StatusId, conn, tran);

                    if (HistoryTOListforCorrectionSave != null && HistoryTOListforCorrectionSave.Count > 0 && chekApprovlCycle == true)
                    {
                        result = UpdateItemDetailsForApproveAndReject(tblPurchaseScheduleSummaryTO, serverDateTime, conn, tran);
                    }
                    else
                    {
                        if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.CORRECTION_DETAILS_SAVED))
                        {
                            result = 0;
                            TblPurchaseScheduleStatusHistoryTO HistoryTO = new TblPurchaseScheduleStatusHistoryTO();
                            HistoryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                            HistoryTO.StatusId = tblPurchaseScheduleSummaryTO.StatusId;
                            HistoryTO.PhaseId = tblPurchaseScheduleSummaryTO.VehiclePhaseId;
                            HistoryTO.AcceptStatusId = tblPurchaseScheduleSummaryTO.StatusId;
                            HistoryTO.RejectStatusId = tblPurchaseScheduleSummaryTO.StatusId;
                            HistoryTO.AcceptPhaseId = tblPurchaseScheduleSummaryTO.VehiclePhaseId;
                            HistoryTO.RejectPhaseId = tblPurchaseScheduleSummaryTO.VehiclePhaseId;
                            HistoryTO.CreatedBy = tblPurchaseScheduleSummaryTO.UpdatedBy;
                            HistoryTO.CreatedOn = tblPurchaseScheduleSummaryTO.UpdatedOn;
                            HistoryTO.NavigationUrl = "Grading/Comparison";
                            HistoryTO.StatusRemark = "Correction Comparison Saved.";
                            HistoryTO.IsIgnoreApproval = 1;
                            HistoryTO.IsActive = 0;
                            HistoryTO.IsLatest = 1;

                            result = _iTblPurchaseScheduleStatusHistoryBL.InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran);
                            if (result <= 0)
                            {
                                throw new Exception("Error In InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran)");
                            }
                        }



                        result = UpdateItemDetails(tblPurchaseScheduleSummaryTO, isItemChange, serverDateTime, conn, tran);
                    }
                    if (result <= 0)
                    {
                        throw new Exception("Error while updating Item Details");
                    }
                }
                if (res <= 0 && result > 0 && (tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS) || tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED)))
                {
                    // if (res <= 0 && tblPurchaseScheduleSummaryTO.AcceptStatusId != tblPurchaseScheduleSummaryTO.StatusId && tblPurchaseScheduleSummaryTO.RejectStatusId != tblPurchaseScheduleSummaryTO.StatusId)
                    if (res <= 0 && tblPurchaseScheduleSummaryTO.IsApproved != 1)
                    {
                        if (tblPurchaseScheduleSummaryTO.HistoryIsActive != 1 && tblPurchaseScheduleSummaryTO.IsApproved != 1 && tblPurchaseScheduleSummaryTO.ForSaveOrSubmit == 1)
                        {
                            tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL);

                        }
                    }
                    // tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL);
                    if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL))
                    {
                        result = 0;
                        TblPurchaseScheduleStatusHistoryTO HistoryTO = new TblPurchaseScheduleStatusHistoryTO();
                        HistoryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                        HistoryTO.StatusId = tblPurchaseScheduleSummaryTO.StatusId;
                        HistoryTO.PhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS);
                        HistoryTO.AcceptStatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED);
                        HistoryTO.RejectStatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED);
                        HistoryTO.AcceptPhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS);
                        HistoryTO.RejectPhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS);
                        HistoryTO.CreatedBy = tblPurchaseScheduleSummaryTO.UpdatedBy;
                        HistoryTO.CreatedOn = tblPurchaseScheduleSummaryTO.UpdatedOn;
                        HistoryTO.NavigationUrl = "Grading/Comparison";

                        // //Prajakta[2019-04-19] Added
                        // if (tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        // {
                        //     HistoryTO.StatusRemark = "Pending For Padta Approval ," + Environment.NewLine + resNew.Text + " " + Environment.NewLine + ", padta per MT = " + tblPurchaseScheduleSummaryTO.Padta + Environment.NewLine + ", padta per Ton = " + Math.Round((tblPurchaseScheduleSummaryTO.Padta / tblPurchaseScheduleSummaryTO.Qty), 3);
                        // }
                        // else if (tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                        // {
                        //     HistoryTO.StatusRemark = "Pending For Padta Approval ," + Environment.NewLine + resNew.Text + " " + Environment.NewLine + ", padta per MT = " + tblPurchaseScheduleSummaryTO.PadtaForNC + Environment.NewLine + ", padta per Ton = " + Math.Round((tblPurchaseScheduleSummaryTO.PadtaForNC / tblPurchaseScheduleSummaryTO.Qty), 3);
                        // }

                        HistoryTO.StatusRemark = padtaApprovalMsg;

                        HistoryTO.IsActive = 1;
                        HistoryTO.IsLatest = 1;
                        HistoryTO.ApprovalType = (Int32)Constants.VehSchApprovalTypeE.WT_RATE_APPROVAL;

                        result = _iTblPurchaseScheduleStatusHistoryBL.InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran);
                        if (result <= 0)
                        {
                            throw new Exception("Error In InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran)");
                        }

                    }
                }
                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION))
                {
                    result = 0;
                    TblPurchaseScheduleStatusHistoryTO HistoryTO = new TblPurchaseScheduleStatusHistoryTO();
                    HistoryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    HistoryTO.StatusId = tblPurchaseScheduleSummaryTO.StatusId;
                    HistoryTO.PhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION);
                    HistoryTO.AcceptStatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_REPORTED_FOR_LOADING);
                    HistoryTO.RejectStatusId = Convert.ToInt32(Constants.TranStatusE.SEND_FOR_INSPECTION);
                    HistoryTO.PhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION);
                    HistoryTO.CreatedBy = tblPurchaseScheduleSummaryTO.UpdatedBy;
                    HistoryTO.CreatedOn = tblPurchaseScheduleSummaryTO.UpdatedOn;
                    HistoryTO.NavigationUrl = "Unloading/OutsideInspectionForVehicleInspectn";
                    HistoryTO.StatusRemark = "Pending For Padta Approval On Outside Inspection";
                    HistoryTO.IsActive = 1;

                    result = _iTblPurchaseScheduleStatusHistoryBL.InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran);
                    if (result <= 0)
                    {
                        throw new Exception("Error In InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran)");
                    }

                }

                //save vehicle history details
                resultMessage = _iTblPurchaseSchStatusHistoryBL.SavePurVehStatusHistory(tblPurchaseScheduleSummaryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                if (result <= 0)
                {
                    tran.Rollback();
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.Text = "Error While Updating Material Details";
                    resultMessage.DisplayMessage = "Error While Updating Material Details";
                    return resultMessage;
                }

                if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && tblPurchaseScheduleSummaryTO.IsCorrectionCompleted == 1)
                {
                    Int32 isAuto = 1;
                    Int32 statusId = (Int32)Constants.TranStatusE.COMPLETED;
                    resultMessage = SetStatusCompleteAfterCorrection(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, tblPurchaseScheduleSummaryTO.UpdatedBy, isAuto, conn, tran, statusId, null, tblPurchaseScheduleSummaryTO.ActualRootScheduleId, tblPurchaseScheduleSummaryTO.VehiclePhaseId);
                    if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                    {
                        tran.Rollback();
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.Text = "Error While Updating Enquiry complete status";
                        resultMessage.DisplayMessage = "Error While Updating Enquiry complete status";
                        return resultMessage;
                    }
                }

                //Add purchase vehicle status history
                //resultMessage = InsertPurchaseVehStatusHistoryDtls(tblPurchaseScheduleSummaryTO, conn, tran);
                //if(resultMessage.MessageType != ResultMessageE.Information)
                //{
                //    resultMessage.DefaultBehaviour();
                //    return resultMessage;
                //}

                if (result >= 1)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    if (!String.IsNullOrEmpty(padtaApprovalMsg))
                        resultMessage.DisplayMessage = "Vehicle No : " + tblPurchaseScheduleSummaryTO.VehicleNo + " sent for approval.";
                    else
                        resultMessage.DisplayMessage = "Submitted Successfully.";
                    return resultMessage;
                }
                else
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Erorr in saveData(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean isItemChange, Boolean isSendNotification, DateTime serverDateTime, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;

            }



        }

        public ResultMessage NotifyStatusChangeAgainstVehicle(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean isSendNotification, DateTime serverDateTime)
        {
            Boolean isForBRM
                = false;

            TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
            if (tblConfigParamsTO != null)
            {
                if (tblConfigParamsTO.ConfigParamVal == "1")
                {
                    isForBRM = true;
                }
                else
                {
                    isForBRM = false;
                }
            }
            ResultMessage resultMessage = new ResultMessage();

            if (isSendNotification)
            {
                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                if (enquiryTO == null)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.VEHICLE_REPORTED_FOR_LOADING))
                {
                    //get purchase manager of supplier
                    tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    //TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                    if (enquiryTO != null && enquiryTO.UserId > 0)
                    {
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_REPORTED;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }
                    }

                    if (tblPurchaseScheduleSummaryTO.GraderId > 0)
                    {
                        TblAlertUsersTO tblAlertUsersTempTO = new TblAlertUsersTO();
                        tblAlertUsersTempTO.UserId = tblPurchaseScheduleSummaryTO.GraderId;
                        tblAlertUsersTempTO.RaisedOn = serverDateTime;
                        tblAlertUsersTempTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_REPORTED;
                        tblAlertUsersTOList.Add(tblAlertUsersTempTO);
                    }


                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_REPORTED;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_REPORTED";

                    if (isForBRM)
                    {
                        tblAlertInstanceTO.AlertComment = "Yard Manager process is completed for vehicle no: " + tblPurchaseScheduleSummaryTO.VehicleNo + " and it is pending for grader's approval.";
                    }
                    else
                    {
                        tblAlertInstanceTO.AlertComment = "Vehicle no: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is pending for grader's approval.";
                    }

                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = serverDateTime;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_REPORTED";
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = serverDateTime;
                    tblAlertInstanceTO.IsAutoReset = 1;


                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_SEND_FOR_INSPECTION;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);


                    #region Send Notifcation to supervisor

                    if (tblPurchaseScheduleSummaryTO.SupervisorId > 0)
                    {
                        tblAlertInstanceTO = new TblAlertInstanceTO();
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.SupervisorId;
                        tblAlertUsersTO.RaisedOn = serverDateTime;
                        tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                        tblAlertInstanceTO.AlertUsersTOList = new List<TblAlertUsersTO>();
                        tblAlertInstanceTO.AlertUsersTOList.Add(tblAlertUsersTO);
                        string UserName = _iTblPurchaseScheduleSummaryDAO.GetDisplayNameFromUserID(tblPurchaseScheduleSummaryTO.CreatedBy);
                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                        tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR";
                        tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is assigned to you for unloading by " + UserName;
                        //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR";
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        else
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        alertsToReset = new AlertsToReset();
                        alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                        resetAlertInstanceTO = new ResetAlertInstanceTO();
                        resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                        resetAlertInstanceTO.SourceEntityTxnId = tblAlertInstanceTO.SourceEntityId;
                        alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                        tblAlertInstanceTO.AlertsToReset = alertsToReset;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                        notify.SendNotificationToUsers(tblAlertInstanceTO);
                    }
                    #endregion
                    #region Send Notifcation to Grader

                    if (tblPurchaseScheduleSummaryTO.GraderId > 0)
                    {
                        tblAlertInstanceTO = new TblAlertInstanceTO();
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.GraderId;
                        tblAlertUsersTO.RaisedOn = serverDateTime;
                        tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_GRADER;
                        tblAlertInstanceTO.AlertUsersTOList = new List<TblAlertUsersTO>();
                        tblAlertInstanceTO.AlertUsersTOList.Add(tblAlertUsersTO);
                        string UserName = _iTblPurchaseScheduleSummaryDAO.GetDisplayNameFromUserID(tblPurchaseScheduleSummaryTO.CreatedBy);
                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_GRADER;
                        tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_ASSIGN_TO_GRADER";
                        tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is assigned to you for grader's approval by " + UserName;
                        //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_ASSIGN_TO_GRADER";
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        else
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        alertsToReset = new AlertsToReset();
                        alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                        resetAlertInstanceTO = new ResetAlertInstanceTO();
                        resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_GRADER;
                        resetAlertInstanceTO.SourceEntityTxnId = tblAlertInstanceTO.SourceEntityId;
                        alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                        tblAlertInstanceTO.AlertsToReset = alertsToReset;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                        notify.SendNotificationToUsers(tblAlertInstanceTO);
                    }
                    #endregion
                    #region Send Notifcation to Recovery engineer

                    if (tblPurchaseScheduleSummaryTO.EngineerId > 0)
                    {
                        tblAlertInstanceTO = new TblAlertInstanceTO();
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.EngineerId;
                        tblAlertUsersTO.RaisedOn = serverDateTime;
                        tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_ENGINEER;
                        tblAlertInstanceTO.AlertUsersTOList = new List<TblAlertUsersTO>();
                        tblAlertInstanceTO.AlertUsersTOList.Add(tblAlertUsersTO);
                        string UserName = _iTblPurchaseScheduleSummaryDAO.GetDisplayNameFromUserID(tblPurchaseScheduleSummaryTO.CreatedBy);
                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_ENGINEER;
                        tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_ASSIGN_TO_ENGINEER";
                        tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is assigned to you for Recovery by " + UserName;
                        //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_ASSIGN_TO_ENGINEER";
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        else
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        alertsToReset = new AlertsToReset();
                        alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                        resetAlertInstanceTO = new ResetAlertInstanceTO();
                        resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_ENGINEER;
                        resetAlertInstanceTO.SourceEntityTxnId = tblAlertInstanceTO.SourceEntityId;
                        alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                        tblAlertInstanceTO.AlertsToReset = alertsToReset;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                        notify.SendNotificationToUsers(tblAlertInstanceTO);
                    }
                    #endregion

                }
                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.VEHICLE_REQUESTED))
                {
                    //Get Security user id list by role
                    // tblAlertUsersTO.UserId = 1;
                    // tblAlertUsersTOList.Add(tblAlertUsersTO);

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_REQUESTED;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_REQUESTED";
                    tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Requested to send In for Unloading";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_REQUESTED";
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_REPORTED;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);

                    if (!isForBRM)
                    {
                        #region Send Notifcation to supervisor in generic cycle

                        if (tblPurchaseScheduleSummaryTO.SupervisorId > 0)
                        {
                            tblAlertInstanceTO = new TblAlertInstanceTO();
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.SupervisorId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                            tblAlertInstanceTO.AlertUsersTOList = new List<TblAlertUsersTO>();
                            tblAlertInstanceTO.AlertUsersTOList.Add(tblAlertUsersTO);
                            string UserName = _iTblPurchaseScheduleSummaryDAO.GetDisplayNameFromUserID(tblPurchaseScheduleSummaryTO.CreatedBy);
                            tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                            tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR";
                            tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is assigned to you for unloading by " + UserName;
                            //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                            tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                            tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                            tblAlertInstanceTO.IsActive = 1;
                            tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR";
                            if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                                tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                            else
                                tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                            tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                            tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                            tblAlertInstanceTO.IsAutoReset = 1;

                            alertsToReset = new AlertsToReset();
                            alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                            resetAlertInstanceTO = new ResetAlertInstanceTO();
                            resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                            resetAlertInstanceTO.SourceEntityTxnId = tblAlertInstanceTO.SourceEntityId;
                            alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                            tblAlertInstanceTO.AlertsToReset = alertsToReset;

                            //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                            // notify = new Notification();
                            notify.SendNotificationToUsers(tblAlertInstanceTO);
                        }
                        #endregion
                    }


                    #region Send Notifcation to PM

                    if (tblPurchaseScheduleSummaryTO.UserId > 0)
                    {
                        tblAlertInstanceTO = new TblAlertInstanceTO();
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.UserId;
                        tblAlertUsersTO.RaisedOn = serverDateTime;
                        tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.GRADERS_APPROVAL_COMPLETED;
                        tblAlertInstanceTO.AlertUsersTOList = new List<TblAlertUsersTO>();
                        tblAlertInstanceTO.AlertUsersTOList.Add(tblAlertUsersTO);
                        string UserName = _iTblPurchaseScheduleSummaryDAO.GetDisplayNameFromUserID(tblPurchaseScheduleSummaryTO.CreatedBy);
                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.GRADERS_APPROVAL_COMPLETED;
                        tblAlertInstanceTO.AlertAction = "GRADERS_APPROVAL_COMPLETED";
                        tblAlertInstanceTO.AlertComment = "Grader's approval is completed for vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " by " + UserName;
                        //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceDisplayId = "GRADERS_APPROVAL_COMPLETED";
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                        else
                            tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        alertsToReset = new AlertsToReset();
                        alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                        resetAlertInstanceTO = new ResetAlertInstanceTO();
                        resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                        resetAlertInstanceTO.SourceEntityTxnId = tblAlertInstanceTO.SourceEntityId;
                        alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                        tblAlertInstanceTO.AlertsToReset = alertsToReset;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                        notify.SendNotificationToUsers(tblAlertInstanceTO);
                    }
                    #endregion


                }

                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.SEND_FOR_INSPECTION))
                {
                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_SEND_FOR_INSPECTION;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_SEND_FOR_INSPECTION";
                    tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " pending for outside inspection.";
                    //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_SEND_FOR_INSPECTION";
                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                    notify.SendNotificationToUsers(tblAlertInstanceTO);

                    if (tblPurchaseScheduleSummaryTO.IsApproved == 1 && tblPurchaseScheduleSummaryTO.ApprovalType == (Int32)Constants.VehSchApprovalTypeE.SPOT_VEH_QTY_GRAETER_THAN_SAUDA_PEND_QTY)
                    {
                        int sourceEntityId = 0;

                        sourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

                        _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEH_APPROVAL_PENDING_FOR_SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY, sourceEntityId.ToString());

                        if (enquiryTO != null && enquiryTO.UserId > 0)
                        {
                            if (enquiryTO.UserId != tblPurchaseScheduleSummaryTO.CreatedBy)
                            {
                                TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                                tblAlertUsersTO.UserId = enquiryTO.UserId;
                                tblAlertUsersTO.RaisedOn = serverDateTime;
                                tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY_APPROVED;
                                tblAlertUsersTOList.Add(tblAlertUsersTO);
                            }

                        }

                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY_APPROVED;
                        tblAlertInstanceTO.AlertAction = "Vehicle Schedule Approved";
                        tblAlertInstanceTO.AlertComment = "Vehicle no: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is approved for schedule qty = " + tblPurchaseScheduleSummaryTO.Qty + " is greater than sauda pending qty = " + enquiryTO.PendingBookingQty;
                        tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        tblAlertInstanceTO.SourceDisplayId = "SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY_APPROVED";
                        tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                        notify.SendNotificationToUsers(tblAlertInstanceTO);

                    }
                }
                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.VEHICLE_PENDING_FOR_YARD_MANAGER))
                {
                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_YARD_MANAGER;
                    tblAlertInstanceTO.AlertAction = "VEHICLE_SCHEDULE_PENDING_FOR_YARD_MANAGER";
                    tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " pending for yard manager.";
                    //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    tblAlertInstanceTO.SourceDisplayId = "VEHICLE_SCHEDULE_PENDING_FOR_YARD_MANAGER";
                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;


                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }

                //Priyanka [20-02-2019]
                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.SEND_FOR_VERIFICATION))
                {


                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_SEND_FOR_VERIFICATION;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_SEND_FOR_VERIFICATION";
                    tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " sending for verification.";
                    //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_SEND_FOR_VERIFICATION";
                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;


                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }


                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL))
                {
                    //TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                    // reset prev notification 

                    int sourceEntityId = 0;

                    sourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

                    // _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.RECOVERY_COMPLETED, sourceEntityId.ToString());
                    // _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL, sourceEntityId.ToString());
                    // _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_REJECTED, sourceEntityId.ToString());


                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.RECOVERY_COMPLETED, sourceEntityId.ToString());
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_WT_RATE_APPROVAL, sourceEntityId.ToString());
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_REJECTED_FOR_WT_RATE, sourceEntityId.ToString());


                    //If PM assistant is doing corrections then send notification to respective PM
                    if (enquiryTO != null && enquiryTO.UserId > 0)
                    {
                        if (enquiryTO.UserId != tblPurchaseScheduleSummaryTO.CreatedBy)
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_WT_RATE_APPROVAL;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }

                    }

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_WT_RATE_APPROVAL;
                    tblAlertInstanceTO.AlertAction = "Vehicle Schedule Pending For Wt. Rate Approval";
                    tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " of booking no :" + enquiryTO.EnqDisplayNo + " is pending for Wt. Rate approval";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    tblAlertInstanceTO.SourceDisplayId = "VEHICLE_SCHEDULE_PENDING_FOR_WT_RATE_APPROVAL";
                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }
                else if (tblPurchaseScheduleSummaryTO.IsApproved == 1 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS))
                {
                    TblPurchaseScheduleStatusHistoryTO HistoryTOOld = new TblPurchaseScheduleStatusHistoryTO();
                    // int StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL);

                    int PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    HistoryTOOld = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(PurchaseScheduleSummaryId);
                    if (HistoryTOOld != null)
                    {

                        int sourceEntityId = 0;

                        sourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

                        //_iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL, sourceEntityId.ToString());
                        _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_WT_RATE_APPROVAL, sourceEntityId.ToString());


                        if (enquiryTO != null && enquiryTO.UserId > 0)
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_APPROVED_FOR_WT_RATE;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }

                        //tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_APPROVED;
                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_APPROVED_FOR_WT_RATE;
                        tblAlertInstanceTO.AlertAction = "Vehicle Schedule Approved For Wt. Rate";
                        tblAlertInstanceTO.AlertComment = "Wt. Rate for vehicle no: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is approved.";
                        tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                        tblAlertInstanceTO.SourceDisplayId = "VEHICLE_SCHEDULE_APPROVED_FOR_WT_RATE";
                        tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                        notify.SendNotificationToUsers(tblAlertInstanceTO);
                    }
                    else
                    {

                        int sourceEntityId = 0;
                        sourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

                        //If PM assistant is doing corrections then send notification to respective PM
                        if (enquiryTO != null && enquiryTO.UserId > 0)
                        {
                            if (enquiryTO.UserId != tblPurchaseScheduleSummaryTO.CreatedBy)
                            {
                                TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                                tblAlertUsersTO.UserId = enquiryTO.UserId;
                                tblAlertUsersTO.RaisedOn = serverDateTime;
                                tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.CORRECTION_COMPLETED;
                                tblAlertUsersTOList.Add(tblAlertUsersTO);
                            }

                        }

                        _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.RECOVERY_COMPLETED, sourceEntityId.ToString());

                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.CORRECTION_COMPLETED;
                        tblAlertInstanceTO.AlertAction = "Correction Completed";
                        tblAlertInstanceTO.AlertComment = "Correction for vehicle no: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is completed.";
                        tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        tblAlertInstanceTO.SourceDisplayId = "CORRECTION_COMPLETED";
                        tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                        notify.SendNotificationToUsers(tblAlertInstanceTO);

                        if (tblPurchaseScheduleSummaryTO.CommercialVerified == 0)
                        {
                            SendCommercialDtlsNotFoundNotification(tblPurchaseScheduleSummaryTO);
                        }
                    }
                }
                else if (tblPurchaseScheduleSummaryTO.IsApproved == 2 && tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED))
                {

                    int sourceEntityId = 0;

                    sourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;


                    //_iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL, sourceEntityId.ToString());
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_WT_RATE_APPROVAL, sourceEntityId.ToString());


                    if (enquiryTO != null && enquiryTO.UserId > 0)
                    {
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = enquiryTO.UserId;
                        tblAlertUsersTO.RaisedOn = serverDateTime;
                        tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_REJECTED_FOR_WT_RATE;
                        tblAlertUsersTOList.Add(tblAlertUsersTO);
                    }

                    //tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_REJECTED;
                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_REJECTED_FOR_WT_RATE;
                    tblAlertInstanceTO.AlertAction = "Vehicle Schedule Rejected For Wt. Rate";
                    tblAlertInstanceTO.AlertComment = "Wt. Rate approval for Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is rejected.";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                    tblAlertInstanceTO.SourceDisplayId = "VEHICLE_SCHEDULE_REJECTED_FOR_WT_RATE";
                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }

                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY)
                {

                    tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    //TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                    if (enquiryTO != null && enquiryTO.UserId > 0)
                    {
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.RECOVERY_COMPLETED;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }
                    }
                    int sourceEntityId = 0;
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        sourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    }
                    else
                    {
                        sourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    }

                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.GRADING_COMPLETED, sourceEntityId.ToString());

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.RECOVERY_COMPLETED;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_RECOVERY_COMPLETED";
                    tblAlertInstanceTO.AlertComment = "Recovery process completed for Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo;
                    // tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " Send In Successfully For Unloading.";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    }
                    else
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    }
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_RECOVERY_COMPLETED";

                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.RECOVERY_COMPLETED;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);

                }
                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.SEND_IN))
                {
                    string sourceEntityId = null;

                    if (sourceEntityId == null)
                    {
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId.ToString();
                        }
                        else
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary.ToString();
                        }
                    }
                    List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR, sourceEntityId);
                    //RESET graders approval notification sent to PM
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.GRADERS_APPROVAL_COMPLETED, sourceEntityId);

                    tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    {
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.SupervisorId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SEND_IN;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }
                    }

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SEND_IN;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_SEND_IN";
                    tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " sent in for weighing.";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    }
                    else
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    }
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_SEND_IN";

                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_REQUESTED;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }
                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED)
                && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.GRADING))
                {

                    tblAlertUsersTOList = new List<TblAlertUsersTO>();

                    TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                    tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.EngineerId;
                    tblAlertUsersTO.RaisedOn = serverDateTime;
                    tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.GRADING_COMPLETED;
                    tblAlertUsersTOList.Add(tblAlertUsersTO);

                    //TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                    if (enquiryTO != null && enquiryTO.UserId > 0)
                    {
                        {
                            tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.GRADING_COMPLETED;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }
                    }

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.GRADING_COMPLETED;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_GRADING_COMPLETED";
                    tblAlertInstanceTO.AlertComment = "Grading process completed for Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo;
                    // tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " Send In Successfully For Unloading.";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    }
                    else
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    }
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_GRADING_COMPLETED";

                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.GRADING_COMPLETED;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }
                else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED)
               && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS)
               && tblPurchaseScheduleSummaryTO.IsCorrectionCompleted == 1)
                {
                    tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    //TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                    if (enquiryTO != null && enquiryTO.UserId > 0)
                    {
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDateTime;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.CORRECTION_COMPLETED;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }
                    }
                    int sourceEntityId = 0;
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        sourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    }
                    else
                    {
                        sourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    }

                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.RECOVERY_COMPLETED, sourceEntityId.ToString());

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.CORRECTION_COMPLETED;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_CORRECTION_COMPLETED";
                    tblAlertInstanceTO.AlertComment = "Correction process completed for Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo;
                    // tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " Send In Successfully For Unloading.";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_CORRECTION_COMPLETED";

                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.GRADING_COMPLETED;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);


                }

                //ResultMessage rMessage = BL.TblAlertInstanceBL.SaveNewAlertInstance(tblAlertInstanceTO, conn, tran);
                //if (rMessage.MessageType != ResultMessageE.Information)
                //{
                //    tran.Rollback();
                //    resultMessage.DefaultBehaviour();
                //    resultMessage.DisplayMessage = "Sorry..Record Could not be saved.";
                //    resultMessage.Text = "Error While Generating Notification";

                //    return resultMessage;
                //}

            }

            return resultMessage;
        }

        public ResultMessage SendCommercialDtlsNotFoundNotification(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();

                tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.COMMERCIAL_DTLS_NOT_FOUND_WHILE_CORRECTION;
                tblAlertInstanceTO.AlertAction = "COMMERCIAL_DTLS_NOT_FOUND_WHILE_CORRECTION";
                tblAlertInstanceTO.AlertComment = "Commercial details not found. Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo +
                                                  " while correction.";
                tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                tblAlertInstanceTO.IsActive = 1;
                tblAlertInstanceTO.SourceDisplayId = "COMMERCIAL_DTLS_NOT_FOUND_WHILE_CORRECTION";
                tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.IsAutoReset = 1;

                //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                notify.SendNotificationToUsers(tblAlertInstanceTO);


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SendCommercialDtlsNotFoundNotification(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
        }

        private ResultMessage CheckIfPadtaWithinBand(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            // int result = 0;
            ResultMessage resultMsg = new ResultMessage();
            resultMsg.Tag = "";
            resultMsg.Result = 0;
            double totalProdAmtRec = 0;
            double totalProdAmtCorrection = 0;
            try
            {
                TblConfigParamsTO TblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_PADTA_CONFIGURATION_LIMIT, conn, tran);
                if (TblConfigParamsTO != null)
                {
                    if (TblConfigParamsTO.ConfigParamVal.ToString() == "0")
                    {
                        resultMsg.Result = 1;
                    }
                    else
                    {
                        int minLimit;
                        int maxLimit;
                        string[] arr = TblConfigParamsTO.ConfigParamVal.Split(',');
                        minLimit = Convert.ToInt32(arr[0]);
                        maxLimit = Convert.ToInt32(arr[1]);

                        double padta = 0;

                        padta = tblPurchaseScheduleSummaryTO.Padta;

                        if (tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                        {
                            padta = tblPurchaseScheduleSummaryTO.PadtaForNC;
                        }

                        if (minLimit <= padta && padta <= maxLimit)
                        {
                            resultMsg.Result = 1;
                            tblPurchaseScheduleSummaryTO.IsApproved = 1;
                        }
                        else
                        {
                            resultMsg.Text = "Minimum limit = " + minLimit + " " + Environment.NewLine + " maximum limit = " + maxLimit;

                            //Prajakta[2019-04-19] Added
                            if (tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            {
                                resultMsg.Tag = "Pending For Padta Approval ," + Environment.NewLine + resultMsg.Text + " " + Environment.NewLine + ", Total padta = " + tblPurchaseScheduleSummaryTO.Padta + Environment.NewLine + ", padta per Ton = " + Math.Round((tblPurchaseScheduleSummaryTO.Padta / tblPurchaseScheduleSummaryTO.Qty), 3);
                            }
                            else if (tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                            {
                                resultMsg.Tag = "Pending For Padta Approval ," + Environment.NewLine + resultMsg.Text + " " + Environment.NewLine + ", Total padta = " + tblPurchaseScheduleSummaryTO.PadtaForNC + Environment.NewLine + ", padta per Ton = " + Math.Round((tblPurchaseScheduleSummaryTO.PadtaForNC / tblPurchaseScheduleSummaryTO.Qty), 3);
                            }

                            resultMsg.Result = 0;
                            tblPurchaseScheduleSummaryTO.IsApproved = 0;
                        }
                    }

                }

                if (resultMsg.Result == 1)
                {
                    TblConfigParamsTO TblConfigParamsTORec = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_PADTA_CONFIGURATION_LIMIT_FOR_RECOVERY_CALCULATION, conn, tran);

                    if (TblConfigParamsTORec == null || TblConfigParamsTORec.ConfigParamVal.ToString() == "0")
                    {
                        resultMsg.Result = 1;
                        tblPurchaseScheduleSummaryTO.IsApproved = 1;
                    }
                    else
                    {

                        Boolean isTakeNonCommercialQty = false;
                        TblConfigParamsTO isTakeNonCommerQtyConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_NONCOMMERCIAL_QTY_FOR_WEIGHTED_RATE, conn, tran);
                        if (isTakeNonCommerQtyConfigTO != null)
                        {
                            if (isTakeNonCommerQtyConfigTO.ConfigParamVal.ToString() == "1")
                            {
                                isTakeNonCommercialQty = true;
                            }
                            else
                            {
                                isTakeNonCommercialQty = false;
                            }
                        }

                        //List<TblPurchaseScheduleSummaryTO> TblPurchaseScheduleSummaryList = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseScheduleSummaryTO.RootScheduleId, false);
                        Int32 statusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED);
                        Int32 vehiclePhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.RECOVERY);

                        List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryList = SelectVehicleScheduleByRootAndStatusId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, statusId, vehiclePhaseId, conn, tran);
                        if (tblPurchaseScheduleSummaryList != null && tblPurchaseScheduleSummaryList.Count == 1)
                        {
                            //TblPurchaseScheduleSummaryTO tempToForRecovery = TblPurchaseScheduleSummaryList.Where(w => w.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY).FirstOrDefault();
                            // TblPurchaseScheduleSummaryTO tempToForCorrection = TblPurchaseScheduleSummaryList.Where(w => w.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS).FirstOrDefault();
                            TblPurchaseScheduleSummaryTO tempToForRecovery = tblPurchaseScheduleSummaryList[0];
                            if (tempToForRecovery != null)
                            {
                                List<TblPurchaseVehicleDetailsTO> recoveryDetailsList = _iTblPurchaseVehicleDetailsDAO.SelectAllTblPurchaseVehicleDetailsList(tempToForRecovery.IdPurchaseScheduleSummary);

                                double totalRecQty = 0;

                                if (recoveryDetailsList != null && recoveryDetailsList.Count > 0)
                                {
                                    foreach (var item in recoveryDetailsList)
                                    {

                                        if (isTakeNonCommercialQty)
                                        {
                                            totalRecQty += item.Qty;
                                        }
                                        else
                                        {
                                            if (item.IsNonCommercialItem == 0)
                                            {
                                                totalRecQty += item.Qty;
                                            }
                                        }

                                        totalProdAmtRec += item.ProductAomunt;
                                    }

                                }

                                //totalProdAmtRec = totalProdAmtRec / tempToForRecovery.Qty;
                                totalProdAmtRec = totalProdAmtRec / totalRecQty;
                                totalProdAmtRec = Math.Round(totalProdAmtRec, 3);
                            }
                            if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                            {
                                // List<TblPurchaseVehicleDetailsTO> correctionDetailsList = TblPurchaseVehicleDetailsDAO.SelectAllTblPurchaseVehicleDetailsList(tempToForCorrection.IdPurchaseScheduleSummary);
                                List<TblPurchaseVehicleDetailsTO> correctionDetailsList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList;

                                double totalCorrectionQty = 0;

                                if (correctionDetailsList != null && correctionDetailsList.Count > 0)
                                {
                                    foreach (var item in correctionDetailsList)
                                    {

                                        if (isTakeNonCommercialQty)
                                        {
                                            totalCorrectionQty += item.Qty;
                                        }
                                        else
                                        {
                                            if (item.IsNonCommercialItem == 0)
                                            {
                                                totalCorrectionQty += item.Qty;
                                            }

                                        }

                                        totalProdAmtCorrection += item.ProductAomunt;
                                    }
                                    //totalProdAmtCorrection = totalProdAmtCorrection / tblPurchaseScheduleSummaryTO.Qty;
                                    totalProdAmtCorrection = totalProdAmtCorrection / totalCorrectionQty;
                                    totalProdAmtCorrection = Math.Round(totalProdAmtCorrection, 3);
                                }
                            }
                        }

                        string[] arr = TblConfigParamsTORec.ConfigParamVal.Split(',');
                        if (arr.Length == 1)
                        {
                            Double limit = Convert.ToDouble(TblConfigParamsTORec.ConfigParamVal);
                            double diff = totalProdAmtCorrection - totalProdAmtRec;
                            diff = Math.Round(diff, 3);

                            if (diff > limit)
                            {
                                resultMsg.Text = "Correction Wt.Rate = (" + Math.Round(totalProdAmtCorrection, 2).ToString("N2") + ") ,  Recovery Wt.Rate = (" + Math.Round(totalProdAmtRec, 2).ToString("N2") + ")" + Environment.NewLine;
                                resultMsg.Text += " limit = (" + Math.Round(limit, 2).ToString("N2") + ")  " + Environment.NewLine + " and diff value = (" + Math.Round(diff, 2).ToString("N2") + ")";
                                resultMsg.Tag = resultMsg.Text;
                                resultMsg.Result = 0;
                                tblPurchaseScheduleSummaryTO.IsApproved = 0;
                            }
                            else
                            {
                                resultMsg.Result = 1;
                                tblPurchaseScheduleSummaryTO.IsApproved = 1;
                            }
                        }

                        //int minLimit;
                        //int maxLimit;
                        //string[] arr = TblConfigParamsTORec.ConfigParamVal.Split(',');
                        //minLimit = Convert.ToInt32(arr[0]);
                        //maxLimit = Convert.ToInt32(arr[1]);

                        //double diff = totalProdAmtCorrection - totalProdAmtRec;

                        //if (minLimit <= diff && diff <= maxLimit)
                        //{
                        //    resultMsg.Result = 1;
                        //    tblPurchaseScheduleSummaryTO.IsApproved = 1;
                        //}
                        //else
                        //{
                        //    resultMsg.Text = "Minimum limit = " + minLimit + " " + Environment.NewLine + " maximum limit = " + maxLimit;
                        //    resultMsg.Result = 0;
                        //    tblPurchaseScheduleSummaryTO.IsApproved = 0;
                        //}
                    }
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {

            }
            return resultMsg;

        }

        private int UpdateItemDetailsForApproveAndReject(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, DateTime serverDateTime, SqlConnection conn, SqlTransaction tran)
        {
            int result = 1;
            tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary > 0 ? tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary : tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
            if (tblPurchaseScheduleSummaryTO.IsApproved == 1 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS))
            {
                result = 0;
                tblPurchaseScheduleSummaryTO.IsRecovery = 1;
                tblPurchaseScheduleSummaryTO.IsUnloadingCompleted = 1;
                tblPurchaseScheduleSummaryTO.IsGradingCompleted = 1;
                // tblPurchaseScheduleSummaryTO.UpdatedOn =  _iCommonDAO.ServerDateTime;
                tblPurchaseScheduleSummaryTO.IsCorrectionCompleted = 1;
                tblPurchaseScheduleSummaryTO.CorretionCompletedOn = serverDateTime;
            }
            result = UpdateCorrectionCompletedFlag(tblPurchaseScheduleSummaryTO, conn, tran);
            // result = UpdateTblPurchaseScheduleSummaryStatusOnly(tblPurchaseScheduleSummaryTO, conn, tran);

            if (result >= 1)
            {
                if (tblPurchaseScheduleSummaryTO.StatusId != Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS))
                {
                    result = DeleteAndInsertOldRecords(tblPurchaseScheduleSummaryTO, false, conn, tran);
                }
                else if (tblPurchaseScheduleSummaryTO.StatusId != Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED))
                {
                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                    {
                        for (int i = 0; i < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                        {
                            TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = new TblPurchaseVehicleDetailsTO();
                            tblPurchaseVehicleDetailsTO = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[i];
                            result = _iTblPurchaseVehicleDetailsBL.UpdateTblPurchaseScheduleDetails(tblPurchaseVehicleDetailsTO, conn, tran);
                            if (result <= 0)
                            {
                                tblPurchaseVehicleDetailsTO.SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                                result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTO, conn, tran);
                                if (result <= 0)
                                {
                                    return result;
                                }
                            }


                        }
                    }
                }
                //Save Uploaded Images
                if (tblPurchaseScheduleSummaryTO.RecycleDocumentTOList != null && tblPurchaseScheduleSummaryTO.RecycleDocumentTOList.Count > 0)
                {
                    DateTime currentdate = _iCommonDAO.ServerDateTime;
                    result = _iTblRecycleDocumentBL.SaveUploadedImages(tblPurchaseScheduleSummaryTO.RecycleDocumentTOList, tblPurchaseScheduleSummaryTO.RootScheduleId, currentdate, conn, tran);
                    if (result <= 0)
                    {
                        return result;
                    }
                }
            }
            else
            {
                return result;
            }
            return result;
        }

        private int UpdateCorrectionCompletedFlag(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.UpdateCorrectionCompletedFlag(tblPurchaseScheduleSummaryTO, conn, tran);
        }

        private int DeleteAndInsertOldRecords(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean isUpdateScheduleDtls, SqlConnection conn, SqlTransaction tran)
        {
            //Prajakta[202-05-20] added for IOT
            Int32 tempStatusId = tblPurchaseScheduleSummaryTO.StatusId;
            int confiqId = _iTblConfigParamsDAO.IoTSetting();
            if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
            {
                tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.New;
                tblPurchaseScheduleSummaryTO.VehicleNo = String.Empty;
            }

            tblPurchaseScheduleSummaryTO.UpdatedOn = _iCommonDAO.ServerDateTime;
            int result = 1;
            //Update Purchase Schedule Details
            if (isUpdateScheduleDtls)
            {
                result = UpdateTblPurchaseScheduleSummaryStatusOnly(tblPurchaseScheduleSummaryTO, conn, tran);
            }
            else
            {
                if (tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.CORRECTION_DETAILS_SAVED || tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL))
                {
                    tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.UNLOADING_COMPLETED;
                }

                result = UpdatePurchaseScheduleCalculationDtls(tblPurchaseScheduleSummaryTO, conn, tran);

                // result = UpdateTblPurchaseScheduleSummaryStatusOnly(tblPurchaseScheduleSummaryTO, conn, tran);
            }

            if (result >= 1 && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
            {

                //if (result >= 1)
                {
                    //First Delete previous Item Details
                    Boolean isGetGradeExpDtls = true;
                    List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOTempList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                    if (tblPurchaseVehicleDetailsTOTempList != null && tblPurchaseVehicleDetailsTOTempList.Count > 0)
                    {
                        tblPurchaseVehicleDetailsTOTempList = tblPurchaseVehicleDetailsTOTempList.OrderByDescending(o => o.TransferedFrmScheduleId).ToList();
                        for (int b = 0; b < tblPurchaseVehicleDetailsTOTempList.Count; b++)
                        {

                            TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTLocalTO = tblPurchaseVehicleDetailsTOTempList[b];
                            if (tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count > 0)
                            {
                                for (int p = 0; p < tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count; p++)
                                {
                                    result = _iTblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);
                                    if (result < 0)
                                    {
                                        tran.Rollback();
                                        return 0;
                                    }
                                }
                            }

                            result = _iTblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);
                            if (result <= 0)
                            {
                                return 0;
                            }
                        }
                    }

                    if (result >= 1)
                    {
                        if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        {

                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.OrderBy(o => o.IsTransfered).ToList();
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.ForEach(
                                element =>
                                {
                                    if (element.TransferedFrmScheduleId > 0)
                                        element.IsTransfered = 1;
                                });
                            for (int a = 0; a < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; a++)
                            {
                                tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                                //tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].TransferedFrmScheduleId = 0;

                                if ((Int32)tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].IsTransfered == 1)
                                {
                                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].TransferedFrmScheduleId > 0)
                                    {
                                        var res = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(p => p.OldVehiclePurchaseId == tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].TransferedFrmScheduleId).FirstOrDefault();
                                        if (res != null)
                                        {
                                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].TransferedFrmScheduleId = res.IdVehiclePurchase;
                                        }
                                        else
                                        {
                                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].TransferedFrmScheduleId = 0;
                                        }
                                    }
                                }
                                tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].OldVehiclePurchaseId = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].IdVehiclePurchase;

                                result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a], conn, tran);
                                if (result <= 0)
                                {
                                    return 0;
                                }
                                else
                                {

                                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count > 0)
                                    {
                                        tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Where(w => w.ExpressionDtlsId > 0).ToList();

                                        for (int d = 0; d < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count; d++)
                                        {
                                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d].PurchaseScheduleDtlsId = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].IdVehiclePurchase;
                                            result = _iTblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d], conn, tran);
                                            if (result != 1)
                                            {
                                                tran.Rollback();
                                                return 0;
                                            }

                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }
            if (result == 1)
            {
                tblPurchaseScheduleSummaryTO.StatusId = tempStatusId;
            }
            return result;
        }

        // public ResultMessage SetStatusCompleteAfterCorrection(int purchaseEnquiryId, Int32 loginUserId, Int32 isAuto, SqlConnection conn, SqlTransaction tran, string saudaCloseRemark)
        // {
        //     ResultMessage resmsg = new ResultMessage();
        //     resmsg.MessageType = ResultMessageE.Information;
        //     Boolean isUpdateDtls = false;
        //     Boolean isProceed = false;
        //     TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(purchaseEnquiryId, conn, tran);
        //     if (enquiryTO == null)
        //     {
        //         resmsg.DisplayMessage = "Enquiry TO not found against enq id - " + purchaseEnquiryId;
        //         resmsg.Result = 0;
        //         resmsg.MessageType = ResultMessageE.Error;
        //         return resmsg;
        //     }
        //     else
        //     {
        //         if (enquiryTO.BookingQty > 0 || enquiryTO.IsOpenQtySauda == 1)
        //         {
        //             double diff = 0;
        //             //Prajakta[2019-07-24] Commented and added to check pendingBookingQty is in tolerance val while completing status
        //             //if (enquiryTO.PendingBookingQty <= 0)

        //             string ignoreStatusIdsStr = string.Empty;
        //             List<Int32> ignoreStatusIdsList = new List<int>();

        //             TblConfigParamsTO ignoreStatusIdsConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IGONRE_VEH_STATUS_FOR_CLOSE_SAUDA);
        //             if (ignoreStatusIdsConfigTO != null)
        //             {
        //                 ignoreStatusIdsStr = ignoreStatusIdsConfigTO.ConfigParamVal.ToString();
        //             }

        //             if (!String.IsNullOrEmpty(ignoreStatusIdsStr))
        //             {
        //                 ignoreStatusIdsList = ignoreStatusIdsStr.Split(',').Select(s => int.Parse(s)).ToList();
        //             }

        //             Boolean result = false;

        //             if (isAuto == 1)
        //                 result = CheckIfPendingBookingQtyIsInTole(enquiryTO, ref diff);
        //             else
        //                 result = true;

        //             if (result)
        //             {
        //                 List<TblPurchaseScheduleSummaryTO> TblPurchaseScheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();
        //                 TblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummary(enquiryTO.IdPurchaseEnquiry, conn, tran);

        //                 if (TblPurchaseScheduleSummaryTOList != null && TblPurchaseScheduleSummaryTOList.Count > 0)
        //                 {
        //                     if (ignoreStatusIdsList != null && ignoreStatusIdsList.Count > 0)
        //                     {
        //                         TblPurchaseScheduleSummaryTOList = TblPurchaseScheduleSummaryTOList.Where(a => !ignoreStatusIdsList.Contains(a.StatusId)).ToList();
        //                     }
        //                 }

        //                 if (TblPurchaseScheduleSummaryTOList != null && TblPurchaseScheduleSummaryTOList.Count > 0)
        //                 {
        //                     for (int Phase = 0; Phase < TblPurchaseScheduleSummaryTOList.Count; Phase++)
        //                     {

        //                         if (TblPurchaseScheduleSummaryTOList[Phase].ActualRootScheduleId != 0)
        //                         {
        //                             TblPurchaseScheduleSummaryTO PurchaseSummaryTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(TblPurchaseScheduleSummaryTOList[Phase].ActualRootScheduleId, true, conn, tran);

        //                             if (PurchaseSummaryTO == null)
        //                             {
        //                                 resmsg.DisplayMessage = "Root purchasesummaryTo not foung against vehicle id -" + TblPurchaseScheduleSummaryTOList[Phase].RootScheduleId;
        //                                 resmsg.Result = 0;
        //                                 resmsg.MessageType = ResultMessageE.Error;
        //                                 return resmsg;
        //                             }
        //                             //Prajakta[2019-08-28] Commented
        //                             if (PurchaseSummaryTO.IsCorrectionCompleted == 1 && PurchaseSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS))
        //                             //if (PurchaseSummaryTO.IsCorrectionCompleted == 1)
        //                             {
        //                                 isUpdateDtls = true;
        //                                 isProceed = true;
        //                                 continue;

        //                             }
        //                             else
        //                             {
        //                                 if (TblPurchaseScheduleSummaryTOList[Phase].RootScheduleId == 0)
        //                                     resmsg.DisplayMessage = "Please complete the correction for Vehicle No " + TblPurchaseScheduleSummaryTOList[Phase].VehicleNo + "/ Vehicle Id #" + TblPurchaseScheduleSummaryTOList[Phase].IdPurchaseScheduleSummary;
        //                                 else
        //                                     resmsg.DisplayMessage = "Please complete the correction for Vehicle No " + TblPurchaseScheduleSummaryTOList[Phase].VehicleNo + "/ Vehicle Id #" + TblPurchaseScheduleSummaryTOList[Phase].RootScheduleId;

        //                                 isUpdateDtls = false;
        //                                 isProceed = false;
        //                                 resmsg.Result = 0;
        //                                 resmsg.MessageType = ResultMessageE.Information;
        //                                 return resmsg;
        //                             }
        //                         }


        //                     }
        //                 }
        //                 else
        //                 {
        //                     if (isAuto == 0)
        //                     {
        //                         isProceed = true;
        //                     }
        //                 }
        //             }
        //             // else
        //             // {
        //             //     isProceed = true;
        //             // }

        //             if (isProceed)
        //             {
        //                 isUpdateDtls = true;
        //                 enquiryTO.SaudaCloseRemark = saudaCloseRemark;

        //                 if (enquiryTO.IsOpenQtySauda == 1)
        //                 {
        //                     enquiryTO.BookingQty = enquiryTO.PendingBookingQty;
        //                     enquiryTO.PendingBookingQty = 0;
        //                     diff = 0;
        //                 }
        //                 else
        //                 {
        //                     diff = enquiryTO.PendingBookingQty;
        //                     enquiryTO.PendingBookingQty = 0;
        //                 }
        //             }

        //             if (isUpdateDtls)
        //             {
        //                 //update status to complete
        //                 enquiryTO.ConsumedQty = diff;
        //                 resmsg = UpdateEnquiryCompleteStatus(enquiryTO, conn, tran);
        //                 if (resmsg.MessageType != ResultMessageE.Information)
        //                 {
        //                     return resmsg;
        //                 }

        //                 resmsg = _iTblPurchaseEnquiryQtyConsumptionBL.SaveConsumptionQtyAgainstBooking(enquiryTO, diff, isAuto, loginUserId, conn, tran);
        //                 if (resmsg.MessageType != ResultMessageE.Information)
        //                 {
        //                     return resmsg;
        //                 }

        //             }

        //         }
        //     }
        //     return resmsg;
        // }

        public ResultMessage SetStatusCompleteAfterCorrection(int purchaseEnquiryId, Int32 loginUserId, Int32 isAuto, SqlConnection conn, SqlTransaction tran, Int32 statusId, string saudaCloseRemark, Int32 rootScheduleId = 0, Int32 vehiclePhaseId = 0)
        {
            ResultMessage resmsg = new ResultMessage();
            resmsg.MessageType = ResultMessageE.Information;
            TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(purchaseEnquiryId, conn, tran);
            if (enquiryTO == null)
            {
                resmsg.DisplayMessage = "Enquiry TO not found against enq id - " + purchaseEnquiryId;
                resmsg.Result = 0;
                resmsg.MessageType = ResultMessageE.Error;
                return resmsg;
            }
            else
            {
                //Prajakta[2019-13-10] Commented to close any sauda
                //if (enquiryTO.BookingQty > 0 || enquiryTO.IsOpenQtySauda == 1)
                {
                    double diff = 0;
                    //Prajakta[2019-07-24] Commented and added to check pendingBookingQty is in tolerance val while completing status
                    //if (enquiryTO.PendingBookingQty <= 0)
                    resmsg = CheckIfAllVehCorrectionCompletedAgainstSauda(enquiryTO, isAuto, conn, tran);
                    if (resmsg.Result != 1)
                    {
                        return resmsg;
                    }

                    Boolean result = false;

                    TblConfigParamsTO closeEachSaudaConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_CLOSE_EACH_SAUDA);
                    if (closeEachSaudaConfigTO != null && closeEachSaudaConfigTO.ConfigParamVal == "1" && enquiryTO.BookingQty <= 0)
                    {
                        result = true;
                    }
                    else
                    {
                        if (enquiryTO.IsOpenQtySauda == 0)
                        {
                            if (enquiryTO.SaudaTypeE == Constants.SaudaTypeE.TONNAGE_QTY)
                            {
                                result = CheckIfPendingBookingQtyIsInTole(enquiryTO, ref diff, isAuto);
                            }
                            else if (enquiryTO.SaudaTypeE == Constants.SaudaTypeE.NO_OF_VEHICLES)
                            {
                                if (enquiryTO.PendNoOfVeh <= 0)
                                {
                                    result = true;
                                }
                                else if (enquiryTO.PendNoOfVeh > 0 && vehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)
                                {
                                    resmsg.DefaultSuccessBehaviour();
                                    return resmsg;
                                }
                                else
                                {
                                    //enquiryTO.StatusId = (int)Constants.TranStatusE.BOOKING_DELETE;//Reshma Commented for update as per requirement
                                    enquiryTO.StatusId = statusId;
                                    resmsg = CompleteSaudaStatusAndAddConsumptionEntry(enquiryTO, diff, isAuto, loginUserId, conn, tran);
                                    if (resmsg.MessageType != ResultMessageE.Information)
                                    {
                                        return resmsg;
                                    }
                                    resmsg.DefaultSuccessBehaviour();
                                    return resmsg;
                                }
                            }
                            else
                            {
                                resmsg.DefaultBehaviour();
                                resmsg.Result = 1;
                                resmsg.DisplayMessage = "Sauda Type no found";
                                return resmsg;
                            }
                        }
                        else
                        {

                            if (enquiryTO.IsOpenQtySauda == 1 && isAuto == 1)
                            {
                                TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_AUTO_CLOSE_OPEN_SAUDA);
                                if (tblConfigParamsTO != null && tblConfigParamsTO.ConfigParamVal == "1")
                                {

                                    TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(rootScheduleId, conn, tran);
                                    if (tblPurchaseVehicleSpotEntryTO != null)
                                    {
                                        if (tblPurchaseVehicleSpotEntryTO.PurchaseEnquiryId > 0 && tblPurchaseVehicleSpotEntryTO.IsLinkToExistingSauda == 0 && tblPurchaseVehicleSpotEntryTO.IsAutoSpotVehSauda == 1)
                                        {
                                            result = true;
                                        }
                                    }
                                }

                            }

                            if (enquiryTO.IsOpenQtySauda == 1 && isAuto == 0)
                            {
                                result = true;
                            }

                        }
                    }

                    if (result)
                    {
                        enquiryTO.SaudaCloseRemark = saudaCloseRemark;

                        if (enquiryTO.IsOpenQtySauda == 1)
                        {
                            enquiryTO.BookingQty = Math.Abs(enquiryTO.PendingBookingQty);
                            enquiryTO.PendingBookingQty = 0;
                            diff = 0;
                        }
                        else
                        {
                            diff = enquiryTO.PendingBookingQty;
                            enquiryTO.PendingBookingQty = 0;
                        }

                        //update status to complete
                        enquiryTO.ConsumedQty = diff;
                        enquiryTO.StatusId = statusId;
                        resmsg = CompleteSaudaStatusAndAddConsumptionEntry(enquiryTO, diff, isAuto, loginUserId, conn, tran);
                        if (resmsg.MessageType != ResultMessageE.Information)
                        {
                            return resmsg;
                        }

                    }
                    else
                    {
                        if (isAuto == 0)
                        {
                            resmsg.DefaultBehaviour();
                            resmsg.Result = 2;
                            resmsg.DisplayMessage = "Sauda went for approval";
                            return resmsg;
                        }
                    }
                }
            }
            return resmsg;
        }

        public ResultMessage CompleteSaudaStatusAndAddConsumptionEntry(TblPurchaseEnquiryTO enquiryTO, double diff, Int32 isAuto, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                enquiryTO.UpdatedOn = _iCommonDAO.ServerDateTime;
                resultMessage = UpdateEnquiryCompleteStatus(enquiryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                resultMessage = _iTblPurchaseEnquiryQtyConsumptionBL.SaveConsumptionQtyAgainstBooking(enquiryTO, diff, isAuto, loginUserId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in  CompleteSaudaStatusAndAddConsumptionEntry(TblPurchaseEnquiryTO enquiryTO,double diff,Int32 isAuto,Int32 loginUserId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }


        public ResultMessage CheckIfAllVehCorrectionCompletedAgainstSauda(TblPurchaseEnquiryTO enquiryTO, Int32 isAuto, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            string ignoreStatusIdsStr = string.Empty;
            List<Int32> ignoreStatusIdsList = new List<int>();

            TblConfigParamsTO ignoreStatusIdsConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IGONRE_VEH_STATUS_FOR_CLOSE_SAUDA);
            if (ignoreStatusIdsConfigTO != null)
            {
                ignoreStatusIdsStr = ignoreStatusIdsConfigTO.ConfigParamVal.ToString();
            }

            if (!String.IsNullOrEmpty(ignoreStatusIdsStr))
            {
                ignoreStatusIdsList = ignoreStatusIdsStr.Split(',').Select(s => int.Parse(s)).ToList();
            }

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();
            tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummary(enquiryTO.IdPurchaseEnquiry, conn, tran);

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                if (ignoreStatusIdsList != null && ignoreStatusIdsList.Count > 0)
                {
                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(a => !ignoreStatusIdsList.Contains(a.StatusId)).ToList();
                }
            }

            if (tblPurchaseScheduleSummaryTOList == null || tblPurchaseScheduleSummaryTOList.Count == 0)
            {
                if (isAuto == 0)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    return resultMessage;
                }
            }

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                for (int Phase = 0; Phase < tblPurchaseScheduleSummaryTOList.Count; Phase++)
                {
                    if (tblPurchaseScheduleSummaryTOList[Phase].ActualRootScheduleId != 0)
                    {
                        TblPurchaseScheduleSummaryTO PurchaseSummaryTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseScheduleSummaryTOList[Phase].ActualRootScheduleId, true, conn, tran);

                        if (PurchaseSummaryTO == null)
                        {
                            resultMessage.DisplayMessage = "Root purchasesummaryTo not foung against vehicle id -" + tblPurchaseScheduleSummaryTOList[Phase].RootScheduleId;
                            resultMessage.Result = 0;
                            resultMessage.MessageType = ResultMessageE.Error;
                            return resultMessage;
                        }
                        //Prajakta[2019-08-28] Commented
                        if (PurchaseSummaryTO.IsCorrectionCompleted == 1 && PurchaseSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS))
                        {
                            continue;

                        }
                        else
                        {
                            if (tblPurchaseScheduleSummaryTOList[Phase].RootScheduleId == 0)
                                resultMessage.DisplayMessage = "Please complete the correction for Vehicle No " + tblPurchaseScheduleSummaryTOList[Phase].VehicleNo + "/ Vehicle Id #" + tblPurchaseScheduleSummaryTOList[Phase].IdPurchaseScheduleSummary;
                            else
                                resultMessage.DisplayMessage = "Please complete the correction for Vehicle No " + tblPurchaseScheduleSummaryTOList[Phase].VehicleNo + "/ Vehicle Id #" + tblPurchaseScheduleSummaryTOList[Phase].RootScheduleId;

                            resultMessage.Result = 0;
                            resultMessage.MessageType = ResultMessageE.Information;
                            return resultMessage;
                        }
                    }
                }
            }

            resultMessage.DefaultSuccessBehaviour();
            return resultMessage;


        }

        public ResultMessage UpdateEnquiryCompleteStatus(TblPurchaseEnquiryTO enquiryTO, SqlConnection conn, SqlTransaction tran)
        {

            ResultMessage resultMessage = new ResultMessage();
            try
            {
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == null");
                }

                enquiryTO.PendingBookingQty = 0;
                //enquiryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.COMPLETED);
                enquiryTO.IsEnqTransfered = 0;
                int res = _iTblPurchaseEnquiryBL.UpdateTblBookingsForPurchase(enquiryTO, conn, tran);
                if (res <= 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Error while updating complete status against enqNo - " + enquiryTO.EnqDisplayNo;
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Sauda Completed Successfully";
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateEnquiryCompleteStatus(TblPurchaseEnquiryTO enquiryTO,SqlConnection connection,SqlTransaction tran)");
                return resultMessage;
            }

        }

        public string GetVehicleStatus(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            string statusDesc = "";
            if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_REPORTED_FOR_LOADING))
                statusDesc = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Reported Successfully.";
            else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.SEND_FOR_INSPECTION))
                statusDesc = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Sent For Inspection.";
            else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_REQUESTED))
                statusDesc = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Requested Successfully.";
            else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.SEND_IN))
                statusDesc = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Send In Successfully.";
            else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_OUT))
                statusDesc = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Out Successfully.";
            else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL))
                statusDesc = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Pending For Approval.";
            else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Convert.ToInt32(Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)))
                statusDesc = "Unloading Process For Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Completed.";
            else if (tblPurchaseScheduleSummaryTO.IsGradingCompleted == 1 && tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Convert.ToInt32(Constants.PurchaseVehiclePhasesE.GRADING)))
                statusDesc = "Grading Process For Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Completed.";
            else if (tblPurchaseScheduleSummaryTO.IsCorrectionCompleted == 1 && tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS)))
                statusDesc = "Correction Process For Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Completed.";
            else if (tblPurchaseScheduleSummaryTO.IsRecovery == 1 && tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED) && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Convert.ToInt32(Constants.PurchaseVehiclePhasesE.RECOVERY)))
                statusDesc = "Recovery Process For Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Completed.";

            else if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.SEND_FOR_VERIFICATION))
                statusDesc = "Vehicle No. : " + tblPurchaseScheduleSummaryTO.VehicleNo + " Is Already Send For Verification.";

            return statusDesc;
        }

        public TblPurchaseScheduleSummaryTO CheckVehiclePreviousStatus(Int32 CurrentStatusId, Int32 IdPurchaseScheduleSummary)
        {
            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTOTemp = SelectAllEnquiryScheduleSummaryTO(IdPurchaseScheduleSummary);
            if (tblPurchaseScheduleSummaryTOTemp == null)
            {
                return null;
            }
            else
            {
                if (tblPurchaseScheduleSummaryTOTemp.StatusId == CurrentStatusId)
                {
                    return null;
                }
                else
                {
                    return tblPurchaseScheduleSummaryTOTemp;
                }
            }
        }


        //public int UpdatePreviousActiveStatus(TblPurchaseScheduleSummaryTO scheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        //{
        //    int result = 0;

        //    List<TblPurchaseScheduleSummaryTO> previousScheduleList = new List<TblPurchaseScheduleSummaryTO>();
        //    if (scheduleSummaryTO.RootScheduleId > 0)
        //    {
        //        TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTOIsActive = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(scheduleSummaryTO.RootScheduleId, true, conn, tran);
        //        if (tblPurchaseScheduleSummaryTOIsActive == null)
        //        {
        //            return -1;
        //        }

        //        previousScheduleList.Add(tblPurchaseScheduleSummaryTOIsActive);

        //    }

        //    if (previousScheduleList != null && previousScheduleList.Count > 0)
        //    {

        //        var res = previousScheduleList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT).FirstOrDefault();
        //        if (res != null)
        //        {
        //            scheduleSummaryTO.IsActive = 0;
        //        }
        //        else
        //        {
        //            scheduleSummaryTO.IsActive = 1;
        //        }

        //        for (int q = 0; q < previousScheduleList.Count; q++)
        //        {
        //            if (scheduleSummaryTO.IsUnloadingCompleted > 0)
        //            {
        //                previousScheduleList[q].IsUnloadingCompleted = scheduleSummaryTO.IsUnloadingCompleted;
        //            }
        //            if (previousScheduleList[q].IsActive > 0 && scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT)
        //            {
        //                scheduleSummaryTO.VehiclePhaseId = previousScheduleList[q].VehiclePhaseId;
        //            }
        //            if (previousScheduleList[q].IsGradingCompleted > 0)
        //            {
        //                scheduleSummaryTO.IsGradingCompleted = previousScheduleList[q].IsGradingCompleted;
        //            }
        //            if (previousScheduleList[q].IsRecovery > 0)
        //            {
        //                scheduleSummaryTO.IsRecovery = previousScheduleList[q].IsRecovery;
        //            }
        //            if (previousScheduleList[q].IsCorrectionCompleted > 0)
        //            {
        //                scheduleSummaryTO.IsCorrectionCompleted = previousScheduleList[q].IsCorrectionCompleted;
        //            }
        //            if (scheduleSummaryTO.NarrationId > 0)
        //            {
        //                previousScheduleList[q].NarrationId = scheduleSummaryTO.NarrationId;
        //            }
        //            previousScheduleList[q].VehicleTypeId = scheduleSummaryTO.VehicleTypeId;
        //            if (scheduleSummaryTO.IsGradingCompleted > 0)
        //            {
        //                previousScheduleList[q].IsGradingCompleted = 1;
        //            }
        //            if (previousScheduleList[q].StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT)
        //            {
        //                previousScheduleList[q].IsActive = 1;
        //                previousScheduleList[q].Qty = scheduleSummaryTO.Qty;
        //                previousScheduleList[q].VehiclePhaseId = scheduleSummaryTO.VehiclePhaseId;

        //                if (scheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
        //             && scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
        //                {
        //                    previousScheduleList[q].VehiclePhaseId = (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS;
        //                }

        //            }
        //            else
        //            {
        //                previousScheduleList[q].IsActive = 0;
        //            }
        //            if (scheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
        //              && scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
        //            {
        //                previousScheduleList[q].IsCorrectionCompleted = 1;
        //            }
        //            if (scheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY)
        //            {
        //                previousScheduleList[q].IsRecovery = 1;
        //            }

        //            result = UpdateTblPurchaseScheduleSummary(previousScheduleList[q], conn, tran);
        //            if (result <= 0)
        //            {
        //                return result;
        //            }
        //        }
        //    }
        //    else
        //    {
        //        scheduleSummaryTO.IsActive = 1;
        //    }

        //    return result;
        //}

        public int UpdatePreviousActiveStatus(TblPurchaseScheduleSummaryTO scheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            int result = 0;
            List<TblPurchaseScheduleSummaryTO> previousScheduleList = new List<TblPurchaseScheduleSummaryTO>();
            Boolean isVehOut = false;
            if (scheduleSummaryTO.ActualRootScheduleId > 0)
            {
                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTOIsActive = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(scheduleSummaryTO.ActualRootScheduleId, true, conn, tran);
                if (tblPurchaseScheduleSummaryTOIsActive == null)
                {
                    return -1;
                }
                previousScheduleList.Add(tblPurchaseScheduleSummaryTOIsActive);
            }

            if (previousScheduleList != null && previousScheduleList.Count > 0)
            {

                //var res = previousScheduleList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT).FirstOrDefault();
                var res = previousScheduleList.Where(a => a.IsVehicleOut == 1).FirstOrDefault();
                if (res != null)
                {
                    scheduleSummaryTO.IsActive = 0;
                    isVehOut = true;
                }
                else
                {
                    scheduleSummaryTO.IsActive = 1;
                }

                for (int k = 0; k < previousScheduleList.Count; k++)
                {
                    TblPurchaseScheduleSummaryTO tempTO = previousScheduleList[k];

                    if (scheduleSummaryTO.IsUnloadingCompleted > 0)
                    {
                        tempTO.IsUnloadingCompleted = scheduleSummaryTO.IsUnloadingCompleted;
                    }

                    if (scheduleSummaryTO.IsGradingCompleted > 0)
                    {
                        tempTO.IsGradingCompleted = scheduleSummaryTO.IsGradingCompleted;
                    }

                    if (scheduleSummaryTO.IsCorrectionCompleted > 0)
                    {
                        tempTO.IsCorrectionCompleted = scheduleSummaryTO.IsCorrectionCompleted;
                    }

                    if (scheduleSummaryTO.IsRecovery > 0)
                    {
                        tempTO.IsRecovery = scheduleSummaryTO.IsRecovery;
                    }

                    if (isVehOut)
                    {
                        tempTO.VehiclePhaseId = scheduleSummaryTO.VehiclePhaseId;
                        tempTO.VehicleTypeId = scheduleSummaryTO.VehicleTypeId;
                        tempTO.Qty = scheduleSummaryTO.Qty;
                        tempTO.GradingComplOn = scheduleSummaryTO.GradingComplOn;
                        tempTO.IsActive = 1;
                    }
                    else
                    {
                        tempTO.IsActive = 0;
                    }
                    int configId = _iTblConfigParamsDAO.IoTSetting();
                    if (configId == (Int32)Constants.WeighingDataSourceE.IoT)
                    {
                        tempTO.VehicleNo = string.Empty;
                        tempTO.StatusId = (Int32)Constants.TranStatusE.New;
                    }
                    result = UpdateTblPurchaseScheduleSummary(tempTO, conn, tran);
                    if (result <= 0)
                    {
                        return result;
                    }
                }

                // for (int q = 0; q < previousScheduleList.Count; q++)
                // {
                //     if (scheduleSummaryTO.IsUnloadingCompleted > 0)
                //     {
                //         previousScheduleList[q].IsUnloadingCompleted = scheduleSummaryTO.IsUnloadingCompleted;
                //     }
                //     //if (previousScheduleList[q].IsActive > 0 && scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT)
                //     if (previousScheduleList[q].IsActive > 0 && scheduleSummaryTO.IsVehicleOut == 1)
                //     // if (previousScheduleList[q].IsActive > 0 && previousScheduleList[q].IsVehicleOut == 1)
                //     {
                //         scheduleSummaryTO.VehiclePhaseId = previousScheduleList[q].VehiclePhaseId;
                //     }
                //     if (previousScheduleList[q].IsGradingCompleted > 0)
                //     {
                //         scheduleSummaryTO.IsGradingCompleted = previousScheduleList[q].IsGradingCompleted;
                //     }
                //     if (previousScheduleList[q].IsRecovery > 0)
                //     {
                //         scheduleSummaryTO.IsRecovery = previousScheduleList[q].IsRecovery;
                //     }
                //     if (previousScheduleList[q].IsCorrectionCompleted > 0)
                //     {
                //         scheduleSummaryTO.IsCorrectionCompleted = previousScheduleList[q].IsCorrectionCompleted;
                //     }
                //     if (scheduleSummaryTO.NarrationId > 0)
                //     {
                //         previousScheduleList[q].NarrationId = scheduleSummaryTO.NarrationId;
                //     }
                //     previousScheduleList[q].VehicleTypeId = scheduleSummaryTO.VehicleTypeId;
                //     if (scheduleSummaryTO.IsGradingCompleted > 0)
                //     {
                //         previousScheduleList[q].IsGradingCompleted = 1;
                //     }
                //     if (previousScheduleList[q].StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT)
                //     //if (previousScheduleList[q].IsVehicleOut == 1)
                //     {
                //         previousScheduleList[q].IsActive = 1;
                //         previousScheduleList[q].Qty = scheduleSummaryTO.Qty;

                //         if (previousScheduleList[q].IsVehicleOut == 1)
                //             previousScheduleList[q].VehiclePhaseId = scheduleSummaryTO.VehiclePhaseId;

                //         if (scheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
                //      && scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                //         {
                //             previousScheduleList[q].VehiclePhaseId = (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS;
                //         }

                //     }
                //     else
                //     {
                //         previousScheduleList[q].IsActive = 0;
                //     }
                //     if (scheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
                //       && scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                //     {
                //         previousScheduleList[q].IsCorrectionCompleted = 1;
                //     }
                //     if (scheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY)
                //     {
                //         previousScheduleList[q].IsRecovery = 1;
                //     }
                //     previousScheduleList[q].VehicleNo = string.Empty;
                //     previousScheduleList[q].StatusId = (Int32)Constants.TranStatusE.New;
                //     result = UpdateTblPurchaseScheduleSummary(previousScheduleList[q], conn, tran);
                //     if (result <= 0)
                //     {
                //         return result;
                //     }
                // }
            }
            else
            {
                scheduleSummaryTO.IsActive = 1;
            }

            return result;
        }


        public int UpdateItemDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean isItemChange, DateTime currentdate, SqlConnection conn, SqlTransaction tran)
        {

            int result = 0;

            if (tblPurchaseScheduleSummaryTO != null)
            {

                // if (!isItemChange)
                // {
                //     Boolean isGetGradeExpDtls = true;
                //     tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                //     tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId, isGetGradeExpDtls, conn, tran);
                // }


                //Prajakta[2019-01-17] Previous Commented
                // List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOTempList = TblPurchaseScheduleSummaryBL.SelectTblPurchaseScheduleDtlsByRootScheduleId(tblPurchaseScheduleSummaryTO.RootScheduleId, Convert.ToInt32(StaticStuff.Constants.TranStatusE.VEHICLE_OUT).ToString(), conn, tran);
                // if (tblPurchaseScheduleSummaryTOTempList != null && tblPurchaseScheduleSummaryTOTempList.Count > 0)
                // {
                //     tblPurchaseScheduleSummaryTO.IsActive = 0;
                // }
                // else
                // {
                //     TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTempTO = SelectAllEnquiryScheduleSummaryTO(tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId, true, conn, tran);
                //     if (tblPurchaseScheduleSummaryTempTO != null)
                //     {
                //         tblPurchaseScheduleSummaryTempTO.IsActive = 0;
                //         result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTempTO, conn, tran);
                //         if (result <= 0)
                //         {
                //             return result;
                //         }
                //     }
                //     else
                //     {
                //         tblPurchaseScheduleSummaryTO.IsActive = 1;
                //     }
                // }

                //Make all previous records isActive = 0 only vehicle out record will have isactive = 1

                TblPurchaseScheduleSummaryTO isVehicleOutTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, true, conn, tran);
                // TblPurchaseScheduleSummaryTO isVehicleOutTO = new TblPurchaseScheduleSummaryTO();
                isVehicleOutTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(isVehicleOutTO.IdPurchaseScheduleSummary, true, conn, tran);
                result = UpdatePreviousActiveStatus(tblPurchaseScheduleSummaryTO, conn, tran);
                if (result >= 1)
                {
                    if ((tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT
                        || tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.REJECTED_VEHICLE_OUT)
                        && tblPurchaseScheduleSummaryTO.IsVehicleOut == 1)
                    {
                        result = _iTblPurchaseScheduleSummaryDAO.UpdateIsVehicleOut(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result == -1)
                        {
                            return result;
                        }
                    }

                    if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING
                    && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                    {
                        tblPurchaseScheduleSummaryTO.IsGradingCompleted = 1;
                        tblPurchaseScheduleSummaryTO.GradingComplOn = currentdate;
                        result = _iTblPurchaseScheduleSummaryDAO.UpdateGradingCompletedOn(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result == -1)
                        {
                            return result;
                        }
                    }

                    if (tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
                 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                    {
                        tblPurchaseScheduleSummaryTO.IsCorrectionCompleted = 1;

                        result = 0;
                        tblPurchaseScheduleSummaryTO.IsRecovery = 1;
                        tblPurchaseScheduleSummaryTO.IsUnloadingCompleted = 1;
                        tblPurchaseScheduleSummaryTO.IsGradingCompleted = 1;
                        tblPurchaseScheduleSummaryTO.IsCorrectionCompleted = 1;
                        tblPurchaseScheduleSummaryTO.CorretionCompletedOn = currentdate;
                        if (tblPurchaseScheduleSummaryTO.IsBoth == 1)
                        {
                            tblPurchaseScheduleSummaryTO.IsBoth = 1;
                        }
                        // tblPurchaseScheduleSummaryTO.UpdatedOn =  _iCommonDAO.ServerDateTime;

                        result = UpdateCorrectionCompletedFlag(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result == -1)
                        {
                            return result;
                        }

                    }

                    if (tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.CORRECTION_DETAILS_SAVED || tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL))
                    {
                        tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.UNLOADING_COMPLETED;
                    }
                    #region Update status on IoT and avoid update data on Db @KKM

                    DimStatusTO statusTO = _iDimStatusDAO.SelectDimStatus(tblPurchaseScheduleSummaryTO.StatusId, conn, tran);
                    // if (statusTO == null || statusTO.PrevStatusId == 0)
                    if (statusTO == null)
                    {
                        return 0;
                    }

                    int configId = _iTblConfigParamsDAO.IoTSetting();
                    int statusId = tblPurchaseScheduleSummaryTO.StatusId;
                    string vehicleNo = tblPurchaseScheduleSummaryTO.VehicleNo;
                    Int32 tempStatusId = 0;

                    if (configId == (Int32)Constants.WeighingDataSourceE.IoT)
                    {


                        if (isVehicleOutTO != null)
                        {
                            tempStatusId = isVehicleOutTO.StatusId;

                            //Prajakta[2021-05-20] Commented
                            if (tempStatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT && isVehicleOutTO.IsVehicleOut == 0)
                            {

                                isVehicleOutTO.StatusId = (Int32)Constants.TranStatusE.New;
                                isVehicleOutTO.VehicleNo = String.Empty;
                                isVehicleOutTO.IsVehicleOut = 1;
                                isVehicleOutTO.IsActive = 1;

                                //Added By kiran for insert summury and details record for out entry
                                List<TblPurchaseScheduleSummaryTO> tempList = new List<TblPurchaseScheduleSummaryTO>();
                                tempList.Add(isVehicleOutTO);
                                ResultMessage resultMessage = InsertScheduleDtls(tempList, conn, tran);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return 0;
                                }
                                tblPurchaseScheduleSummaryTO.IsActive = 0;
                                result = UpdateIsActiveOnly(tblPurchaseScheduleSummaryTO, conn, tran);
                                if (result != 1)
                                {
                                    return 0;
                                }
                                result = UpdatePreviousActiveStatus(tblPurchaseScheduleSummaryTO, conn, tran);
                                if (result == -1)
                                {
                                    return 0;
                                }

                                result = _iTblPurchaseScheduleSummaryDAO.UpdateIsVehicleOut(isVehicleOutTO, conn, tran);
                                if (result == -1)
                                {
                                    return result;
                                }
                                tblPurchaseScheduleSummaryTO.IsVehicleOut = isVehicleOutTO.IsVehicleOut;
                            }

                        }

                        tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.New;
                        tblPurchaseScheduleSummaryTO.VehicleNo = String.Empty;

                        if (tempStatusId != (Int32)Constants.TranStatusE.VEHICLE_OUT)
                        {
                            object[] frame = new object[2] { tblPurchaseScheduleSummaryTO.ModbusRefId, statusTO.IotStatusId };
                            result = _iIotCommunication.UpdateLoadingStatusOnGateAPIToModbusTcpApi(tblPurchaseScheduleSummaryTO, frame);
                            if (result != 1)
                            {
                                return 0;
                            }
                        }

                    }
                    #endregion

                    //TblPurchaseScheduleSummaryTO tempScheduleSummaryTO = tblPurchaseScheduleSummaryTO.DeepCopy();

                    result = _iTblPurchaseScheduleSummaryDAO.InsertTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);

                    if (result == 1)
                    {
                        tblPurchaseScheduleSummaryTO.StatusId = statusId;
                        tblPurchaseScheduleSummaryTO.VehicleNo = vehicleNo;
                        if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        {

                            //Prajakta[2019-02-07] Added for correction
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.OrderBy(a => a.IsTransfered == 1).ToList();

                            for (int i = 0; i < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                            {
                                TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[i];
                                tblPurchaseVehicleDetailsTO.SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;

                                if ((Int32)tblPurchaseVehicleDetailsTO.IsTransfered == 1 && tblPurchaseVehicleDetailsTO.TransferedFrmScheduleId > 0)
                                {
                                    var res = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.OldVehiclePurchaseId == tblPurchaseVehicleDetailsTO.IdVehiclePurchase).FirstOrDefault();
                                    if (res != null)
                                    {
                                        tblPurchaseVehicleDetailsTO.TransferedFrmScheduleId = res.IdVehiclePurchase;
                                    }
                                    else
                                        tblPurchaseVehicleDetailsTO.TransferedFrmScheduleId = 0;
                                }
                                else
                                    tblPurchaseVehicleDetailsTO.TransferedFrmScheduleId = 0;

                                tblPurchaseVehicleDetailsTO.OldVehiclePurchaseId = tblPurchaseVehicleDetailsTO.IdVehiclePurchase;

                                result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTO, conn, tran);
                                if (result <= 0)
                                {
                                    return result;
                                }
                                else
                                {
                                    if (tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Count > 0)
                                    {
                                        tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList = tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Where(w => w.ExpressionDtlsId > 0).ToList();

                                        for (int p = 0; p < tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList.Count; p++)
                                        {
                                            tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList[p].PurchaseScheduleDtlsId = tblPurchaseVehicleDetailsTO.IdVehiclePurchase;
                                            result = _iTblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseVehicleDetailsTO.GradeExpressionDtlsTOList[p], conn, tran);
                                            if (result <= 0)
                                            {
                                                return result;
                                            }
                                        }
                                    }
                                }

                            }
                        }

                        //Save Uploaded Images
                        if (tblPurchaseScheduleSummaryTO.RecycleDocumentTOList != null && tblPurchaseScheduleSummaryTO.RecycleDocumentTOList.Count > 0)
                        {
                            result = _iTblRecycleDocumentBL.SaveUploadedImages(tblPurchaseScheduleSummaryTO.RecycleDocumentTOList, tblPurchaseScheduleSummaryTO.RootScheduleId, currentdate, conn, tran);
                            if (result <= 0)
                            {
                                return result;
                            }
                        }
                        #region Commartial approval updation

                        //Commartial approval after delete old status entry from tblPurchaseScheduleSummary
                        if (statusTO != null && statusTO.IdStatus == 503 && tblPurchaseScheduleSummaryTO.CommercialApproval == 1 && statusTO.PrevStatusId == 524)
                        {
                            TblPurchaseScheduleSummaryTO beforeUpdateStatusTO = SelectScheduleSummaryDetailByScheduleID(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, statusTO.PrevStatusId, tblPurchaseScheduleSummaryTO.RootScheduleId, conn, tran);

                            if (beforeUpdateStatusTO != null)
                            {

                                result = _iTblGradeExpressionDtlsBL.DeleteGradeExpDtlsScheduleVehSchedule(beforeUpdateStatusTO.IdPurchaseScheduleDetails, conn, tran);
                                if (result < 0)
                                {
                                    tran.Rollback();
                                    return 0;
                                }

                                result = _iTblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(beforeUpdateStatusTO.IdPurchaseScheduleDetails, conn, tran);
                                if (result < 0)
                                {
                                    tran.Rollback();
                                    return 0;
                                }

                                if (result >= 0)
                                {
                                    result = DeleteTblPurchaseScheduleSummary(beforeUpdateStatusTO.IdPurchaseScheduleSummary, conn, tran);

                                    if (result <= 0)
                                    {
                                        tran.Rollback();
                                        return 0;
                                    }
                                }
                            }
                        }

                        #endregion
                    }
                    else
                    {
                        return result;
                    }
                }
                else
                {
                    return result;
                }

            }

            return result;
        }

        // public  ResultMessage CalculateRecoveryItemDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        // {
        //     ResultMessage resultMessage = new StaticStuff.ResultMessage();

        //     try
        //     {

        //         Int32 rootScheduleId = tblPurchaseScheduleSummaryTO.RootScheduleId;
        //         if (rootScheduleId == 0)
        //         {
        //             rootScheduleId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //         }


        //         List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = TblPurchaseScheduleSummaryBL.SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
        //         if (tblPurchaseScheduleSummaryTOList == null || tblPurchaseScheduleSummaryTOList.Count == 0)
        //         {
        //             throw new Exception("tblPurchaseScheduleSummaryTOList == null ");
        //         }

        //         var tempGradingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).FirstOrDefault();
        //         if (tempGradingCompleted == null)
        //         {
        //             throw new Exception("tempGradingCompleted == null ");
        //         }

        //         if (tempGradingCompleted.PurchaseScheduleSummaryDetailsTOList == null || tempGradingCompleted.PurchaseScheduleSummaryDetailsTOList.Count == 0)
        //         {
        //             throw new Exception("tempGradingCompleted.PurchaseScheduleSummaryDetailsTOList == null ");
        //         }

        //         var tempUnloadingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)).FirstOrDefault();

        //         if (tempUnloadingCompleted == null)
        //         {
        //             throw new Exception("tempUnloadingCompleted == null ");
        //         }




        //         resultMessage.DefaultSuccessBehaviour();
        //         return resultMessage;
        //     }
        //     catch (Exception ex)
        //     {
        //         resultMessage.DefaultExceptionBehaviour(ex, "UpdategradingItemDtlsAgainstVehicle(TblPurchaseScheduleSummaryTO previousPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)");
        //         return resultMessage;
        //     }

        // }

        public ResultMessage CalculateRecoveryItemDtls(TblPurchaseScheduleSummaryTO recoveryScheduleTO, TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();

            try
            {

                Int32 rootScheduleId = recoveryScheduleTO.RootScheduleId;
                if (rootScheduleId == 0)
                {
                    rootScheduleId = recoveryScheduleTO.IdPurchaseScheduleSummary;
                }


                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
                if (tblPurchaseScheduleSummaryTOList == null || tblPurchaseScheduleSummaryTOList.Count == 0)
                {
                    throw new Exception("tblPurchaseScheduleSummaryTOList == null ");
                }

                //var tempGradingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).FirstOrDefault();

                //if (tempGradingCompleted != null)
                {
                    var tempUnloadingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)).FirstOrDefault();

                    resultMessage = CalculateExpressionAgaintGrading(recoveryScheduleTO, tempUnloadingCompleted, weighingStageSummaryTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error In CalculateExpressionAgaintGrading() ");
                    }
                }



                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "UpdategradingItemDtlsAgainstVehicle(TblPurchaseScheduleSummaryTO previousPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }

        }

        public List<TblPurchaseWeighingStageSummaryTO> CustomCheckIsRecoveryAndGradingCompleted(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, ref TblPurchaseScheduleSummaryTO gradingScheduleTO, Boolean isTakeGradingTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            Boolean isAutoSubmitRec = false;
            Boolean result = false;
            List<TblPurchaseWeighingStageSummaryTO> weighingDtlsList = new List<TblPurchaseWeighingStageSummaryTO>();

            //TblConfigParamsTO isAutoSubmitRecTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_AUTO_SUBMIT_RECOVERY_DTLS);
            //if(isAutoSubmitRecTO != null && isAutoSubmitRecTO.ConfigParamVal == "1")
            //{
            //    isAutoSubmitRec = true;
            //}

            Int32 rootScheduleId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                var tempRecoveryCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.RECOVERY)).FirstOrDefault();
                if (tempRecoveryCompleted == null)
                {
                    //if (isAutoSubmitRec == false)
                    //{
                    //    var tempGradingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).FirstOrDefault();
                    //    if (tempGradingCompleted == null)
                    //    {
                    //        result = false;
                    //        return result;
                    //    }
                    //    gradingScheduleTO = new TblPurchaseScheduleSummaryTO();
                    //    gradingScheduleTO = tempGradingCompleted.DeepCopy();
                    //}

                    var tempGradingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).FirstOrDefault();
                    if (tempGradingCompleted != null)
                    {
                        gradingScheduleTO = new TblPurchaseScheduleSummaryTO();
                        gradingScheduleTO = tempGradingCompleted.DeepCopy();
                    }
                    //var tempUnloadingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)).FirstOrDefault();
                    //if (tempUnloadingCompleted != null)
                    {
                        ////// todo 
                        weighingDtlsList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(rootScheduleId, ((Int32)Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);

                    }
                }
            }
            return weighingDtlsList;
        }

        public Boolean CheckIsRecoveryAndGradingCompleted(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, ref TblPurchaseScheduleSummaryTO gradingScheduleTO, Boolean isTakeGradingTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            Boolean isAutoSubmitRec = false;
            Boolean result = false;
            List<TblPurchaseWeighingStageSummaryTO> weighingDtlsList = new List<TblPurchaseWeighingStageSummaryTO>();

            //TblConfigParamsTO isAutoSubmitRecTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_AUTO_SUBMIT_RECOVERY_DTLS);
            //if(isAutoSubmitRecTO != null && isAutoSubmitRecTO.ConfigParamVal == "1")
            //{
            //    isAutoSubmitRec = true;
            //}

            Int32 rootScheduleId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                var tempRecoveryCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.RECOVERY)).FirstOrDefault();
                if (tempRecoveryCompleted == null)
                {
                    //if (isAutoSubmitRec == false)
                    //{
                    //    var tempGradingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).FirstOrDefault();
                    //    if (tempGradingCompleted == null)
                    //    {
                    //        result = false;
                    //        return result;
                    //    }
                    //    gradingScheduleTO = new TblPurchaseScheduleSummaryTO();
                    //    gradingScheduleTO = tempGradingCompleted.DeepCopy();
                    //}

                    var tempGradingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.GRADING)).FirstOrDefault();
                    if (tempGradingCompleted != null)
                    {
                        gradingScheduleTO = new TblPurchaseScheduleSummaryTO();
                        gradingScheduleTO = tempGradingCompleted.DeepCopy();
                    }
                    //var tempUnloadingCompleted = tblPurchaseScheduleSummaryTOList.Where(w => w.VehiclePhaseId == Convert.ToInt32(StaticStuff.Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED)).FirstOrDefault();
                    //if (tempUnloadingCompleted != null)
                    {
                        ////// todo 
                        weighingDtlsList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(rootScheduleId, ((Int32)Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
                        if (weighingDtlsList != null && weighingDtlsList.Count > 0)
                        {
                            for (int i = 0; i < weighingDtlsList.Count; i++)
                            {
                                if (weighingDtlsList[i].IsRecConfirm == 1)
                                {
                                    result = true;
                                    continue;
                                }
                                else
                                {
                                    result = false;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        public ResultMessage CalculateExpressionAgaintGrading(TblPurchaseScheduleSummaryTO recoveryScheduleTO, TblPurchaseScheduleSummaryTO tempUnloadingCompleted, TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();

            try
            {

                // if (gradingCompleted == null || gradingCompleted.VehiclePhaseId != (Int32)Constants.PurchaseVehiclePhasesE.GRADING)
                // {
                //     throw new Exception("Grading Schedule TO not found");
                // }

                int RootScheduleId = 0;
                if (tempUnloadingCompleted.RootScheduleId > 0)
                { RootScheduleId = tempUnloadingCompleted.RootScheduleId; }
                else
                {
                    RootScheduleId = tempUnloadingCompleted.IdPurchaseScheduleSummary;
                }
                List<TblPurchaseGradingDtlsTO> tblPurchaseGradingDtlsTOList = _iTblPurchaseGradingDtlsBL.SelectTblPurchaseGradingDtlsTOListByScheduleId(RootScheduleId.ToString());
                if (tblPurchaseGradingDtlsTOList == null || tblPurchaseGradingDtlsTOList.Count == 0)
                {
                    throw new Exception("tblPurchaseGradingDtlsTOList == null");
                }

                if (weighingStageSummaryTO != null)
                {
                    tblPurchaseGradingDtlsTOList.Where(a => a.PurchaseWeighingStageId == weighingStageSummaryTO.IdPurchaseWeighingStage).ToList().ForEach(c => c.RecoveryPer = weighingStageSummaryTO.RecoveryPer);
                }

                List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = ConvertGradingListToScheduleItemList(tblPurchaseGradingDtlsTOList);

                resultMessage = CalculateItemDetails(tblPurchaseVehicleDetailsTOList, tempUnloadingCompleted, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error while calculation of item details");
                }

                double baseMetalCost = CalculateItemsMetalCost(tblPurchaseVehicleDetailsTOList, recoveryScheduleTO);
                AsignSignleGradePadtaVal(baseMetalCost, tblPurchaseVehicleDetailsTOList);

                //object assign
                recoveryScheduleTO.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;

                // Int32 result = TblPurchaseScheduleSummaryBL.UpdateScheduleDtls(gradingCompleted, conn, tran);
                // if (result != 1)
                // {
                //     throw new Exception("Error while updating grade dtls against schedule");
                // }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CalculateExpressionAgaintGrading(TblPurchaseScheduleSummaryTO gradingCompleted, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }

        public List<TblPurchaseVehicleDetailsTO> ConvertGradingListToScheduleItemList(List<TblPurchaseGradingDtlsTO> tblPurchaseGradingDtlsTOList)
        {
            List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

            for (int i = 0; i < tblPurchaseGradingDtlsTOList.Count; i++)
            {
                TblPurchaseGradingDtlsTO tblPurchaseGradingDtlsTO = tblPurchaseGradingDtlsTOList[i];


                TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = new TblPurchaseVehicleDetailsTO();

                tblPurchaseVehicleDetailsTO.Qty = tblPurchaseGradingDtlsTO.QtyMT;
                tblPurchaseVehicleDetailsTO.ProdItemId = tblPurchaseGradingDtlsTO.ProdItemId;
                tblPurchaseVehicleDetailsTO.Rate = tblPurchaseGradingDtlsTO.Rate;
                tblPurchaseVehicleDetailsTO.ItemBookingRate = tblPurchaseGradingDtlsTO.ItemBookingRate;
                tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseGradingDtlsTO.ProductAmount;
                tblPurchaseVehicleDetailsTO.Recovery = tblPurchaseGradingDtlsTO.RecoveryPer;
                tblPurchaseVehicleDetailsTO.IsNonCommercialItem = tblPurchaseGradingDtlsTO.IsNonCommercialItem;
                tblPurchaseVehicleDetailsTO.ProcessVarId = tblPurchaseGradingDtlsTO.ProcessVarId;
                //tblPurchaseVehicleDetailsTO.ProcessVarValue = tblPurchaseGradingDtlsTO.ProcessVarValue;

                tblPurchaseVehicleDetailsTOList.Add(tblPurchaseVehicleDetailsTO);
            }

            return tblPurchaseVehicleDetailsTOList;

        }

        //Prajakta[2019-01-25] Added to calculate item details
        public ResultMessage CalculateGradingItemsDtls(TblPurchaseScheduleSummaryTO gradingScheduleTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOListForRecovery = new List<TblPurchaseVehicleDetailsTO>();

            try
            {
                if (gradingScheduleTO == null || gradingScheduleTO.VehiclePhaseId != (Int32)Constants.PurchaseVehiclePhasesE.GRADING)
                {
                    throw new Exception("Grading Schedule TO not found");
                }

                if (gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList == null || gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count == 0)
                {
                    throw new Exception("gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList == null");
                }

                //get new schedule details
                Boolean isGetGradeExpDtls = false;
                tblPurchaseVehicleDetailsTOListForRecovery = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(gradingScheduleTO.RootScheduleId, isGetGradeExpDtls);
                if (tblPurchaseVehicleDetailsTOListForRecovery == null || tblPurchaseVehicleDetailsTOListForRecovery.Count == 0)
                {
                    throw new Exception("tblPurchaseVehicleDetailsTOListForRecovery == null");
                }

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(gradingScheduleTO.PurchaseEnquiryId);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO==NULL For enquiry Id=" + gradingScheduleTO.PurchaseEnquiryId);
                }


                for (int i = 0; i < gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                {
                    TblPurchaseVehicleDetailsTO tempGradingDtlsTO = gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList[i];
                    List<TblPurchaseVehicleDetailsTO> res = tblPurchaseVehicleDetailsTOListForRecovery.Where(a => a.ProdItemId == tempGradingDtlsTO.ProdItemId).ToList();
                    if (res != null && res.Count > 0)
                    {
                        tempGradingDtlsTO.Recovery = res[0].Recovery;
                        tempGradingDtlsTO.IsNonCommercialItem = res[0].IsNonCommercialItem;
                    }
                    else
                    {
                        //List<TblProductItemTO> tblProductItemTOList = _iTblProductItemBL.SelectAllTblProductItemListByProdItemId(tempGradingDtlsTO.ProdItemId, enquiryTO.StateId);
                        List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(tempGradingDtlsTO.ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId);
                        if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
                        {
                            tempGradingDtlsTO.Recovery = tblProductItemTOList[0].Recovery;
                            tempGradingDtlsTO.IsNonCommercialItem = tblProductItemTOList[0].IsNonCommercialItem;
                        }
                    }



                }
                //Calculate Item Details
                resultMessage = CalculateItemDetails(gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList, gradingScheduleTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error while calculation of item details");
                }

                double baseMetalCost = CalculateItemsMetalCost(gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList, gradingScheduleTO);
                AsignSignleGradePadtaVal(baseMetalCost, gradingScheduleTO.PurchaseScheduleSummaryDetailsTOList);

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CalculateGradingItemsDtls(TblPurchaseScheduleSummaryTO gradingScheduleTO, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage UpdateVehicleScheduleDetails(TblPurchaseScheduleSummaryTO previousPurchaseScheduleSummaryTO, TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, string statusId, string spotEntryVehicleStatusId, DateTime currentDate)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                if (tblPurchaseScheduleSummaryTO != null && previousPurchaseScheduleSummaryTO != null)
                {

                    result = UpdateTblPurchaseScheduleSummary(previousPurchaseScheduleSummaryTO, conn, tran);
                    if (result >= 1)
                    {
                        tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId = previousPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(statusId);
                        result = UpdateItemDetails(tblPurchaseScheduleSummaryTO, true, currentDate, conn, tran);
                        if (result <= 0)
                        {
                            tran.Rollback();
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error While Updating Material Details";
                            return resultMessage;
                        }
                        else
                        {
                            //Update Vehicle Entry Status As Reported
                            tblPurchaseVehicleSpotEntryTO.StatusId = Convert.ToInt32(spotEntryVehicleStatusId);
                            tblPurchaseVehicleSpotEntryTO.StatusDate = _iCommonDAO.ServerDateTime;
                            tblPurchaseVehicleSpotEntryTO.PurchaseEnquiryId = tblPurchaseScheduleSummaryTO.PurchaseEnquiryId;
                            tblPurchaseVehicleSpotEntryTO.VehicleQtyMT = tblPurchaseScheduleSummaryTO.Qty;
                            result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseVehicleSpotEntryTO, conn, tran);
                            if (result <= 0)
                            {
                                tran.Rollback();
                                resultMessage.MessageType = ResultMessageE.Error;
                                resultMessage.Text = "Error While Updating Material Details";
                                return resultMessage;
                            }
                        }
                    }
                    else
                    {
                        tran.Rollback();
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.Text = "Error While Updating Material Details";
                        return resultMessage;
                    }


                }

                if (result >= 1)
                {
                    tran.Commit();
                    resultMessage.MessageType = ResultMessageE.Information;
                    resultMessage.Text = "Record Updated Successfully.";
                    return resultMessage;
                }
                else
                {
                    tran.Rollback();
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.Text = "Error While Updating Material Details";
                    return resultMessage;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                conn.Close();
            }

        }

        public ResultMessage InsertVehicleScheduleDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, string spotEntryVehicleStatusId)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;
            DateTime currentDate = _iCommonDAO.ServerDateTime;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                if (tblPurchaseScheduleSummaryTO != null)
                {

                    //result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);

                    {
                        //tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId=tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                        //tblPurchaseScheduleSummaryTO.StatusId=Convert.ToInt32(statusId);
                        result = UpdateItemDetails(tblPurchaseScheduleSummaryTO, true, currentDate, conn, tran);
                        if (result <= 0)
                        {
                            tran.Rollback();
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error While Updating Material Details";
                            return resultMessage;
                        }
                        else
                        {
                            //Update Vehicle Entry Status As Reported
                            tblPurchaseVehicleSpotEntryTO.StatusId = Convert.ToInt32(spotEntryVehicleStatusId);
                            tblPurchaseVehicleSpotEntryTO.StatusDate = currentDate;
                            tblPurchaseVehicleSpotEntryTO.PurchaseEnquiryId = tblPurchaseScheduleSummaryTO.PurchaseEnquiryId;
                            result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseVehicleSpotEntryTO, conn, tran);
                            if (result <= 0)
                            {
                                tran.Rollback();
                                resultMessage.MessageType = ResultMessageE.Error;
                                resultMessage.Text = "Error While Updating Material Details";
                                return resultMessage;
                            }
                        }
                    }
                    // else
                    // {
                    //     tran.Rollback();
                    //     resultMessage.MessageType = ResultMessageE.Error;
                    //     resultMessage.Text = "Error While Updating Material Details";
                    //     return resultMessage;
                    // }


                }

                if (result >= 1)
                {
                    tran.Commit();
                    resultMessage.MessageType = ResultMessageE.Information;
                    resultMessage.Text = "Record Updated Successfully.";
                    return resultMessage;
                }
                else
                {
                    tran.Rollback();
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.Text = "Error While Updating Material Details";
                    return resultMessage;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                conn.Close();
            }

        }
        // public ResultMessage MarkUnloadingCompleteWithTareWtDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryTO)
        // {
        //     SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
        //     SqlTransaction tran = null;
        //     Int32 result = 0;
        //     ResultMessage resultMessage = new StaticStuff.ResultMessage();
        //     resultMessage.MessageType = ResultMessageE.None;
        //     double todaysDeclaredRate = 0;
        //     DateTime currentDate = _iCommonDAO.ServerDateTime;

        //     try
        //     {


        //         TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTONew = new TblPurchaseScheduleSummaryTO();
        //         tblPurchaseScheduleSummaryTONew = tblPurchaseScheduleSummaryTO;
        //         tblPurchaseScheduleSummaryTONew.TblPurchaseWeighingStageSummaryTO = tblPurchaseWeighingStageSummaryTO;
        //         //tblPurchaseScheduleSummaryTONew.ParentPurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //         ///get rate

        //         List<TblPurchaseVehicleDetailsTO> TblPurchaseVehicleDetailsTOListForRate = new List<TblPurchaseVehicleDetailsTO>();
        //         Boolean isGetGradeExpDtls = false;

        //         if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
        //         {
        //             TblPurchaseVehicleDetailsTOListForRate = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList;
        //         }
        //         else
        //         {
        //             TblPurchaseVehicleDetailsTOListForRate = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
        //         }

        //         List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();

        //         List<TblPurchaseUnloadingDtlTO> tblPurchaseUnloadingDtlTOList = _iTblPurchaseUnloadingDtlBL.SelectAllTblPurchaseUnloadingDtlListByScheduleId(tblPurchaseScheduleSummaryTO.RootScheduleId);

        //         TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
        //         if (enquiryTO == null)
        //         {
        //             throw new Exception("enquiryTO==NULL For enquiry Id=" + tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
        //         }


        //         if (enquiryTO.IsOpenQtySauda == 1)
        //         {
        //             //Get Latest rate
        //             //DateTime currentDate = _iCommonDAO.ServerDateTime;

        //             List<TblRateBandDeclarationPurchaseTO> latestRateBandList = _iTblPurchaseEnquiryBL.SelectLatestRateBandDeclarationPurchaseTOList(enquiryTO.UserId, currentDate);
        //             if (latestRateBandList != null && latestRateBandList.Count > 0)
        //             {
        //                 todaysDeclaredRate = latestRateBandList[0].DeclaredRate;
        //             }

        //             // List<TblGlobalRatePurchaseTO> currentGlobalRatePurchaseDtlsList = _iTblGlobalRatePurchaseDAO.SelectLatestRateOfPurchaseDCT(currentDate);
        //             // if (currentGlobalRatePurchaseDtlsList != null && currentGlobalRatePurchaseDtlsList.Count > 0)
        //             // {
        //             //     todaysDeclaredRate = currentGlobalRatePurchaseDtlsList[0].Rate;
        //             // }

        //         }

        //         List<TblPurchaseEnquiryDetailsTO> enquiryItemDtlsList = _iTblPurchaseEnquiryDetailsBL.SelectTblEnquiryDetailsList(enquiryTO.IdPurchaseEnquiry);
        //         // if (enquiryItemDtlsList == null || enquiryItemDtlsList.Count == 0)
        //         // {
        //         //     throw new Exception("enquiryItemDtlsList==NULL For enquiry Id=" + tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
        //         // }

        //         if (enquiryItemDtlsList != null && enquiryItemDtlsList.Count > 0)
        //         {
        //             for (int q = 0; q < enquiryItemDtlsList.Count; q++)
        //             {
        //                 List<TblPurchaseParityDetailsTO> parityList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(enquiryItemDtlsList[q].ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId);
        //                 if (parityList != null && parityList.Count > 0)
        //                 {
        //                     TblPurchaseParityDetailsTO parityDetailsTO = parityList[0];
        //                     enquiryItemDtlsList[q].ParityAmt = parityDetailsTO.ParityAmt;
        //                     enquiryItemDtlsList[q].NonConfParityAmt = parityDetailsTO.NonConfParityAmt;
        //                     enquiryItemDtlsList[q].Recovery = parityDetailsTO.Recovery;
        //                 }
        //             }
        //         }

        //         double totalScheduleQty = 0;

        //         if (tblPurchaseUnloadingDtlTOList != null && tblPurchaseUnloadingDtlTOList.Count > 0)
        //         {

        //             for (int i = 0; i < tblPurchaseUnloadingDtlTOList.Count; i++)
        //             {
        //                 if (tblPurchaseUnloadingDtlTOList[i].IsConfirmUnloading == 1)
        //                 {

        //                     TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = new TblPurchaseVehicleDetailsTO();
        //                     tblPurchaseVehicleDetailsTO.ProdItemId = tblPurchaseUnloadingDtlTOList[i].ProdItemId;
        //                     tblPurchaseVehicleDetailsTO.Qty = tblPurchaseUnloadingDtlTOList[i].QtyMT;
        //                     totalScheduleQty += tblPurchaseVehicleDetailsTO.Qty;

        //                     if (enquiryTO.IsOpenQtySauda == 1)
        //                     {
        //                         //Get Latest Parity
        //                         List<TblProductItemTO> tblProductItemTOList = _iTblProductItemBL.SelectAllTblProductItemListByProdItemId(tblPurchaseUnloadingDtlTOList[i].ProdItemId, enquiryTO.StateId);

        //                         if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
        //                         {
        //                             tblPurchaseVehicleDetailsTO.Recovery = tblProductItemTOList[0].Recovery;
        //                             tblPurchaseVehicleDetailsTO.IsNonCommercialItem = tblProductItemTOList[0].IsNonCommercialItem;

        //                             if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.CONFIRM))
        //                             {
        //                                 tblPurchaseVehicleDetailsTO.Rate = todaysDeclaredRate + tblProductItemTOList[0].ParityAmt;
        //                             }
        //                             else
        //                             {
        //                                 tblPurchaseVehicleDetailsTO.Rate = todaysDeclaredRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
        //                             }

        //                             if (tblProductItemTOList[0].IsNonCommercialItem == 1)
        //                                 tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
        //                             else
        //                                 tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
        //                         }
        //                         else
        //                         {
        //                             TblProductItemTO tblProductItemTO = _iTblProductItemBL.SelectTblProductItemTO(tblPurchaseVehicleDetailsTO.ProdItemId, conn, tran);
        //                             tblPurchaseVehicleDetailsTO.Rate = todaysDeclaredRate;
        //                             tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;

        //                             if (tblProductItemTO != null)
        //                             {
        //                                 if (tblProductItemTO.IsNonCommercialItem == 1)
        //                                     tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
        //                             }

        //                         }
        //                         tblPurchaseVehicleDetailsTO.ItemBookingRate = todaysDeclaredRate;
        //                     }
        //                     else
        //                     {

        //                         //TblPurchaseVehicleDetailsTO.Rate=tblPurchaseUnloadingDtlTOList[i].r;
        //                         //TblPurchaseVehicleDetailsTO.Rate=tblPurchaseUnloadingDtlTOList[i].Rate;
        //                         List<TblPurchaseVehicleDetailsTO> res = new List<TblPurchaseVehicleDetailsTO>();
        //                         if (TblPurchaseVehicleDetailsTOListForRate != null && TblPurchaseVehicleDetailsTOListForRate.Count > 0)
        //                         {
        //                             res = TblPurchaseVehicleDetailsTOListForRate.Where(a => a.ProdItemId == tblPurchaseUnloadingDtlTOList[i].ProdItemId).ToList();
        //                         }
        //                         if (res != null && res.Count > 0)
        //                         {
        //                             tblPurchaseVehicleDetailsTO.Rate = res[0].Rate;
        //                             tblPurchaseVehicleDetailsTO.ItemBookingRate = res[0].ItemBookingRate;
        //                             tblPurchaseVehicleDetailsTO.Recovery = res[0].Recovery;
        //                             tblPurchaseVehicleDetailsTO.IsNonCommercialItem = res[0].IsNonCommercialItem;
        //                             if (res[0].IsNonCommercialItem == 1)
        //                                 tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
        //                             else
        //                                 tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
        //                         }
        //                         else
        //                         {

        //                             //Check for the item is in enquiry details list
        //                             List<TblPurchaseEnquiryDetailsTO> tempRes = new List<TblPurchaseEnquiryDetailsTO>();
        //                             if (enquiryItemDtlsList != null && enquiryItemDtlsList.Count > 0)
        //                             {
        //                                 tempRes = enquiryItemDtlsList.Where(a => a.ProdItemId == tblPurchaseUnloadingDtlTOList[i].ProdItemId).ToList();
        //                             }

        //                             if (tempRes != null && tempRes.Count > 0)
        //                             {
        //                                 tblPurchaseVehicleDetailsTO.Recovery = tempRes[0].Recovery;
        //                                 tblPurchaseVehicleDetailsTO.IsNonCommercialItem = tempRes[0].IsNonCommercialItem;

        //                                 if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.CONFIRM))
        //                                 {
        //                                     tblPurchaseVehicleDetailsTO.Rate = tempRes[0].ItemBookingRate + tempRes[0].ParityAmt;
        //                                 }
        //                                 else
        //                                 {
        //                                     tblPurchaseVehicleDetailsTO.Rate = tempRes[0].ItemBookingRate + tempRes[0].ParityAmt + tempRes[0].NonConfParityAmt;
        //                                 }

        //                                 tblPurchaseVehicleDetailsTO.ItemBookingRate = tempRes[0].ItemBookingRate;

        //                                 if (tempRes[0].IsNonCommercialItem == 1)
        //                                     tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
        //                                 else
        //                                     tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
        //                             }
        //                             else
        //                             {
        //                                 //Prajakta[2019-07-09] Commented and added to get sauda creation parity details
        //                                 //List<TblProductItemTO> tblProductItemTOList = _iTblProductItemBL.SelectAllTblProductItemListByProdItemId(tblPurchaseUnloadingDtlTOList[i].ProdItemId, enquiryTO.StateId);
        //                                 List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(tblPurchaseUnloadingDtlTOList[i].ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId);

        //                                 if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
        //                                 {
        //                                     tblPurchaseVehicleDetailsTO.Recovery = tblProductItemTOList[0].Recovery;
        //                                     tblPurchaseVehicleDetailsTO.IsNonCommercialItem = tblProductItemTOList[0].IsNonCommercialItem;

        //                                     if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.CONFIRM))
        //                                     {
        //                                         tblPurchaseVehicleDetailsTO.Rate = enquiryTO.BookingRate + tblProductItemTOList[0].ParityAmt;
        //                                     }
        //                                     else
        //                                     {
        //                                         tblPurchaseVehicleDetailsTO.Rate = enquiryTO.BookingRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
        //                                     }

        //                                     if (tblProductItemTOList[0].IsNonCommercialItem == 1)
        //                                         tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
        //                                     else
        //                                         tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
        //                                 }
        //                                 else
        //                                 {
        //                                     TblProductItemTO tblProductItemTO = _iTblProductItemBL.SelectTblProductItemTO(tblPurchaseVehicleDetailsTO.ProdItemId, conn, tran);
        //                                     tblPurchaseVehicleDetailsTO.Rate = enquiryTO.BookingRate;
        //                                     tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;

        //                                     if (tblProductItemTO != null)
        //                                     {
        //                                         if (tblProductItemTO.IsNonCommercialItem == 1)
        //                                             tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
        //                                     }
        //                                 }
        //                                 tblPurchaseVehicleDetailsTO.ItemBookingRate = enquiryTO.BookingRate;

        //                             }
        //                         }

        //                     }
        //                     tblPurchaseVehicleDetailsTO.CorNcId = tblPurchaseScheduleSummaryTO.COrNcId;
        //                     tblPurchaseVehicleDetailsTOList.Add(tblPurchaseVehicleDetailsTO);
        //                 }
        //             }
        //         }

        //         tblPurchaseScheduleSummaryTONew.Qty = totalScheduleQty;
        //         tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;



        //         conn.Open();
        //         tran = conn.BeginTransaction();

        //         #region check if vehicle current status is already updated
        //         resultMessage = CheckIfVehicleScheduleAlreadyExits(tblPurchaseScheduleSummaryTONew, conn, tran, 0);
        //         if (resultMessage.MessageType == ResultMessageE.Error)
        //         {
        //             return resultMessage;
        //         }

        //         #endregion


        //         //Calculate Item Details
        //         resultMessage = CalculateItemDetails(tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList, tblPurchaseScheduleSummaryTONew, conn, tran);
        //         if (resultMessage.MessageType != ResultMessageE.Information)
        //         {
        //             throw new Exception("Error while calculation of item details");
        //         }

        //         double baseMetalCost = CalculateItemsMetalCost(tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList, tblPurchaseScheduleSummaryTONew);
        //         AsignSignleGradePadtaVal(baseMetalCost, tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList);

        //         tblPurchaseScheduleSummaryTONew.UpdatedOn = currentDate;
        //         tblPurchaseScheduleSummaryTONew.CreatedOn = currentDate;
        //         string padtaApprovalMsg = "";
        //         resultMessage = saveData(tblPurchaseScheduleSummaryTONew, true, false, currentDate, ref padtaApprovalMsg, conn, tran);
        //         result = resultMessage.Result;
        //         if (result <= 0)
        //         {
        //             throw new Exception("Error while updating - tblPurchaseScheduleSummaryTO");
        //         }

        //         //new commented
        //         // result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
        //         // if (result != 1)
        //         // {
        //         //     throw new Exception("Error while updating - tblPurchaseScheduleSummaryTO");
        //         // }


        //         //new commented
        //         // List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOTempList = TblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, conn, tran);
        //         // if (tblPurchaseVehicleDetailsTOTempList != null && tblPurchaseVehicleDetailsTOTempList.Count > 0)
        //         // {
        //         //     for (int b = 0; b < tblPurchaseVehicleDetailsTOTempList.Count; b++)
        //         //     {

        //         //         TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTLocalTO = tblPurchaseVehicleDetailsTOTempList[b];
        //         //         if (tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count > 0)
        //         //         {
        //         //             for (int p = 0; p < tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count; p++)
        //         //             {
        //         //                 result = _iTblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);
        //         //                 if (result < 0)
        //         //                 {
        //         //                     tran.Rollback();
        //         //                     throw new Exception("Error while inserting DeleteTblGradeExpressionDtls ");
        //         //                 }
        //         //             }
        //         //         }

        //         //         result = TblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);
        //         //         if (result <= 0)
        //         //         {
        //         //             throw new Exception("Error while inserting DeleteTblPurchaseVehicleDetails ");
        //         //         }
        //         //     }
        //         // }

        //         //old commented
        //         // result = _iTblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetailsByScheduleId(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, conn, tran);
        //         // if (result == -1)
        //         // {
        //         //     throw new Exception("Error while deleting - itemdetails");
        //         // }

        //         //new commented
        //         // if (tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList.Count > 0)
        //         // {
        //         //     for (int i = 0; i < tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList.Count; i++)
        //         //     {
        //         //         TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList[i];
        //         //         tblPurchaseVehicleDetailsTO.SchedulePurchaseId = tblPurchaseScheduleSummaryTONew.IdPurchaseScheduleSummary;

        //         //         result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTO, conn, tran);
        //         //         if (result <= 0)
        //         //         {
        //         //             throw new Exception("Error while inserting tblPurchaseVehicleDetailsTO ");
        //         //         }
        //         //     }
        //         // }

        //         //Check If Tare Weight is already taken
        //         List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehWtDetailsForWeighingMachine(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, Convert.ToInt32(Constants.TransMeasureTypeE.TARE_WEIGHT).ToString(), tblPurchaseWeighingStageSummaryTO.WeighingMachineId.ToString(), conn, tran);
        //         if (tblPurchaseWeighingStageSummaryTOList == null || tblPurchaseWeighingStageSummaryTOList.Count == 0)
        //         {
        //             result = _iTblPurchaseWeighingStageSummaryBL.InsertTblPurchaseWeighingStageSummary(tblPurchaseWeighingStageSummaryTO, conn, tran);
        //             if (result <= 0)
        //             {
        //                 tran.Rollback();
        //                 resultMessage.MessageType = ResultMessageE.Error;
        //                 resultMessage.Text = "Error While Inserting The Tare Weight Details";
        //                 return resultMessage;
        //             }
        //         }


        //         //Prajakta[2019-02-08]Added to update the actual pending booking qty
        //         resultMessage = UpdateBookingPendingQtyAsPerActualOrScheduleQty(tblPurchaseScheduleSummaryTO, enquiryTO, conn, tran);
        //         if (resultMessage.MessageType != ResultMessageE.Information)
        //         {
        //             return resultMessage;
        //         }

        //         if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED)
        //             && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED))
        //         {
        //             List<TblPurchaseWeighingStageSummaryTO> ListWeighing = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeighingDetailsBySchduleId(tblPurchaseScheduleSummaryTO.RootScheduleId, false);
        //             string sourceEntityId = null;
        //             foreach (var WeighingTo in ListWeighing)
        //             {
        //                 if (sourceEntityId == null)
        //                 {
        //                     sourceEntityId = WeighingTo.IdPurchaseWeighingStage.ToString();
        //                 }
        //                 else
        //                 {
        //                     sourceEntityId = sourceEntityId + "," + WeighingTo.IdPurchaseWeighingStage.ToString();
        //                 }
        //             }

        //             TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
        //             List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();

        //             if (tblPurchaseScheduleSummaryTO != null && tblPurchaseScheduleSummaryTO.GraderId > 0)
        //             {
        //                 TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
        //                 tblAlertUsersTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
        //                 tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.GraderId;
        //                 tblAlertUsersTOList.Add(tblAlertUsersTO);
        //             }
        //             else
        //             {
        //                 List<DropDownTO> ListRoles = _idimensionBL.SelectAllSystemUsersListFromRoleType(Convert.ToInt32(Constants.SystemRoleTypeE.GRADER));
        //                 if (ListRoles != null && ListRoles.Count > 0)
        //                 {
        //                     foreach (var roleTo in ListRoles)
        //                     {
        //                         TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
        //                         tblAlertUsersTO.RoleId = roleTo.Value;
        //                         tblAlertUsersTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
        //                         tblAlertUsersTOList.Add(tblAlertUsersTO);
        //                     }
        //                 }
        //             }



        //             // List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
        //             _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.UNLOADING_STAGE_COMPLETED, sourceEntityId);

        //             tblAlertInstanceTO = new TblAlertInstanceTO();
        //             // tblAlertUsersTOList = new List<TblAlertUsersTO>();

        //             tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.UNLOADING_COMPLETED;
        //             tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_UNLOADING_COMPLETED";
        //             tblAlertInstanceTO.AlertComment = "Unloading completed for Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo;
        //             // tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " Send In Successfully For Unloading.";
        //             tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
        //             tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
        //             tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
        //             tblAlertInstanceTO.IsActive = 1;
        //             tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //             tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_UNLOADING_COMPLETED";

        //             tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
        //             tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
        //             tblAlertInstanceTO.IsAutoReset = 1;

        //             AlertsToReset alertsToReset = new AlertsToReset();
        //             alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
        //             ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
        //             resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.UNLOADING_STAGE_COMPLETED;
        //             resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
        //             alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
        //             tblAlertInstanceTO.AlertsToReset = alertsToReset;

        //             //Sanjay [21 sept 2018] Below code is commented and common notification API is called

        //             notify.SendNotificationToUsers(tblAlertInstanceTO);
        //         }

        //         //return 1;

        //         // conn.Open();
        //         // tran = conn.BeginTransaction();

        //         // result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
        //         // if (result <= 0)
        //         // {
        //         //     tran.Rollback();
        //         //     resultMessage.MessageType = ResultMessageE.Error;
        //         //     resultMessage.Text = "Error While Updating Unloading Status";
        //         //     return resultMessage;
        //         // }
        //         // else
        //         // {

        //         //     result = BL.TblPurchaseWeighingStageSummaryBL.InsertTblPurchaseWeighingStageSummary(tblPurchaseWeighingStageSummaryTO, conn, tran);
        //         //     if (result <= 0)
        //         //     {
        //         //         tran.Rollback();
        //         //         resultMessage.MessageType = ResultMessageE.Error;
        //         //         resultMessage.Text = "Error While Inserting The Tare Weight Details";
        //         //         return resultMessage;
        //         //     }

        //         // }

        //         //Saket [2019-03-28] Added
        //         #region check if vehicle current status is already updated
        //         resultMessage = CheckIfVehicleScheduleAlreadyExits(tblPurchaseScheduleSummaryTONew, conn, tran, 1);
        //         if (resultMessage.MessageType == ResultMessageE.Error)
        //         {
        //             return resultMessage;
        //         }

        //         // Deepali [2019-05-07] send for approval if scheduled qty is greater than sauda qty
        //         // resultMessage = checkIfQtyGoesOutofBand(tblPurchaseScheduleSummaryTONew.PurchaseEnquiryId, enquiryTO, conn, tran);

        //         #endregion

        //         // tran.Commit();
        //         // if (resultMessage.Result == 1)
        //         // {

        //         //     resultMessage.MessageType = ResultMessageE.Information;
        //         //     resultMessage.Text = "Record Updated Successfully.";

        //         // } 
        //         // commented Temp

        //         tran.Commit();
        //         resultMessage.MessageType = ResultMessageE.Information;
        //         resultMessage.Text = "Record Updated Successfully.";
        //         resultMessage.Result = 1;
        //         return resultMessage;
        //     }
        //     catch (Exception ex)
        //     {
        //         resultMessage.Exception = ex;
        //         resultMessage.MessageType = ResultMessageE.Error;
        //         resultMessage.Text = "Error In MarkUnloadingCompleteWithTareWtDtls ";
        //         return resultMessage;
        //     }
        //     finally
        //     {
        //         conn.Close();
        //     }

        // }
        //new code


        public ResultMessage SaveUnloadingCompletedDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            Int32 result = 0;
            resultMessage.MessageType = ResultMessageE.None;
            double todaysDeclaredRate = 0;
            DateTime currentDate = _iCommonDAO.ServerDateTime;

            try
            {


                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTONew = new TblPurchaseScheduleSummaryTO();
                tblPurchaseScheduleSummaryTONew = tblPurchaseScheduleSummaryTO;
                tblPurchaseScheduleSummaryTONew.TblPurchaseWeighingStageSummaryTO = tblPurchaseWeighingStageSummaryTO;
                tblPurchaseScheduleSummaryTONew.RefRateofV48Var = _iTblConfigParamsBL.GetCurrentValueOfV8RefVar(Constants.CP_SCRAP_DEFAULT_RATE_REFERANCE_VARIABLE);
                tblPurchaseScheduleSummaryTONew.RefRateC = _iTblConfigParamsBL.GetCurrentValueOfV8RefVar(Constants.CP_SCRAP_DEFAULT_RATE_REFERANCE_VARIABLE_C);

                //tblPurchaseScheduleSummaryTONew.ParentPurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                ///get rate                

                List<TblPurchaseVehicleDetailsTO> TblPurchaseVehicleDetailsTOListForRate = new List<TblPurchaseVehicleDetailsTO>();
                Boolean isGetGradeExpDtls = false;

                if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                {
                    TblPurchaseVehicleDetailsTOListForRate = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList;
                }
                else
                {
                    TblPurchaseVehicleDetailsTOListForRate = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                }

                List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                Int32 isGradingBeforeUnloading = 0;

                List<TblPurchaseUnloadingDtlTO> tblPurchaseUnloadingDtlTOList = _iTblPurchaseUnloadingDtlBL.SelectAllTblPurchaseUnloadingDtlListByScheduleId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, isGradingBeforeUnloading, conn, tran);
                if (tblPurchaseUnloadingDtlTOList == null || tblPurchaseUnloadingDtlTOList.Count == 0)
                {
                    throw new Exception("tblPurchaseUnloadingDtlTOList == null");
                }

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO==NULL For enquiry Id=" + tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                }


                if (enquiryTO.IsOpenQtySauda == 1)
                {
                    //Prajakta[2019-11-19] Commnted and added to get latest or previous declared rate
                    //Get Latest rate
                    //DateTime currentDate = _iCommonDAO.ServerDateTime;

                    //List<TblRateBandDeclarationPurchaseTO> latestRateBandList = _iTblPurchaseEnquiryBL.SelectLatestRateBandDeclarationPurchaseTOList(enquiryTO.UserId, currentDate);
                    List<TblRateBandDeclarationPurchaseTO> latestRateBandList = _iTblPurchaseEnquiryBL.GetRateDeclartionDtlsWhileBooking(enquiryTO.UserId);
                    if (latestRateBandList != null && latestRateBandList.Count > 0)
                    {
                        todaysDeclaredRate = latestRateBandList[0].DeclaredRate;
                    }
                    else
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "Todays rate is not declared.";
                        return resultMessage;
                    }

                    // List<TblGlobalRatePurchaseTO> currentGlobalRatePurchaseDtlsList = _iTblGlobalRatePurchaseDAO.SelectLatestRateOfPurchaseDCT(currentDate);
                    // if (currentGlobalRatePurchaseDtlsList != null && currentGlobalRatePurchaseDtlsList.Count > 0)
                    // {
                    //     todaysDeclaredRate = currentGlobalRatePurchaseDtlsList[0].Rate;
                    // }

                }

                List<TblPurchaseEnquiryDetailsTO> enquiryItemDtlsList = _iTblPurchaseEnquiryDetailsBL.SelectTblEnquiryDetailsList(enquiryTO.IdPurchaseEnquiry, conn, tran);
                // if (enquiryItemDtlsList == null || enquiryItemDtlsList.Count == 0)
                // {
                //     throw new Exception("enquiryItemDtlsList==NULL For enquiry Id=" + tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                // }

                if (enquiryItemDtlsList != null && enquiryItemDtlsList.Count > 0)
                {
                    for (int q = 0; q < enquiryItemDtlsList.Count; q++)
                    {
                        List<TblPurchaseParityDetailsTO> parityList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(enquiryItemDtlsList[q].ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId, conn, tran);
                        if (parityList != null && parityList.Count > 0)
                        {
                            TblPurchaseParityDetailsTO parityDetailsTO = parityList[0];
                            enquiryItemDtlsList[q].ParityAmt = parityDetailsTO.ParityAmt;
                            enquiryItemDtlsList[q].NonConfParityAmt = parityDetailsTO.NonConfParityAmt;
                            enquiryItemDtlsList[q].Recovery = parityDetailsTO.Recovery;
                        }
                    }
                }

                double totalScheduleQty = 0;

                if (tblPurchaseUnloadingDtlTOList != null && tblPurchaseUnloadingDtlTOList.Count > 0)
                {

                    for (int i = 0; i < tblPurchaseUnloadingDtlTOList.Count; i++)
                    {
                        if (tblPurchaseUnloadingDtlTOList[i].IsConfirmUnloading == 1)
                        {

                            TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = new TblPurchaseVehicleDetailsTO();
                            tblPurchaseVehicleDetailsTO.ProdItemId = tblPurchaseUnloadingDtlTOList[i].ProdItemId;
                            tblPurchaseVehicleDetailsTO.Qty = tblPurchaseUnloadingDtlTOList[i].QtyMT;
                            tblPurchaseVehicleDetailsTO.ProcessVarId = tblPurchaseUnloadingDtlTOList[i].ProcessVarId;
                            totalScheduleQty += tblPurchaseVehicleDetailsTO.Qty;

                            tblPurchaseVehicleDetailsTO.RecImpurities = tblPurchaseUnloadingDtlTOList[i].Recovery;

                            if (enquiryTO.IsOpenQtySauda == 1)
                            {
                                //Get Latest Parity
                                List<TblProductItemTO> tblProductItemTOList = _iTblProductItemBL.SelectAllTblProductItemListByProdItemId(tblPurchaseUnloadingDtlTOList[i].ProdItemId, enquiryTO.StateId, conn, tran);

                                if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
                                {
                                    tblPurchaseVehicleDetailsTO.Recovery = tblProductItemTOList[0].Recovery;
                                    tblPurchaseVehicleDetailsTO.IsNonCommercialItem = tblProductItemTOList[0].IsNonCommercialItem;

                                    if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.CONFIRM))
                                    {
                                        tblPurchaseVehicleDetailsTO.Rate = todaysDeclaredRate + tblProductItemTOList[0].ParityAmt;
                                    }
                                    else
                                    {
                                        tblPurchaseVehicleDetailsTO.Rate = todaysDeclaredRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
                                    }

                                    if (tblProductItemTOList[0].IsNonCommercialItem == 1)
                                    {
                                        tblPurchaseVehicleDetailsTO.Rate = 0;
                                        tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
                                    }
                                    else
                                        tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
                                }
                                else
                                {
                                    TblProductItemTO tblProductItemTO = _iTblProductItemBL.SelectTblProductItemTO(tblPurchaseVehicleDetailsTO.ProdItemId, conn, tran);
                                    tblPurchaseVehicleDetailsTO.Rate = todaysDeclaredRate;
                                    tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;

                                    if (tblProductItemTO != null)
                                    {
                                        if (tblProductItemTO.IsNonCommercialItem == 1)
                                        {
                                            tblPurchaseVehicleDetailsTO.Rate = 0;
                                            tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
                                        }

                                    }

                                }
                                tblPurchaseVehicleDetailsTO.ItemBookingRate = todaysDeclaredRate;
                            }
                            else
                            {

                                //TblPurchaseVehicleDetailsTO.Rate=tblPurchaseUnloadingDtlTOList[i].r;
                                //TblPurchaseVehicleDetailsTO.Rate=tblPurchaseUnloadingDtlTOList[i].Rate;
                                List<TblPurchaseVehicleDetailsTO> res = new List<TblPurchaseVehicleDetailsTO>();
                                if (TblPurchaseVehicleDetailsTOListForRate != null && TblPurchaseVehicleDetailsTOListForRate.Count > 0)
                                {
                                    res = TblPurchaseVehicleDetailsTOListForRate.Where(a => a.ProdItemId == tblPurchaseUnloadingDtlTOList[i].ProdItemId).ToList();
                                }
                                if (res != null && res.Count > 0)
                                {
                                    tblPurchaseVehicleDetailsTO.Rate = res[0].Rate;
                                    tblPurchaseVehicleDetailsTO.ItemBookingRate = res[0].ItemBookingRate;
                                    tblPurchaseVehicleDetailsTO.Recovery = res[0].Recovery;
                                    tblPurchaseVehicleDetailsTO.IsNonCommercialItem = res[0].IsNonCommercialItem;
                                    if (res[0].IsNonCommercialItem == 1)
                                    {
                                        tblPurchaseVehicleDetailsTO.Rate = 0;
                                        tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
                                    }
                                    else
                                        tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
                                }
                                else
                                {

                                    //Check for the item is in enquiry details list
                                    List<TblPurchaseEnquiryDetailsTO> tempRes = new List<TblPurchaseEnquiryDetailsTO>();
                                    if (enquiryItemDtlsList != null && enquiryItemDtlsList.Count > 0)
                                    {
                                        tempRes = enquiryItemDtlsList.Where(a => a.ProdItemId == tblPurchaseUnloadingDtlTOList[i].ProdItemId).ToList();
                                    }

                                    if (tempRes != null && tempRes.Count > 0)
                                    {
                                        tblPurchaseVehicleDetailsTO.Recovery = tempRes[0].Recovery;
                                        tblPurchaseVehicleDetailsTO.IsNonCommercialItem = tempRes[0].IsNonCommercialItem;

                                        if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.CONFIRM))
                                        {
                                            tblPurchaseVehicleDetailsTO.Rate = tempRes[0].ItemBookingRate + tempRes[0].ParityAmt;
                                        }
                                        else
                                        {
                                            tblPurchaseVehicleDetailsTO.Rate = tempRes[0].ItemBookingRate + tempRes[0].ParityAmt + tempRes[0].NonConfParityAmt;
                                        }

                                        tblPurchaseVehicleDetailsTO.ItemBookingRate = tempRes[0].ItemBookingRate;

                                        if (tempRes[0].IsNonCommercialItem == 1)
                                        {
                                            tblPurchaseVehicleDetailsTO.Rate = 0;
                                            tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
                                        }

                                        else
                                            tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
                                    }
                                    else
                                    {
                                        //Prajakta[2019-07-09] Commented and added to get sauda creation parity details
                                        //List<TblProductItemTO> tblProductItemTOList = _iTblProductItemBL.SelectAllTblProductItemListByProdItemId(tblPurchaseUnloadingDtlTOList[i].ProdItemId, enquiryTO.StateId);
                                        List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(tblPurchaseUnloadingDtlTOList[i].ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId, conn, tran);

                                        if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
                                        {
                                            tblPurchaseVehicleDetailsTO.Recovery = tblProductItemTOList[0].Recovery;
                                            tblPurchaseVehicleDetailsTO.IsNonCommercialItem = tblProductItemTOList[0].IsNonCommercialItem;

                                            if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.CONFIRM))
                                            {
                                                tblPurchaseVehicleDetailsTO.Rate = enquiryTO.BookingRate + tblProductItemTOList[0].ParityAmt;
                                            }
                                            else
                                            {
                                                tblPurchaseVehicleDetailsTO.Rate = enquiryTO.BookingRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
                                            }

                                            if (tblProductItemTOList[0].IsNonCommercialItem == 1)
                                            {
                                                tblPurchaseVehicleDetailsTO.Rate = 0;
                                                tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
                                            }

                                            else
                                                tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;
                                        }
                                        else
                                        {
                                            TblProductItemTO tblProductItemTO = _iTblProductItemBL.SelectTblProductItemTO(tblPurchaseVehicleDetailsTO.ProdItemId, conn, tran);
                                            tblPurchaseVehicleDetailsTO.Rate = enquiryTO.BookingRate;
                                            tblPurchaseVehicleDetailsTO.ProductAomunt = tblPurchaseVehicleDetailsTO.Rate * tblPurchaseVehicleDetailsTO.Qty;

                                            if (tblProductItemTO != null)
                                            {
                                                if (tblProductItemTO.IsNonCommercialItem == 1)
                                                {
                                                    tblPurchaseVehicleDetailsTO.Rate = 0;
                                                    tblPurchaseVehicleDetailsTO.ProductAomunt = 0;
                                                }

                                            }
                                        }
                                        tblPurchaseVehicleDetailsTO.ItemBookingRate = enquiryTO.BookingRate;

                                    }
                                }

                            }
                            tblPurchaseVehicleDetailsTO.CorNcId = tblPurchaseScheduleSummaryTO.COrNcId;
                            tblPurchaseVehicleDetailsTOList.Add(tblPurchaseVehicleDetailsTO);
                        }
                    }
                }

                tblPurchaseScheduleSummaryTONew.Qty = totalScheduleQty;
                tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList = tblPurchaseVehicleDetailsTOList;



                #region check if vehicle current status is already updated
                resultMessage = CheckIfVehicleScheduleAlreadyExits(tblPurchaseScheduleSummaryTONew, conn, tran, 0);
                if (resultMessage.MessageType == ResultMessageE.Error)
                {
                    return resultMessage;
                }

                #endregion

                #region Check for flags are completed or not
                int idSummary = tblPurchaseScheduleSummaryTONew.ActualRootScheduleId;
                resultMessage = CheckIfAllQualityFlagsAreCompleted(idSummary, tblPurchaseScheduleSummaryTONew.VehiclePhaseId);
                if (resultMessage.Result > 0)
                {
                    return resultMessage;
                }
                #endregion

                //Calculate Item Details
                Boolean isForBRM = false;
                TblConfigParamsTO isForBRMTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI, conn, tran);
                if (isForBRMTO != null && isForBRMTO.ConfigParamVal.ToString() == "1")
                {
                    isForBRM = true;
                }

                if (isForBRM)
                {
                    resultMessage = CalculateItemDetails(tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList, tblPurchaseScheduleSummaryTONew, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error while calculation of item details");
                    }

                    double baseMetalCost = CalculateItemsMetalCost(tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList, tblPurchaseScheduleSummaryTONew);
                    AsignSignleGradePadtaVal(baseMetalCost, tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList);

                    //Prajakta[2020-10-17] Added to save unloading date padta
                    List<TblBaseItemMetalCostTO> baseMetalCostToList = GetBaseMetalCostListTo(tblPurchaseScheduleSummaryTONew.ActualRootScheduleId);
                    if (baseMetalCostToList != null && baseMetalCostToList.Count > 0)
                    {
                        List<TblPurchaseScheduleSummaryTO> tempScheduleList = new List<TblPurchaseScheduleSummaryTO>();
                        tempScheduleList.Add(tblPurchaseScheduleSummaryTONew);
                        GetUnloadingDatePadtaDtls(baseMetalCostToList[0], tempScheduleList);
                        tblPurchaseScheduleSummaryTONew = tempScheduleList[0];
                    }

                }

                tblPurchaseScheduleSummaryTONew.UpdatedOn = currentDate;
                tblPurchaseScheduleSummaryTONew.CreatedOn = currentDate;
                string padtaApprovalMsg = "";

                resultMessage = IsVehicleAlreadyInPremisesForDBAndIOT(tblPurchaseScheduleSummaryTONew, tblPurchaseScheduleSummaryTONew.VehicleNo, false);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                resultMessage = saveData(tblPurchaseScheduleSummaryTONew, true, false, currentDate, ref padtaApprovalMsg, conn, tran);
                result = resultMessage.Result;
                if (result <= 0)
                {
                    throw new Exception("Error while updating - tblPurchaseScheduleSummaryTO");
                }



                //new commented
                // List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOTempList = TblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, conn, tran);
                // if (tblPurchaseVehicleDetailsTOTempList != null && tblPurchaseVehicleDetailsTOTempList.Count > 0)
                // {
                //     for (int b = 0; b < tblPurchaseVehicleDetailsTOTempList.Count; b++)
                //     {

                //         TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTLocalTO = tblPurchaseVehicleDetailsTOTempList[b];
                //         if (tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count > 0)
                //         {
                //             for (int p = 0; p < tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count; p++)
                //             {
                //                 result = _iTblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);
                //                 if (result < 0)
                //                 {
                //                     tran.Rollback();
                //                     throw new Exception("Error while inserting DeleteTblGradeExpressionDtls ");
                //                 }
                //             }
                //         }

                //         result = TblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);
                //         if (result <= 0)
                //         {
                //             throw new Exception("Error while inserting DeleteTblPurchaseVehicleDetails ");
                //         }
                //     }
                // }

                //old commented
                // result = _iTblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetailsByScheduleId(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, conn, tran);
                // if (result == -1)
                // {
                //     throw new Exception("Error while deleting - itemdetails");
                // }

                //new commented
                // if (tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                // {
                //     for (int i = 0; i < tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                //     {
                //         TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = tblPurchaseScheduleSummaryTONew.PurchaseScheduleSummaryDetailsTOList[i];
                //         tblPurchaseVehicleDetailsTO.SchedulePurchaseId = tblPurchaseScheduleSummaryTONew.IdPurchaseScheduleSummary;

                //         result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTO, conn, tran);
                //         if (result <= 0)
                //         {
                //             throw new Exception("Error while inserting tblPurchaseVehicleDetailsTO ");
                //         }
                //     }
                // }

                // //Check If Tare Weight is already taken
                // List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehWtDetailsForWeighingMachine(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, Convert.ToInt32(Constants.TransMeasureTypeE.TARE_WEIGHT).ToString(), tblPurchaseWeighingStageSummaryTO.WeighingMachineId.ToString(), conn, tran);
                // if (tblPurchaseWeighingStageSummaryTOList == null || tblPurchaseWeighingStageSummaryTOList.Count == 0)
                // {
                //     result = _iTblPurchaseWeighingStageSummaryBL.InsertTblPurchaseWeighingStageSummary(tblPurchaseWeighingStageSummaryTO, conn, tran);
                //     if (result <= 0)
                //     {
                //         tran.Rollback();
                //         resultMessage.MessageType = ResultMessageE.Error;
                //         resultMessage.Text = "Error While Inserting The Tare Weight Details";
                //         return resultMessage;
                //     }
                // }


                //Prajakta[2019-02-08]Added to update the actual pending booking qty
                resultMessage = UpdateBookingPendingQtyAsPerActualOrScheduleQty(tblPurchaseScheduleSummaryTO, enquiryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                if (tblPurchaseScheduleSummaryTO.StatusId == Convert.ToInt32(StaticStuff.Constants.TranStatusE.UNLOADING_COMPLETED)
                    && tblPurchaseScheduleSummaryTO.VehiclePhaseId == Convert.ToInt32(Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED))
                {
                    List<TblPurchaseWeighingStageSummaryTO> ListWeighing = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeighingDetailsBySchduleId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, false);
                    string sourceEntityId = null;
                    foreach (var WeighingTo in ListWeighing)
                    {
                        if (sourceEntityId == null)
                        {
                            sourceEntityId = WeighingTo.IdPurchaseWeighingStage.ToString();
                        }
                        else
                        {
                            sourceEntityId = sourceEntityId + "," + WeighingTo.IdPurchaseWeighingStage.ToString();
                        }
                    }

                    TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                    List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();

                    if (tblPurchaseScheduleSummaryTO != null && tblPurchaseScheduleSummaryTO.GraderId > 0)
                    {
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                        tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.GraderId;
                        tblAlertUsersTOList.Add(tblAlertUsersTO);
                    }
                    else
                    {
                        List<DropDownTO> ListRoles = _idimensionBL.SelectAllSystemUsersListFromRoleType(Convert.ToInt32(Constants.SystemRoleTypeE.GRADER));
                        if (ListRoles != null && ListRoles.Count > 0)
                        {
                            foreach (var roleTo in ListRoles)
                            {
                                TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                                tblAlertUsersTO.RoleId = roleTo.Value;
                                tblAlertUsersTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                                tblAlertUsersTOList.Add(tblAlertUsersTO);
                            }
                        }
                    }



                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.UNLOADING_STAGE_COMPLETED, sourceEntityId);

                    tblAlertInstanceTO = new TblAlertInstanceTO();

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.UNLOADING_COMPLETED;
                    tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_UNLOADING_COMPLETED";
                    tblAlertInstanceTO.AlertComment = "Unloading completed for Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo;
                    // tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " Send In Successfully For Unloading.";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_UNLOADING_COMPLETED";

                    tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.UNLOADING_STAGE_COMPLETED;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called

                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }


                //Saket [2019-03-28] Added
                #region check if vehicle current status is already updated
                resultMessage = CheckIfVehicleScheduleAlreadyExits(tblPurchaseScheduleSummaryTONew, conn, tran, 1);
                if (resultMessage.MessageType == ResultMessageE.Error)
                {
                    return resultMessage;
                }
                #endregion

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "SaveUnloadingCompletedDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage MarkUnloadingCompleteWithTareWtDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryTO)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;

            try
            {

                conn.Open();
                tran = conn.BeginTransaction();

                resultMessage = SaveUnloadingCompletedDtls(tblPurchaseScheduleSummaryTO, tblPurchaseWeighingStageSummaryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                tran.Commit();

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in MarkUnloadingCompleteWithTareWtDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }

        }

        public ResultMessage checkIfQtyGoesOutofBand(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTONew, TblPurchaseEnquiryTO enquiryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage msg = new ResultMessage();
            Boolean isSendForApproval = false;
            msg.Result = 1;
            List<TblPurchaseScheduleSummaryTO> TblPurchaseScheduleSummaryListForId = SelectAllEnquiryScheduleSummary(tblPurchaseScheduleSummaryTONew.PurchaseEnquiryId, conn, tran);
            TblConfigParamsTO TblConfigParamsTORec = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_PADTA_CONFIGURATION_LIMIT_FOR_UNLOADING_QTY_BOOKING_QTY, conn, tran);
            double totalSaudaQty = enquiryTO.BookingQty;

            if (TblConfigParamsTORec == null)
            {
                isSendForApproval = false;
            }
            else
            {
                if (TblConfigParamsTORec.ConfigParamVal.ToString() == "0")
                {
                    isSendForApproval = false;
                }
                else
                {
                    isSendForApproval = true;
                    string[] arr = TblConfigParamsTORec.ConfigParamVal.Split(',');
                    if (arr.Length == 1)
                    {
                        Double limit = Convert.ToDouble(TblConfigParamsTORec.ConfigParamVal);
                        totalSaudaQty = totalSaudaQty + limit;
                    }
                }
            }

            if (TblPurchaseScheduleSummaryListForId != null && isSendForApproval)
            {
                double totalScheduledQty = 0;

                foreach (var TO in TblPurchaseScheduleSummaryListForId)
                {
                    List<TblPurchaseWeighingStageSummaryTO> WeighingDtlList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(TO.RootScheduleId > 0 ? TO.RootScheduleId : TO.IdPurchaseScheduleSummary, ((Int32)Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
                    foreach (var item in WeighingDtlList)
                    {
                        totalScheduledQty += (item.NetWeightMT / 1000);
                    }
                }
                if (totalScheduledQty > totalSaudaQty)
                {

                    int result = 0;
                    TblPurchaseScheduleStatusHistoryTO HistoryTO = new TblPurchaseScheduleStatusHistoryTO();
                    HistoryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTONew.ActualRootScheduleId;
                    HistoryTO.StatusId = tblPurchaseScheduleSummaryTONew.StatusId;
                    HistoryTO.AcceptStatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_IS_IN_PROCESS);
                    HistoryTO.RejectStatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_IS_IN_PROCESS);
                    HistoryTO.PhaseId = tblPurchaseScheduleSummaryTONew.VehiclePhaseId;
                    HistoryTO.AcceptPhaseId = (int)Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION;
                    HistoryTO.RejectPhaseId = (int)Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION;
                    HistoryTO.CreatedBy = tblPurchaseScheduleSummaryTONew.UpdatedBy;
                    HistoryTO.CreatedOn = _iCommonDAO.ServerDateTime;
                    HistoryTO.NavigationUrl = "Unloading/OutsideInspectionForVehicleInspectn";
                    double diffVal = totalScheduledQty - totalSaudaQty;
                    diffVal = Math.Round(diffVal, 3);

                    HistoryTO.StatusRemark = "Pending for approval ,Total sauda Qty : " + totalSaudaQty + ", Total unloading Qty : " + totalScheduledQty + ", Diff : " + diffVal;
                    HistoryTO.IsActive = 1;
                    HistoryTO.IsLatest = 1;

                    result = _iTblPurchaseScheduleStatusHistoryBL.InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran);
                    if (result <= 0)
                    {
                        throw new Exception("Error In InsertTblPurchaseScheduleStatusHistory(HistoryTO, conn, tran)");
                    }
                    msg.Result = 0;
                    msg.MessageType = ResultMessageE.Information;
                    msg.DisplayMessage = HistoryTO.StatusRemark;
                    msg.Text = HistoryTO.StatusRemark;
                }
            }

            return msg;
        }

        public int DeleteVehicleScheduleDetails(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Boolean getScheduleDetails, Boolean isSetPreviousStatus)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                if (tblPurchaseScheduleSummaryTO != null)
                {

                    //Prajakta[2019-04-11] This is modified as this API call is also used to reset the previous status

                    TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                    if (enquiryTO == null)
                    {
                        return 0;
                    }
                    int confiqId = _iTblConfigParamsDAO.IoTSetting();
                    if (isSetPreviousStatus)
                    {
                        Boolean isGetGradeExpDtls = true;
                        if (getScheduleDetails)
                        {
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                        }

                        TblPurchaseScheduleSummaryTO blPurchaseScheduleSummaryParentTO = SelectAllEnquiryScheduleSummaryTO(tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId, false, conn, tran);
                        if (blPurchaseScheduleSummaryParentTO != null)
                        {
                            blPurchaseScheduleSummaryParentTO.IsActive = 1;
                            //To avoid write status in DB
                            if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                            {
                                blPurchaseScheduleSummaryParentTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                                blPurchaseScheduleSummaryParentTO.VehicleNo = string.Empty;
                            }

                            result = UpdateTblPurchaseScheduleSummary(blPurchaseScheduleSummaryParentTO, conn, tran);
                            if (result <= 0)
                            {
                                tran.Rollback();
                                return 0;
                            }



                            //Prajakta[2019-03-22] Added
                            if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                            {
                                for (int i = 0; i < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                                {
                                    TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTLocalTO = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[i];
                                    if (tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count > 0)
                                    {
                                        for (int p = 0; p < tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count; p++)
                                        {
                                            result = _iTblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);
                                            if (result < 0)
                                            {
                                                tran.Rollback();
                                                return 0;
                                            }
                                        }
                                    }
                                    result = _iTblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);
                                    if (result < 0)
                                    {
                                        tran.Rollback();
                                        return 0;
                                    }
                                }
                            }

                            //if existing entry is commarcial approved and status going to revert.
                            if (tblPurchaseScheduleSummaryTO != null)
                            {
                                if ((tblPurchaseScheduleSummaryTO.PreviousStatusId == (Int32)Constants.TranStatusE.SEND_FOR_INSPECTION || tblPurchaseScheduleSummaryTO.PreviousStatusId == (Int32)Constants.TranStatusE.VEHICLE_PENDING_FOR_YARD_MANAGER) && tblPurchaseScheduleSummaryTO.CommercialApproval == 1)
                                {
                                    result = UpdateTblPurchaseScheduleSummaryCommercialApproval(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, 0, 0, conn, tran);
                                }
                                //Outside inspection revert status after flag update for commercial approval
                                if (tblPurchaseScheduleSummaryTO.PreviousStatusId == (Int32)Constants.TranStatusE.SEND_FOR_VERIFICATION)
                                {
                                    result = UpdateTblPurchaseScheduleSummaryCommercialApproval(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, 1, 1, conn, tran);
                                }
                            }

                            if (result >= 0)
                            {
                                result = DeleteTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, conn, tran);
                                if (result <= 0)
                                {
                                    tran.Rollback();
                                    return 0;
                                }
                            }
                        }

                        //Added for set pre status on IoT
                        if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                        {

                            if (tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.SEND_FOR_INSPECTION)
                            {
                                tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.SEND_FOR_VERIFICATION;
                            }

                            DimStatusTO dimStatusTO = _iDimStatusBL.SelectDimStatusTO(tblPurchaseScheduleSummaryTO.StatusId);
                            if (dimStatusTO != null && dimStatusTO.PrevStatusId != 0)
                            {

                                DimStatusTO PreStatusTO = _iDimStatusBL.SelectDimStatusTO(dimStatusTO.PrevStatusId);
                                if (PreStatusTO != null && PreStatusTO.IotStatusId != 0)
                                {
                                    object[] statusframeTO = new object[2] { tblPurchaseScheduleSummaryTO.ModbusRefId, PreStatusTO.IotStatusId };
                                    result = _iIotCommunication.UpdateLoadingStatusOnGateAPIToModbusTcpApi(tblPurchaseScheduleSummaryTO, statusframeTO);
                                    if (result != 1)
                                    {
                                        tran.Rollback();
                                        return 0;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        tblPurchaseScheduleSummaryTO.IsActive = 0;
                        tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.DELETE_VEHICLE);
                        result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);                    //Added by Priyanka[05-03-2019]
                                                                                                                                //result = DeleteTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, conn, tran);
                        if (result <= 0)
                        {
                            tran.Rollback();
                            return 0;
                        }

                        if (result >= 0)
                        {
                            result = _iTblPurchaseEnquiryBL.UpdatePendingBookingQty(enquiryTO, false, tblPurchaseScheduleSummaryTO, conn, tran);
                            if (result <= 0)
                            {
                                tran.Rollback();
                                return 0;
                            }

                            //Prajakta[2019-05-30] Added to update item wise pending qty
                            ResultMessage resultMessageTemp = _iTblPurchaseEnquiryDetailsBL.UpdateEnquiryItemsPendingQty(tblPurchaseScheduleSummaryTO, conn, tran);
                            if (resultMessageTemp.MessageType != ResultMessageE.Information)
                            {
                                tran.Rollback();
                                return 0;
                            }
                        }

                        //For delete vehicle

                        if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                        {
                            int deleteResult = RemoveDateFromGateAndWeightIOT(tblPurchaseScheduleSummaryTO);
                            if (deleteResult != 1)
                            {
                                throw new Exception("Error While RemoveDateFromGateAndWeightIOT ");
                            }
                            //List<int> list = _iDimensiondao.GeModRefMaxData();
                            //if (list == null)
                            //    throw new Exception("Failed to get ModbusRefList");
                            // _iModbusRefConfig.setModbusRefList(list);
                            tblPurchaseScheduleSummaryTO.ModbusRefId = 0;
                            result = UpdateModbusRefPurchaseSchedule(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, conn, tran); //To update modbusrefId
                            if (result <= 0)
                            {
                                tran.Rollback();
                                return 0;
                            }

                        }
                    }

                    resultMessage = UpdatePendingNoOfVehiclesAgainstEnquiry(enquiryTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return 0;
                    }

                }

                if (result >= 1)
                {

                    tran.Commit();
                    return 1;
                }
                else
                {
                    tran.Rollback();
                    return 0;
                }

            }
            catch (Exception ex)
            {
                return 0;
            }
            finally
            {
                conn.Close();
            }
        }


        private int RemoveDateFromGateAndWeightIOT(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            //Addes by kiran for retry 3 times to delete All Data
            int cnt = 0;
            GateIoTResult result = new GateIoTResult();
            while (cnt < 3)
            {
                result = _iGateCommunication.DeleteSingleLoadingFromGateIoT(tblPurchaseScheduleSummaryTO);
                if (result.Code == 1)
                {
                    break;
                }
                Thread.Sleep(200);
                cnt++;
            }
            if (result.Code != 1)
            {
                return 0;
            }
            int cnt2 = 0;
            NodeJsResult nodeJsResult = new NodeJsResult();
            while (cnt2 < 3)
            {
                List<TblPurchaseWeighingStageSummaryTO> ListWeighing = _iTblPurchaseWeighingStageSummaryDAO.GetVehicleWeighingDetailsBySchduleId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId, false);

                nodeJsResult = _iIotCommunication.DeleteSingleLoadingFromWeightIoTByModBusRefId(tblPurchaseScheduleSummaryTO, ListWeighing);
                if (nodeJsResult.Code == 1)
                {
                    break;
                }
                Thread.Sleep(200);
                cnt2++;
            }
            if (nodeJsResult.Code != 1)
            {
                return 0;
            }
            return 1;
        }

        public ResultMessage CalculateItemDetails(List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList, TblPurchaseScheduleSummaryTO scheduleTO, SqlConnection conn, SqlTransaction tran)
        {

            ResultMessage resultMessage = new ResultMessage();

            try
            {

                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO = NULL");
                }

                if (tblPurchaseVehicleDetailsTOList == null || tblPurchaseVehicleDetailsTOList.Count == 0)
                {
                    throw new Exception("tblPurchaseVehicleDetailsTOList = NULL");
                }

                TblConfigParamsTO maxRecValConfigTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.CP_SCRAP_MAX_REC_VAL);
                if (maxRecValConfigTO == null)
                {
                    throw new Exception("maxRecValConfigTO == null");
                }

                string maxRevValVarible = maxRecValConfigTO.ConfigParamVal.ToString();

                Int32 isActive = 1;
                var AllVariableDtls = new Dictionary<string, double>();

                List<TblExpressionDtlsTO> tblExpressionDtlsTOList = new List<TblExpressionDtlsTO>();


                string keyStr = "";
                string keyValStr = "";
                double transportAmtPerMT = 0;
                double maxRevVal = 0;
                List<TblVariablesTO> tblVariablesTOList = new List<TblVariablesTO>();

                GetVaribleList(conn, tran, ref keyStr, ref keyValStr, ref maxRevVal, maxRecValConfigTO, ref tblVariablesTOList);


                // if (AllVariableDtls == null || AllVariableDtls.Count == 0)
                // {
                //     throw new Exception("AllVariableDtls = NULL");
                // }

                // if (AllVariableDtls != null && AllVariableDtls.Count > 0)
                if (!string.IsNullOrEmpty(keyStr) && !string.IsNullOrEmpty(keyValStr))
                {
                    tblExpressionDtlsTOList = _iTblExpressionDtlsBL.SelectAllTblExpressionDtls(isActive, scheduleTO.ProdClassId, conn, tran);


                    //Prajakta[2019-04-24] Added to calculate transport amount
                    transportAmtPerMT = GetTransportAmountDtls(scheduleTO.Qty, scheduleTO.Freight, scheduleTO.IsFixed);
                    AsignTransportAmtToItemDtlsList(tblPurchaseVehicleDetailsTOList, transportAmtPerMT);

                    for (int i = 0; i < tblPurchaseVehicleDetailsTOList.Count; i++)
                    {
                        TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsLocalTO = tblPurchaseVehicleDetailsTOList[i];


                        //Prajakta[2020-09-16] Added to add process variable value to grade
                        double processVarValue = _iTblVariablesBL.GetProcessVariableValue(tblPurchaseVehicleDetailsLocalTO, tblVariablesTOList);
                        tblPurchaseVehicleDetailsLocalTO.ProcessVarValue = processVarValue;

                        //var includeInMetalCostExpList = tblExpressionDtlsTOList.Where(w => w.IncludeInMetalCost == 1).ToList();
                        //double includeInMetalCostExpValue = GetGradeExpressionDtls(tblPurchaseVehicleDetailsLocalTO, includeInMetalCostExpList, keyStr, keyValStr);

                        //var notIncludeInMetalCostExpList = tblExpressionDtlsTOList.Where(w => w.IncludeInMetalCost == 0).ToList();
                        //double tempTotalCost = GetGradeExpressionDtls(tblPurchaseVehicleDetailsLocalTO, notIncludeInMetalCostExpList, keyStr, keyValStr);

                        double includeInMetalCostExpValue = 0;
                        double tempTotalCost = GetGradeExpressionDtls(tblPurchaseVehicleDetailsLocalTO, tblExpressionDtlsTOList, keyStr, keyValStr, out includeInMetalCostExpValue, scheduleTO.COrNcId, maxRevVal, tblVariablesTOList);


                        double recoveryPerc = 0;

                        if (tblPurchaseVehicleDetailsLocalTO.Recovery <= 0 || tblPurchaseVehicleDetailsLocalTO.IsNonCommercialItem == 1)
                        {
                            tblPurchaseVehicleDetailsLocalTO.ProductAomunt = 0;
                            recoveryPerc = 0;
                            tblPurchaseVehicleDetailsLocalTO.MetalCost = 0;

                            if (tblPurchaseVehicleDetailsLocalTO.IsNonCommercialItem == 1)
                            {
                                tblPurchaseVehicleDetailsLocalTO.Rate = 0;
                                //tblPurchaseVehicleDetailsLocalTO.Recovery = 0;
                            }

                        }
                        else
                        {
                            tblPurchaseVehicleDetailsLocalTO.ProductAomunt = (tblPurchaseVehicleDetailsLocalTO.Qty * tblPurchaseVehicleDetailsLocalTO.Rate);
                            recoveryPerc = (tblPurchaseVehicleDetailsLocalTO.Recovery / 100);
                            tblPurchaseVehicleDetailsLocalTO.MetalCost = (tblPurchaseVehicleDetailsLocalTO.Rate + includeInMetalCostExpValue + tblPurchaseVehicleDetailsLocalTO.TransportAmtPerMT) / tblPurchaseVehicleDetailsLocalTO.Recovery * 100;

                        }



                        // if (tblPurchaseVehicleDetailsLocalTO.IsNonCommercialItem == 1)
                        //     tblPurchaseVehicleDetailsLocalTO.ProductAomunt = 0;
                        // else
                        //     tblPurchaseVehicleDetailsLocalTO.ProductAomunt = (tblPurchaseVehicleDetailsLocalTO.Qty * tblPurchaseVehicleDetailsLocalTO.Rate);

                        // if (tblPurchaseVehicleDetailsLocalTO.Recovery == 0)
                        //     recoveryPerc = 0;
                        // else
                        //     recoveryPerc = (tblPurchaseVehicleDetailsLocalTO.Recovery / 100);

                        tblPurchaseVehicleDetailsLocalTO.ProductRecovery = (tblPurchaseVehicleDetailsLocalTO.Qty * recoveryPerc);
                        tblPurchaseVehicleDetailsLocalTO.ProductRecovery = Math.Round(tblPurchaseVehicleDetailsLocalTO.ProductRecovery, 3);

                        // if (tblPurchaseVehicleDetailsLocalTO.ProductRecovery == 0)
                        //     tblPurchaseVehicleDetailsLocalTO.MetalCost = 0;
                        // else
                        // {
                        //     tblPurchaseVehicleDetailsLocalTO.MetalCost = tblPurchaseVehicleDetailsLocalTO.Rate / tblPurchaseVehicleDetailsLocalTO.Recovery * 100;
                        // }


                        //double tempTotalCost = GetGradeExpressionDtls(tblPurchaseVehicleDetailsLocalTO, tblExpressionDtlsTOList, keyStr, keyValStr);

                        //Prajakta[2019-04-24] Added to calculate transport amount
                        tblPurchaseVehicleDetailsLocalTO.TransportAmt = tblPurchaseVehicleDetailsLocalTO.TransportAmtPerMT * tblPurchaseVehicleDetailsLocalTO.Qty;
                        tblPurchaseVehicleDetailsLocalTO.TransportAmt = Math.Round(tblPurchaseVehicleDetailsLocalTO.TransportAmt, 3);

                        tblPurchaseVehicleDetailsLocalTO.TotalCost = (tblPurchaseVehicleDetailsLocalTO.MetalCost + tempTotalCost + tblPurchaseVehicleDetailsLocalTO.ProcessVarValue);
                        //ele.TotalCost = this.getDecimal(ele.TotalCost, UptoDecimalDigits);
                        tblPurchaseVehicleDetailsLocalTO.TotalProduct = tblPurchaseVehicleDetailsLocalTO.TotalCost * tblPurchaseVehicleDetailsLocalTO.Qty;
                        //ele.TotalProduct = this.getDecimal(ele.TotalProduct, UptoDecimalDigits);

                    }
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CalculateItemDetails(List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList, Int32 prodClassId, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;

            }

        }

        //Prajakta[2019-04-24] Added to calculate transport amount
        public double GetTransportAmountDtls(double qty, double freight, Int32 isFixed)
        {
            double transportAmtPerMT = 0;

            if (isFixed == 1)
            {
                transportAmtPerMT = freight / qty;
                transportAmtPerMT = Math.Round(transportAmtPerMT, 3);
            }
            else
            {
                transportAmtPerMT = freight;
                transportAmtPerMT = Math.Round(transportAmtPerMT, 3);
            }

            return transportAmtPerMT;

        }

        //Prajakta[2019-04-24] Added to asign transport amount
        public void AsignTransportAmtToItemDtlsList(List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList, double transportAmtPerMT)
        {
            if (scheduleItemDtlsList != null && scheduleItemDtlsList.Count > 0)
            {
                for (int i = 0; i < scheduleItemDtlsList.Count; i++)
                {
                    scheduleItemDtlsList[i].TransportAmtPerMT = transportAmtPerMT;
                }
            }
        }

        public double GetGradeExpressionDtls(TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsLocalTO, List<TblExpressionDtlsTO> ExpressionDtlsTOList, string keyStr, string keyValStr, out Double includeInMetalCostExpValue, Int32 cOrNcId, double maxRevVal, List<TblVariablesTO> tblVariablesTOList)
        {

            includeInMetalCostExpValue = 0;
            Double tempIncludeInMetalCostExpValue = 0;
            //  let UptoDecimalDigits: number = 3;
            // let totalCost: number = 0;
            double totalCost = 0;
            string recStr = "REC";
            tblPurchaseVehicleDetailsLocalTO.GradeExpressionDtlsTOList = new List<TblGradeExpressionDtlsTO>();

            if (ExpressionDtlsTOList != null && ExpressionDtlsTOList.Count > 0)
            {
                if (tblPurchaseVehicleDetailsLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsLocalTO.GradeExpressionDtlsTOList.Count > 0)
                {
                    tblPurchaseVehicleDetailsLocalTO.GradeExpressionDtlsTOList.ForEach(element =>
                    {

                        for (int index = 0; index < ExpressionDtlsTOList.Count; index++)
                        {
                            if (element.ExpressionDtlsId == ExpressionDtlsTOList[index].IdExpDtls)
                            {


                                if (tblPurchaseVehicleDetailsLocalTO.Recovery <= 0 || Convert.ToInt32(tblPurchaseVehicleDetailsLocalTO.IsNonCommercialItem) == 1)
                                {
                                    element.GradeValue = 0;
                                }
                                else
                                {

                                    //if (ExpressionDtlsTOList[index].IsRecValFrmVariables == 1)
                                    if (!String.IsNullOrEmpty(ExpressionDtlsTOList[index].IsRecValFrmVariables))
                                    {
                                        //ExpressionDtlsTOList[index].MaxRecVal = maxRevVal;
                                        ExpressionDtlsTOList[index].MaxRecVal = GetMaxRecValFromVariables(tblVariablesTOList, ExpressionDtlsTOList[index].IsRecValFrmVariables);
                                    }

                                    if (tblPurchaseVehicleDetailsLocalTO.Recovery < ExpressionDtlsTOList[index].MaxRecVal)
                                    {
                                        Boolean result = keyStr.Contains(recStr);
                                        if (!result)
                                        {
                                            keyStr += "," + recStr;
                                            keyValStr += "," + tblPurchaseVehicleDetailsLocalTO.Recovery;
                                        }
                                        else
                                        {
                                            //Remove last record and add recovery 
                                            int lastIndex = keyValStr.LastIndexOf(',');
                                            int endIndex = keyValStr.Length;
                                            keyValStr = (keyValStr.Remove(lastIndex, endIndex - lastIndex));
                                            keyValStr += "," + tblPurchaseVehicleDetailsLocalTO.Recovery;

                                        }

                                        element.GradeValue = CalculateGradeExpression(ExpressionDtlsTOList[index].ExpFormula, keyStr, keyValStr);
                                        Math.Round(element.GradeValue, 3);
                                    }
                                    else
                                    {
                                        element.GradeValue = 0;
                                    }
                                }

                                // if (tblPurchaseVehicleDetailsLocalTO.Recovery > 0)
                                // {
                                //     if (tblPurchaseVehicleDetailsLocalTO.Recovery <= ExpressionDtlsTOList[index].MaxRecVal)
                                //     {
                                //         AllVariableDtls["REC"] = tblPurchaseVehicleDetailsLocalTO.Recovery;
                                //         element.GradeValue = CalculateGradeExpression(ExpressionDtlsTOList[index].ExpFormula, AllVariableDtls);
                                //         Math.Round(element.GradeValue, 3);
                                //     }
                                //     else
                                //     {
                                //         element.GradeValue = 0;
                                //     }

                                // }
                                // else
                                //     element.GradeValue = 0;

                                if (ExpressionDtlsTOList[index].IncludeInMetalCost == 1)
                                {
                                    tempIncludeInMetalCostExpValue += element.GradeValue;
                                }
                                else
                                {
                                    totalCost += element.GradeValue;
                                }
                            }

                        }

                    });
                }
                else
                {
                    tblPurchaseVehicleDetailsLocalTO.GradeExpressionDtlsTOList = new List<TblGradeExpressionDtlsTO>();
                    for (int index = 0; index < ExpressionDtlsTOList.Count; index++)
                    {

                        TblGradeExpressionDtlsTO GradeExpressionDtlsTO = new TblGradeExpressionDtlsTO();

                        if (ExpressionDtlsTOList[index].COrNcId == cOrNcId)
                        {
                            GradeExpressionDtlsTO.ExpressionDtlsId = ExpressionDtlsTOList[index].IdExpDtls;


                            if (tblPurchaseVehicleDetailsLocalTO.Recovery <= 0 || Convert.ToInt32(tblPurchaseVehicleDetailsLocalTO.IsNonCommercialItem) == 1)
                            {
                                GradeExpressionDtlsTO.GradeValue = 0;
                            }
                            else
                            {
                                //if (ExpressionDtlsTOList[index].IsRecValFrmVariables == 1)
                                if (!String.IsNullOrEmpty(ExpressionDtlsTOList[index].IsRecValFrmVariables))
                                {
                                    //ExpressionDtlsTOList[index].MaxRecVal = maxRevVal;
                                    ExpressionDtlsTOList[index].MaxRecVal = GetMaxRecValFromVariables(tblVariablesTOList, ExpressionDtlsTOList[index].IsRecValFrmVariables);
                                }

                                if (tblPurchaseVehicleDetailsLocalTO.Recovery < ExpressionDtlsTOList[index].MaxRecVal)
                                {

                                    Boolean result = keyStr.Contains(recStr);
                                    if (!result)
                                    {
                                        keyStr += "," + recStr;
                                        keyValStr += "," + tblPurchaseVehicleDetailsLocalTO.Recovery;
                                    }
                                    else
                                    {
                                        //Remove last record and add recovery 
                                        int lastIndex = keyValStr.LastIndexOf(',');
                                        int endIndex = keyValStr.Length;
                                        keyValStr = (keyValStr.Remove(lastIndex, endIndex - lastIndex));
                                        keyValStr += "," + tblPurchaseVehicleDetailsLocalTO.Recovery;
                                    }

                                    // keyStr += ",REC";
                                    // keyValStr += "," + tblPurchaseVehicleDetailsLocalTO.Recovery;
                                    GradeExpressionDtlsTO.GradeValue = CalculateGradeExpression(ExpressionDtlsTOList[index].ExpFormula, keyStr, keyValStr);
                                    Math.Round(GradeExpressionDtlsTO.GradeValue, 3);

                                }
                                else
                                {
                                    GradeExpressionDtlsTO.GradeValue = 0;
                                }

                            }

                            if (ExpressionDtlsTOList[index].IncludeInMetalCost == 1)
                            {
                                tempIncludeInMetalCostExpValue += GradeExpressionDtlsTO.GradeValue;
                            }
                            else
                            {
                                totalCost += GradeExpressionDtlsTO.GradeValue;
                            }


                            GradeExpressionDtlsTO.SeqNo = ExpressionDtlsTOList[index].SeqNo;
                            GradeExpressionDtlsTO.ExpCode = ExpressionDtlsTOList[index].ExpCode;
                            GradeExpressionDtlsTO.ExpDisplayName = ExpressionDtlsTOList[index].ExpDisplayName;
                            tblPurchaseVehicleDetailsLocalTO.GradeExpressionDtlsTOList.Add(GradeExpressionDtlsTO);

                        }


                        // if (tblPurchaseVehicleDetailsLocalTO.Recovery > 0)
                        // {
                        //     if (tblPurchaseVehicleDetailsLocalTO.Recovery <= ExpressionDtlsTOList[index].MaxRecVal)
                        //     {
                        //         AllVariableDtls["REC"] = tblPurchaseVehicleDetailsLocalTO.Recovery;
                        //         GradeExpressionDtlsTO.GradeValue = CalculateGradeExpression(ExpressionDtlsTOList[index].ExpFormula, AllVariableDtls);
                        //         Math.Round(GradeExpressionDtlsTO.GradeValue, 3);
                        //     }
                        //     else
                        //     {
                        //         GradeExpressionDtlsTO.GradeValue = 0;
                        //     }

                        // }
                        // else
                        // {
                        //     GradeExpressionDtlsTO.GradeValue = 0;
                        // }

                        //GradeExpressionDtlsTO.GradeValue = this.getDecimal(GradeExpressionDtlsTO.GradeValue, UptoDecimalDigits);


                        //totalCost += GradeExpressionDtlsTO.GradeValue;

                    }
                }

            }

            includeInMetalCostExpValue = tempIncludeInMetalCostExpValue;

            return totalCost;
        }

        public double GetMaxRecValFromVariables(List<TblVariablesTO> tblVariablesTOList, string maxRevValVarible)
        {
            double maxRecVal = 0;
            if (!String.IsNullOrEmpty(maxRevValVarible))
            {
                var res = tblVariablesTOList.Where(a => a.VariableCode == maxRevValVarible).FirstOrDefault();
                if (res != null)
                {
                    maxRecVal = res.VariableValue;
                    maxRecVal = Math.Round(maxRecVal, 3);
                }
            }
            return maxRecVal;
        }


        // public static Dictionary<string, double> GetVaribleList(SqlConnection conn, SqlTransaction tran)
        // {
        //     Int32 isActive = 1;
        //     var AllVariableDtls = new Dictionary<string, double>();

        //     List<TblVariablesTO> tblVariablesTOList = new List<TblVariablesTO>();
        //     tblVariablesTOList = BL.TblVariablesBL.SelectActiveVariablesList(conn, tran);
        //     if (tblVariablesTOList != null && tblVariablesTOList.Count > 0)
        //     {
        //         for (int index = 0; index < tblVariablesTOList.Count; index++)
        //         {
        //             AllVariableDtls[tblVariablesTOList[index].VariableCode] = tblVariablesTOList[index].VariableValue;
        //         }
        //     }
        //     return AllVariableDtls;
        // }

        public void GetVaribleList(SqlConnection conn, SqlTransaction tran, ref string keyStr, ref string keyValStr, ref double maxRecVal, TblConfigParamsTO maxRecValConfigTO, ref List<TblVariablesTO> tblVariablesTOList)
        {
            Int32 isActive = 1;

            //List<TblVariablesTO> tblVariablesTOList = new List<TblVariablesTO>();
            //tblVariablesTOList = new List<TblVariablesTO>();
            tblVariablesTOList = _iTblVariablesBL.SelectActiveVariablesList(conn, tran);
            if (tblVariablesTOList != null && tblVariablesTOList.Count > 0)
            {
                for (int index = 0; index < tblVariablesTOList.Count; index++)
                {
                    //AllVariableDtls[tblVariablesTOList[index].VariableCode] = tblVariablesTOList[index].VariableValue;
                    keyStr += tblVariablesTOList[index].VariableCode + ",";
                    keyValStr += tblVariablesTOList[index].VariableValue + ",";
                }

                keyStr = keyStr.TrimEnd(',');
                keyValStr = keyValStr.TrimEnd(',');

                if (maxRecValConfigTO != null)
                {
                    string maxRecValVariableStr = maxRecValConfigTO.ConfigParamVal.ToString();
                    var res = tblVariablesTOList.Where(a => a.VariableCode == maxRecValVariableStr).FirstOrDefault();
                    if (res != null)
                    {
                        maxRecVal = res.VariableValue;
                    }
                }

            }
        }

        public double CalculateGradeExpression(string expStr, string keyStr, string keyValStr)
        {
            double result = 0;
            // result = Eval.Execute<double>(expStr, AllVariableDtls);
            // return result;
            Function expFun = new Function("at(" + keyStr + ")=" + expStr + "");
            Expression exeFormula = new Expression("at(" + keyValStr + ")", expFun);

            string expFormulaStr = exeFormula.getExpressionString();
            result = exeFormula.calculate();
            return result;
        }


        public double CalculateItemsMetalCost(List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList, TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            double totalProductAmount = 0;
            double totalQty = 0;
            double totalQtyExcluNonCommerItem = 0;
            double singleGradePadta = 0;
            double baseMetalCost = 0;

            //Prajakta[2020-07-11] Added to take noncommercial qty on config basis
            Boolean isTakeNonCommerQtyForCalMetalCost = false;

            TblConfigParamsTO isTakeNonCommerQtyForCalMetalCostTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_NONCOMMERCIAL_QTY_FOR_CALCULATED_METAL_COST);
            if (isTakeNonCommerQtyForCalMetalCostTO != null)
            {
                if (isTakeNonCommerQtyForCalMetalCostTO.ConfigParamVal.ToString() == "1")
                    isTakeNonCommerQtyForCalMetalCost = true;
                else
                    isTakeNonCommerQtyForCalMetalCost = false;
            }


            if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
            {
                totalProductAmount = tblPurchaseVehicleDetailsTOList.Sum(a => a.TotalProduct);
                totalQty = tblPurchaseVehicleDetailsTOList.Sum(a => a.Qty);
                totalQtyExcluNonCommerItem = tblPurchaseVehicleDetailsTOList.Where(s => s.IsNonCommercialItem == 0).Sum(a => a.Qty);

                if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.CONFIRM))
                {
                    //Prajakta[2019-09-19] Commented and added as exclude noncommercial qty while calculating padta
                    //tblPurchaseScheduleSummaryTO.CalculatedMetalCost = totalProductAmount / totalQty;

                    //Prajakta[2020-07-11] Added to take noncommercial qty on config basis
                    if (isTakeNonCommerQtyForCalMetalCost)
                    {
                        tblPurchaseScheduleSummaryTO.CalculatedMetalCost = totalProductAmount / totalQty;
                    }
                    else
                    {
                        tblPurchaseScheduleSummaryTO.CalculatedMetalCost = totalProductAmount / totalQtyExcluNonCommerItem;
                    }

                    tblPurchaseScheduleSummaryTO.CalculatedMetalCost = Math.Round(tblPurchaseScheduleSummaryTO.CalculatedMetalCost, 3);
                    singleGradePadta = tblPurchaseScheduleSummaryTO.BaseMetalCost - tblPurchaseScheduleSummaryTO.CalculatedMetalCost;
                    baseMetalCost = tblPurchaseScheduleSummaryTO.BaseMetalCost;

                    if (isTakeNonCommerQtyForCalMetalCost)
                        tblPurchaseScheduleSummaryTO.Padta = singleGradePadta * totalQty;
                    else
                        tblPurchaseScheduleSummaryTO.Padta = singleGradePadta * totalQtyExcluNonCommerItem;

                    tblPurchaseScheduleSummaryTO.Padta = Math.Round(tblPurchaseScheduleSummaryTO.Padta, 3);

                    if (totalQtyExcluNonCommerItem <= 0)
                    {
                        tblPurchaseScheduleSummaryTO.CalculatedMetalCost = 0;
                        tblPurchaseScheduleSummaryTO.Padta = 0;
                    }



                }
                else if (tblPurchaseScheduleSummaryTO.COrNcId == Convert.ToInt32(Constants.ConfirmTypeE.NONCONFIRM))
                {
                    //Prajakta[2020-07-11] Added to take noncommercial qty on config basis
                    if (isTakeNonCommerQtyForCalMetalCost)
                    {
                        tblPurchaseScheduleSummaryTO.CalculatedMetalCostForNC = totalProductAmount / totalQty;
                    }
                    else
                    {
                        tblPurchaseScheduleSummaryTO.CalculatedMetalCostForNC = totalProductAmount / totalQtyExcluNonCommerItem;
                    }

                    tblPurchaseScheduleSummaryTO.CalculatedMetalCostForNC = Math.Round(tblPurchaseScheduleSummaryTO.CalculatedMetalCostForNC, 3);
                    singleGradePadta = tblPurchaseScheduleSummaryTO.BaseMetalCostForNC - tblPurchaseScheduleSummaryTO.CalculatedMetalCostForNC;
                    baseMetalCost = tblPurchaseScheduleSummaryTO.BaseMetalCostForNC;

                    if (isTakeNonCommerQtyForCalMetalCost)
                        tblPurchaseScheduleSummaryTO.PadtaForNC = singleGradePadta * totalQty;
                    else
                        tblPurchaseScheduleSummaryTO.PadtaForNC = singleGradePadta * totalQtyExcluNonCommerItem;

                    tblPurchaseScheduleSummaryTO.PadtaForNC = Math.Round(tblPurchaseScheduleSummaryTO.PadtaForNC, 3);

                    if (totalQtyExcluNonCommerItem <= 0)
                    {
                        tblPurchaseScheduleSummaryTO.CalculatedMetalCostForNC = 0;
                        tblPurchaseScheduleSummaryTO.PadtaForNC = 0;
                    }
                }

            }
            return baseMetalCost;
        }

        public void AsignSignleGradePadtaVal(double baseMetalCost, List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList)
        {
            if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
            {
                for (int i = 0; i < tblPurchaseVehicleDetailsTOList.Count; i++)
                {
                    tblPurchaseVehicleDetailsTOList[i].GradePadta = baseMetalCost - tblPurchaseVehicleDetailsTOList[i].TotalCost;
                }
            }
        }

        public int UpdateScheduleDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {

            Int32 result = 0;
            DateTime currentDate = _iCommonDAO.ServerDateTime;

            tblPurchaseScheduleSummaryTO.UpdatedOn = currentDate;

            //Update Purchase Schedule Details
            result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
            if (result >= 1)
            {

                {
                    //First Delete previous Item Details
                    Boolean isGetGradeExpDtls = true;
                    List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOTempList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                    if (tblPurchaseVehicleDetailsTOTempList != null && tblPurchaseVehicleDetailsTOTempList.Count > 0)
                    {
                        for (int b = 0; b < tblPurchaseVehicleDetailsTOTempList.Count; b++)
                        {

                            TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTLocalTO = tblPurchaseVehicleDetailsTOTempList[b];
                            if (tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList != null && tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count > 0)
                            {
                                for (int p = 0; p < tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList.Count; p++)
                                {
                                    result = _iTblGradeExpressionDtlsBL.DeleteTblGradeExpressionDtls(tblPurchaseVehicleDetailsTLocalTO.GradeExpressionDtlsTOList[p].IdGradeExpressionDtls, conn, tran);
                                    if (result < 0)
                                    {
                                        tran.Rollback();
                                        return 0;
                                    }
                                }
                            }

                            result = _iTblPurchaseVehicleDetailsBL.DeleteTblPurchaseVehicleDetails(tblPurchaseVehicleDetailsTLocalTO.IdVehiclePurchase, conn, tran);
                            if (result <= 0)
                            {
                                return 0;
                            }
                        }
                    }

                    if (result >= 1)
                    {
                        if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        {
                            for (int a = 0; a < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; a++)
                            {
                                tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].SchedulePurchaseId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                                result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a], conn, tran);
                                if (result <= 0)
                                {
                                    return 0;
                                }
                                else
                                {

                                    if (tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList != null && tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count > 0)
                                    {
                                        tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Where(w => w.ExpressionDtlsId > 0).ToList();

                                        for (int d = 0; d < tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList.Count; d++)
                                        {
                                            tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d].PurchaseScheduleDtlsId = tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].IdVehiclePurchase;
                                            result = _iTblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[a].GradeExpressionDtlsTOList[d], conn, tran);
                                            if (result != 1)
                                            {
                                                tran.Rollback();
                                                return 0;
                                            }

                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }

            return result;
        }

        //     public static double getDecimal(string val, double UptoDecimalDigits) {

        //     if (val != null  && val != " ") {
        //         val = +val.toFixed(UptoDecimalDigits);
        //     }
        //     else
        //         val = 0;

        //     return val;

        // }


        public ResultMessage CheckIfAllQualityFlagsAreCompleted(int RootScheduleId, int phaseId)
        {
            ResultMessage res = new ResultMessage();
            try
            {
                int count = 0;
                int idtblQtyPhase = 0;
                res.Result = 0;
                string flags = "";
                List<TblQualityPhaseTO> tblQualityPhaseTOList = _iTblQualityPhaseBL.SelectAllTblQualityPhaseList(RootScheduleId, 1);
                if (tblQualityPhaseTOList != null && tblQualityPhaseTOList.Count > 0)
                {
                    int c = 1;
                    foreach (var tblQualityPhase in tblQualityPhaseTOList)
                    {
                        if (tblQualityPhase.VehiclePhaseId == phaseId)
                        {
                            // TblQualityPhaseTO TblQualityPhaseTO = tblQualityPhaseTOList.Where(w => w.VehiclePhaseId == phaseId).FirstOrDefault();
                            TblQualityPhaseTO TblQualityPhaseTO = tblQualityPhase;
                            if (TblQualityPhaseTO != null)
                            {
                                List<TblQualityPhaseDtlsTO> TblQualityPhaseDtlsTOList = _iTblQualityPhaseDtlsBL.SelectAllTblQualityPhaseDtlsList(TblQualityPhaseTO.IdTblQualityPhase);
                                List<TblQualityPhaseDtlsTO> TblQualityPhaseDtlsTOListForCheck = TblQualityPhaseDtlsTOList.Where(w => w.FlagStatusId <= 0 && w.StatusBy <= 0).ToList();
                                if (TblQualityPhaseDtlsTOListForCheck.Count > 0)
                                {
                                    foreach (var item in TblQualityPhaseDtlsTOListForCheck)
                                    {
                                        if (flags != null && flags != "")
                                        {
                                            flags = flags + "  " + c + ")" + item.SampleTypeName;
                                        }
                                        else
                                        {
                                            flags = c + ")" + item.SampleTypeName;
                                        }
                                        c++;

                                    }
                                    res.MessageType = ResultMessageE.Error;
                                    res.Text = "Please complete following flags " + flags;
                                    res.DisplayMessage = "Please complete following flags " + flags;
                                    res.Result = 1;
                                }
                                // else
                                // {
                                //     res.Result = 0;
                                // }
                            }
                        }
                    }
                }

                return res;
            }
            catch (Exception e)
            {
                res.MessageType = ResultMessageE.Error;
                res.Text = "Error while Checking Flags";
                res.Result = 0;
                return res;
            }
        }

        // public  ResultMessage SaveVehicleRecoveryDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, Int32 loginUserId)
        // {
        //     ResultMessage resultMessage = new ResultMessage();
        //     Boolean IsRecConfirm = false;
        //     SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
        //     SqlTransaction tran = null;
        //     Int32 result = 0;
        //     resultMessage.MessageType = ResultMessageE.None;
        //     DateTime serverDateTime =  _iCommonDAO.ServerDateTime;

        //     try
        //     {
        //         conn.Open();
        //         tran = conn.BeginTransaction();

        //         IsRecConfirm = CheckIsRecoveryAndGradingCompleted(tblPurchaseScheduleSummaryTO, conn, tran);
        //         if (IsRecConfirm)
        //         {
        //             // TblPurchaseScheduleSummaryTO recoveryScheduleTO=new TblPurchaseScheduleSummaryTO();
        //             //Make Clone of object
        //             TblPurchaseScheduleSummaryTO recoveryScheduleTO = tblPurchaseScheduleSummaryTO.DeepCopy();
        //             recoveryScheduleTO.UpdatedBy = loginUserId;
        //             recoveryScheduleTO.UpdatedOn = serverDateTime;
        //             recoveryScheduleTO.ParentPurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
        //             recoveryScheduleTO.VehiclePhaseId = (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY;

        //             resultMessage = CalculateRecoveryItemDtls(tblPurchaseScheduleSummaryTO, conn, tran);
        //             if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
        //             {
        //                 throw new Exception("Error while calculation item details");
        //             }
        //             else
        //             {

        //             }
        //         }
        //         else
        //         {
        //             resultMessage.DefaultSuccessBehaviour();
        //             return resultMessage;
        //         }

        //         if (resultMessage.MessageType == ResultMessageE.Information)
        //         {
        //             tran.Commit();
        //             resultMessage.DefaultSuccessBehaviour();
        //             return resultMessage;
        //         }
        //         else
        //         {
        //             tran.Rollback();

        //             //resultMessage.DefaultExceptionBehaviour(ex, "Error in saving SaveVehicleRecoveryDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
        //             return resultMessage;
        //         }

        //     }
        //     catch (System.Exception ex)
        //     {
        //         resultMessage.DefaultExceptionBehaviour(ex, "Error in saving SaveVehicleRecoveryDtls(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
        //         return resultMessage;

        //     }
        //     finally
        //     {
        //         conn.Close();
        //     }
        // }


        public static T Cast<T>(object o)
        {
            return (T)o;
        }
        public ResultMessage PrintListOfMasterReport(string fromDate, string toDate, String purchaseManagerIds)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                DataSet printDataSet = new DataSet();
                DataTable headerDT = new DataTable();
                DataTable tblPurchaseVehicleDetailsTOListDT = new DataTable();

                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummary(fromDate, toDate, purchaseManagerIds);
                List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                double conversionFact = 1000;
                int roundOff = 3;

                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {
                    GetSameProdItemsCombinedListForReportByItemName(tblPurchaseScheduleSummaryTOList);


                    for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                    {
                        TblPurchaseScheduleSummaryTO ScheduleTO = tblPurchaseScheduleSummaryTOList[i];
                        List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryAllPhasesTOList = GetAllScheduleDetailsByPhaseAndVehicleID(ScheduleTO.RootScheduleId);
                        //Prajakta[2020-10-23] Commented as values are saved on DB For unldDatePadta
                        //List<TblBaseItemMetalCostTO> baseMetalCostToList = GetBaseMetalCostListTo(ScheduleTO.RootScheduleId);
                        if (ScheduleTO.COrNcId == 1)
                        {
                            ScheduleTO.COrNcTypeName = "Order";
                        }
                        else
                        {
                            ScheduleTO.COrNcTypeName = "Enquiry";
                        }
                        //GetUnloadingDatePadtaDtls(baseMetalCostToList[0], tblPurchaseScheduleSummaryAllPhasesTOList);

                        ScheduleTO.CorretionCompletedOnStr = ScheduleTO.CorretionCompletedOn.ToShortDateString();
                        if (ScheduleTO.Height > 0 && ScheduleTO.Width > 0 && ScheduleTO.Length > 0)
                        {
                            ScheduleTO.Density = ScheduleTO.Height * ScheduleTO.Width * ScheduleTO.Length;
                            ScheduleTO.Density = Math.Round((ScheduleTO.Qty * 1000) / ScheduleTO.Density, 3);
                        }
                        ScheduleTO.CorrectionAmount = 0;
                        double unlodpadtaAmtRec = 0;
                        double unlodpdtaAmtCorr = 0;

                        if (tblPurchaseScheduleSummaryAllPhasesTOList != null && tblPurchaseScheduleSummaryAllPhasesTOList.Count > 0)
                        {
                            TblPurchaseScheduleSummaryTO unloadingTO = tblPurchaseScheduleSummaryAllPhasesTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED && a.IsUnloadingCompleted == 1).FirstOrDefault();
                            if (unloadingTO != null)
                            {
                                ScheduleTO.RefRateC = unloadingTO.RefRateC;
                                ScheduleTO.RefRateofV48Var = unloadingTO.RefRateofV48Var;
                            }


                            TblPurchaseScheduleSummaryTO recoveryTO = new TblPurchaseScheduleSummaryTO();
                            if (ScheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            {
                                recoveryTO = tblPurchaseScheduleSummaryAllPhasesTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY && a.IsRecovery == 1 && a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).FirstOrDefault();
                                if (recoveryTO != null)
                                {
                                    unlodpadtaAmtRec = recoveryTO.UnldDatePadtaPerTon;
                                }
                            }
                            else
                            {
                                if (ScheduleTO.IsBoth == 1)
                                {
                                    recoveryTO = tblPurchaseScheduleSummaryAllPhasesTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY_FOR_NC && a.IsRecovery == 1 && a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).FirstOrDefault();
                                }
                                else
                                {
                                    recoveryTO = tblPurchaseScheduleSummaryAllPhasesTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY && a.IsRecovery == 1 && a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).FirstOrDefault();
                                }

                                if (recoveryTO != null)
                                {
                                    unlodpadtaAmtRec = recoveryTO.UnldDatePadtaPerTonForNC;
                                }
                            }

                            TblPurchaseScheduleSummaryTO correctionTO = new TblPurchaseScheduleSummaryTO();
                            if (ScheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            {
                                correctionTO = tblPurchaseScheduleSummaryAllPhasesTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && a.IsCorrectionCompleted == 1 && a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).FirstOrDefault();
                                if (correctionTO != null)
                                {
                                    unlodpdtaAmtCorr = correctionTO.UnldDatePadtaPerTon;
                                }
                            }
                            else
                            {
                                if (ScheduleTO.IsBoth == 1)
                                {
                                    correctionTO = tblPurchaseScheduleSummaryAllPhasesTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS_FOR_NC && a.IsCorrectionCompleted == 1 && a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).FirstOrDefault();
                                }
                                else
                                {
                                    correctionTO = tblPurchaseScheduleSummaryAllPhasesTOList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && a.IsCorrectionCompleted == 1 && a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).FirstOrDefault();
                                }

                                if (correctionTO != null)
                                {
                                    unlodpdtaAmtCorr = correctionTO.UnldDatePadtaPerTonForNC;
                                }
                            }

                        }

                        ScheduleTO.CorrectionAmount = Math.Round((unlodpadtaAmtRec - unlodpdtaAmtCorr), roundOff);

                        ScheduleTO.PadtaBeforeCorrection = Math.Round((ScheduleTO.CorrectionAmount + unlodpdtaAmtCorr), roundOff);

                        if (ScheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        {
                            ScheduleTO.MarketFluctuations = Math.Round((ScheduleTO.RefRateC - ScheduleTO.RefRateForSauda), roundOff);
                            ScheduleTO.BookingLoss = Math.Round((ScheduleTO.RefRateForSauda - ScheduleTO.RateForC), roundOff);
                            ScheduleTO.Rate = Math.Round(ScheduleTO.RateForC / conversionFact, roundOff);
                        }
                        else
                        {
                            ScheduleTO.MarketFluctuations = Math.Round((ScheduleTO.RefRateofV48Var - ScheduleTO.RefRateForSaudaNC), roundOff);
                            ScheduleTO.BookingLoss = Math.Round((ScheduleTO.RefRateForSaudaNC - ScheduleTO.RateForNC), roundOff);
                            ScheduleTO.RefRateForSauda = ScheduleTO.RefRateForSaudaNC;
                            ScheduleTO.Rate = Math.Round(ScheduleTO.RateForNC / conversionFact, roundOff);
                        }

                        ScheduleTO.QualityEffects = Math.Round((ScheduleTO.PadtaBeforeCorrection - ScheduleTO.MarketFluctuations - ScheduleTO.BookingLoss), roundOff);

                        ScheduleTO.PadtaBeforeCorrection = Math.Round(ScheduleTO.PadtaBeforeCorrection / conversionFact, roundOff);
                        ScheduleTO.MarketFluctuations = Math.Round(ScheduleTO.MarketFluctuations / conversionFact, roundOff);
                        ScheduleTO.BookingLoss = Math.Round(ScheduleTO.BookingLoss / conversionFact, roundOff);
                        ScheduleTO.QualityEffects = Math.Round(ScheduleTO.QualityEffects / conversionFact, roundOff);

                        if (ScheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            ScheduleTO.RefRateofV48Var = Math.Round(ScheduleTO.RefRateC / conversionFact, roundOff);
                        else
                            ScheduleTO.RefRateofV48Var = Math.Round(ScheduleTO.RefRateofV48Var / conversionFact, roundOff);

                        ScheduleTO.RefRateForSauda = Math.Round(ScheduleTO.RefRateForSauda / conversionFact, roundOff);
                        //ScheduleTO.Rate = Math.Round(ScheduleTO.Rate / conversionFact, roundOff);

                        if (ScheduleTO.PurchaseScheduleSummaryDetailsTOList != null)
                        {
                            for (int x = 0; x < ScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count; x++)
                            {
                                if (ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].IsNonCommercialItem > 0)
                                {
                                    ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].GradePadta = 0;
                                }
                                ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].Rate = Math.Round(ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].Rate / conversionFact, roundOff);
                                //ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].Recovery = ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].Recovery / conversionFact;
                                ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].MetalCost = Math.Round(ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].MetalCost / conversionFact, roundOff);
                                ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].GradePadta = Math.Round(ScheduleTO.PurchaseScheduleSummaryDetailsTOList[x].GradePadta / conversionFact, roundOff);

                            }
                        }
                        tblPurchaseVehicleDetailsTOList.AddRange(ScheduleTO.PurchaseScheduleSummaryDetailsTOList);
                    }

                    tblPurchaseVehicleDetailsTOListDT = _iCommonDAO.ToDataTable(tblPurchaseVehicleDetailsTOList);
                    headerDT = _iCommonDAO.ToDataTable(tblPurchaseScheduleSummaryTOList);
                }
                else
                {
                    resultMessage.Text = "Record not found.";
                    resultMessage.DisplayMessage = "Record not found.";
                    resultMessage.Result = 2;
                    return resultMessage;
                }

                headerDT.TableName = "headerDT";
                tblPurchaseVehicleDetailsTOListDT.TableName = "tblPurchaseVehicleDetailsTOListDT";
                printDataSet.Tables.Add(headerDT);
                printDataSet.Tables.Add(tblPurchaseVehicleDetailsTOListDT);
                String ReportTemplateName = Constants.MASTER_REPORT_TEMPLATE;

                String templateFilePath = _iDimReportTemplateBL.SelectReportFullName(ReportTemplateName);
                String fileName = "Doc-" + DateTime.Now.Ticks;

                //download location for rewrite  template file
                String saveLocation = AppDomain.CurrentDomain.BaseDirectory + fileName + ".xls";
                // RunReport runReport = new RunReport();
                Boolean IsProduction = true;

                TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName("IS_PRODUCTION_ENVIRONMENT_ACTIVE");
                if (tblConfigParamsTO != null)
                {
                    if (Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 0)
                    {
                        IsProduction = false;
                    }
                }
                resultMessage = _iRunReport.GenrateMktgInvoiceReport(printDataSet, templateFilePath, saveLocation, Constants.ReportE.EXCEL_DONT_OPEN, IsProduction);
                if (resultMessage.MessageType == ResultMessageE.Information)
                {
                    String filePath = String.Empty;
                    if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(String))
                    {

                        filePath = resultMessage.Tag.ToString();
                    }
                    //driveName + path;
                    int returnPath = 0;
                    if (returnPath != 1)
                    {
                        String fileName1 = Path.GetFileName(saveLocation);
                        Byte[] bytes = File.ReadAllBytes(filePath);
                        if (bytes != null && bytes.Length > 0)
                        {
                            resultMessage.Tag = bytes;

                            string resFname = Path.GetFileNameWithoutExtension(saveLocation);
                            string directoryName;
                            directoryName = Path.GetDirectoryName(saveLocation);
                            string[] fileEntries = Directory.GetFiles(directoryName, "*Doc*");
                            string[] filesList = Directory.GetFiles(directoryName, "*Doc*");

                            foreach (string file in filesList)
                            {
                                //if (file.ToUpper().Contains(resFname.ToUpper()))
                                {
                                    File.Delete(file);
                                }
                            }
                        }

                        if (resultMessage.MessageType == ResultMessageE.Information)
                        {
                            resultMessage.DefaultSuccessBehaviour();
                        }
                    }

                }
                else
                {
                    resultMessage.Text = "Something wents wrong please try again";
                    resultMessage.DisplayMessage = "Something wents wrong please try again";
                    resultMessage.Result = 0;
                }
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "");
                return resultMessage;
            }
            finally
            {

            }
        }


        public void GetUnloadingDatePadtaDtls(TblBaseItemMetalCostTO unldDateBaseItemMetalCostTO, List<TblPurchaseScheduleSummaryTO> scheduleTOList)
        {
            if (scheduleTOList != null && scheduleTOList != null && scheduleTOList.Count > 0 && unldDateBaseItemMetalCostTO != null && unldDateBaseItemMetalCostTO != null)
            {
                double baseMetalCostForC = unldDateBaseItemMetalCostTO.BaseMetalCostForC;
                double baseMetalCostForNC = unldDateBaseItemMetalCostTO.BaseMetalCostForNC;
                for (int index = 0; index < scheduleTOList.Count; index++)
                {

                    TblPurchaseScheduleSummaryTO tempScheduleTO = scheduleTOList[index];

                    tempScheduleTO.UnldDateBaseMetalCost = baseMetalCostForC;
                    tempScheduleTO.UnldDatePadtaPerTon = tempScheduleTO.UnldDateBaseMetalCost - tempScheduleTO.CalculatedMetalCost;

                    tempScheduleTO.UnldDateBaseMetalCost = baseMetalCostForNC;
                    //tempScheduleTO.UnldDatePadtaPerTon = tempScheduleTO.UnldDateBaseMetalCost - tempScheduleTO.CalculatedMetalCostForNC;
                    tempScheduleTO.UnldDatePadtaPerTonForNC = tempScheduleTO.UnldDateBaseMetalCost - tempScheduleTO.CalculatedMetalCostForNC;



                    //TblPurchaseScheduleSummaryTO tempScheduleTO = scheduleTOList[index];
                    //if (tempScheduleTO.COrNcId == (int)Constants.ConfirmTypeE.CONFIRM)
                    //{
                    //    tempScheduleTO.UnldDateBaseMetalCost = baseMetalCostForC;
                    //    tempScheduleTO.UnldDatePadtaPerTon = tempScheduleTO.UnldDateBaseMetalCost - tempScheduleTO.CalculatedMetalCost;
                    //}
                    //else if (tempScheduleTO.COrNcId == (int)Constants.ConfirmTypeE.NONCONFIRM)
                    //{
                    //    tempScheduleTO.UnldDateBaseMetalCost = baseMetalCostForNC;
                    //    //tempScheduleTO.UnldDatePadtaPerTon = tempScheduleTO.UnldDateBaseMetalCost - tempScheduleTO.CalculatedMetalCostForNC;
                    //    tempScheduleTO.UnldDatePadtaPerTonForNC = tempScheduleTO.UnldDateBaseMetalCost - tempScheduleTO.CalculatedMetalCostForNC;

                    //}
                }
            }
        }

        public List<JObject> GetListOfMasterReport(string fromDate, string toDate, Int32 masterReportTypeE, String flagDropbox, String purchaseManagerIds)
        {
            Boolean isTakeNonCommercialQty = false;
            Double conversionFact = 1000;
            Int16 mathroundFact = 3;
            dynamic totalSchTO;
            List<JObject> ScheduleTOList = new List<JObject>();
            Int32 isConsiderTm = 0;
            if (!String.IsNullOrEmpty(flagDropbox))
            {
                isConsiderTm = 1;
            }

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummaryForMasterReport(fromDate, toDate, purchaseManagerIds, isConsiderTm);

            if (tblPurchaseScheduleSummaryTOList == null)
                return null;

            if (tblPurchaseScheduleSummaryTOList.Count == 0)
            {
                return ScheduleTOList;
            }

            if (!String.IsNullOrEmpty(flagDropbox))
            {
                tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
            }

            if (tblPurchaseScheduleSummaryTOList == null)
                return null;

            if (tblPurchaseScheduleSummaryTOList.Count == 0)
            {
                return ScheduleTOList;
            }

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                GetSameProdItemsCombinedListForReportByItemName(tblPurchaseScheduleSummaryTOList);

                if (masterReportTypeE == (Int32)Constants.MasterReportTypeE.UNLOADING_DATE_REPORT)
                    GetUnloadingPadtaDtlsForVehSche(tblPurchaseScheduleSummaryTOList);

                //Prajakta[2020-06-10]Added to add non commercial qty on basis of configuration
                TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_NONCOMMERCIAL_QTY_FOR_WEIGHTED_RATE);
                if (tblConfigParamsTO != null)
                {
                    if (tblConfigParamsTO.ConfigParamVal == "1")
                    {
                        isTakeNonCommercialQty = true;
                    }
                    else
                    {
                        isTakeNonCommercialQty = false;
                    }
                }

                List<TblProductItemTO> prodItemTOList = getListOfGrades(Constants.ItemProdCategoryE.SCRAP_OR_WASTE);
                foreach (var item in prodItemTOList)
                {
                    item.ItemName = item.ItemName.Trim();
                }
                prodItemTOList = prodItemTOList.GroupBy(x => new { x.ItemName }).Select(s => s.FirstOrDefault()).ToList();
                if (prodItemTOList != null && prodItemTOList.Count > 0)
                {


                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.OrderBy(g => g.SupplierName).ToList();

                    String previousSuppName = String.Empty;
                    totalSchTO = new JObject();

                    foreach (var ScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                    {

                        //List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(ScheduleSummaryTO.RootScheduleId);

                        //if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                        //{
                        //    TblPurchaseInvoiceTO InvoiceTO = InvoiceTOList[0];
                        //    InvoiceTO.TblPurchaseInvoiceAddrTOList = _iTblPurchaseInvoiceAddrDAO.SelectAllTblPurchaseInvoiceAddr(InvoiceTO.IdInvoicePurchase);
                        //    if (InvoiceTO.TblPurchaseInvoiceAddrTOList != null && InvoiceTO.TblPurchaseInvoiceAddrTOList.Count > 0 && ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        //    {
                        //        ScheduleSummaryTO.SupplierName = InvoiceTO.TblPurchaseInvoiceAddrTOList[0].BillingPartyName;
                        //    }
                        //}



                        if (masterReportTypeE == (Int32)Constants.MasterReportTypeE.UNLOADING_DATE_PADTA_REPORT)
                        {
                            List<DropDownTO> dropDownTOList = GetBaseMetalCostList(ScheduleSummaryTO.RootScheduleId);
                            if (dropDownTOList != null && dropDownTOList.Count > 0)
                            {
                                if (dropDownTOList[0].Tag != null && dropDownTOList[0].Tag.GetType() == typeof(TblBaseItemMetalCostTO))
                                {
                                    TblBaseItemMetalCostTO tblBaseItemMetalCostTO = (TblBaseItemMetalCostTO)dropDownTOList[0].Tag;

                                    if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                                        ScheduleSummaryTO.BaseMetalCost = tblBaseItemMetalCostTO.BaseMetalCostForC;
                                    else if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                                        ScheduleSummaryTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;
                                }

                            }
                        }

                        if (!String.IsNullOrEmpty(previousSuppName))
                        {
                            if (previousSuppName != ScheduleSummaryTO.SupplierName)
                            {
                                dynamic totalSchTOTemp = new JObject();
                                totalSchTOTemp = totalSchTO;
                                ScheduleTOList.Add(totalSchTOTemp);
                                previousSuppName = ScheduleSummaryTO.SupplierName;
                                totalSchTO = new JObject();
                            }
                        }
                        else
                        {
                            previousSuppName = ScheduleSummaryTO.SupplierName;
                        }

                        dynamic ScheduleTO = new JObject();
                        //ScheduleTO.Date = ScheduleSummaryTO.CreatedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                        ScheduleTO.Date = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                        ScheduleTO.TruckNo = ScheduleSummaryTO.VehicleNo;
                        ScheduleTO.Broker = ScheduleSummaryTO.SupplierName;
                        ScheduleTO.Location = ScheduleSummaryTO.Location;
                        ScheduleTO.Party = ScheduleSummaryTO.SupplierName;
                        ScheduleTO["Vehicle Type"] = ScheduleSummaryTO.VehicleTypeName;
                        ScheduleTO.Remark = "Qty";
                        double amount = 0;
                        double Qty = 0;

                        totalSchTO.Date = null;
                        totalSchTO.TruckNo = null;
                        totalSchTO.Broker = ScheduleSummaryTO.SupplierName;
                        totalSchTO.Location = " Total ";
                        totalSchTO.Party = null;
                        totalSchTO["Vehicle Type"] = null;
                        totalSchTO.Remark = null;

                        foreach (var prodItemTO in prodItemTOList)
                        {
                            ScheduleTO[prodItemTO.ItemName] = "";
                            TblPurchaseVehicleDetailsTO DetailsTO = ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(w => w.ItemName == prodItemTO.ItemName).FirstOrDefault();

                            if (DetailsTO != null)
                            {
                                ScheduleTO[prodItemTO.ItemName] = String.Format("{0:0.000}", DetailsTO.Qty);

                                double ScheduleTOItemQty = 0, totalSchTOItemQty = 0, totalSchTOItemQtyTotal = 0;
                                ScheduleTOItemQty = (double)ScheduleTO[prodItemTO.ItemName];
                                if (totalSchTO[prodItemTO.ItemName] == null)
                                {
                                    bool isParsable11 = Double.TryParse(totalSchTO[prodItemTO.ItemName], out totalSchTOItemQty);
                                }
                                else
                                {
                                    totalSchTOItemQty = (double)totalSchTO[prodItemTO.ItemName];
                                }
                                totalSchTOItemQtyTotal = ((ScheduleTOItemQty) + (totalSchTOItemQty));
                                totalSchTO[prodItemTO.ItemName] = String.Format("{0:0.000}", totalSchTOItemQtyTotal);
                            }
                            else
                            {
                                ScheduleTO[prodItemTO.ItemName] = "";
                                double totalSchTOElseItemQty = 0;
                                if (totalSchTO[prodItemTO.ItemName] == null)
                                {
                                    bool isParsable13 = Double.TryParse(totalSchTO[prodItemTO.ItemName], out totalSchTOElseItemQty);
                                }
                                else
                                {
                                    totalSchTOElseItemQty = (double)totalSchTO[prodItemTO.ItemName];
                                }
                                totalSchTO[prodItemTO.ItemName] = String.Format("{0:0.000}", totalSchTOElseItemQty);
                            }
                        }

                        foreach (var detailsTo in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TblProductItemTO prodItemTO = prodItemTOList.Where(w => w.ItemName == detailsTo.ItemName).FirstOrDefault();

                            if (prodItemTO != null)
                            {

                            }
                            else
                            {

                                ScheduleTO[detailsTo.ItemName] = String.Format("{0:0.000}", detailsTo.Qty);

                                double ScheduleTODItemQty = 0, totalSchTODItemQty = 0, totalSchTODItemQtyTotal = 0;
                                ScheduleTODItemQty = (double)ScheduleTO[detailsTo.ItemName];

                                if (totalSchTO[detailsTo.ItemName] == null)
                                {
                                    bool isParsable12 = Double.TryParse(totalSchTO[detailsTo.ItemName], out totalSchTODItemQty);
                                }
                                else
                                {
                                    totalSchTODItemQty = (double)totalSchTO[detailsTo.ItemName];
                                }
                                totalSchTODItemQtyTotal = ((ScheduleTODItemQty) + (totalSchTODItemQty));
                                totalSchTO[detailsTo.ItemName] = (String.Format("{0:0.000}", totalSchTODItemQtyTotal));
                            }
                        }

                        double TotalAmount = 0;
                        foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TotalAmount += (item.Qty * item.Rate) / conversionFact;
                        }

                        ScheduleTO["Total Qty"] = String.Format("{0:0.000}", ScheduleSummaryTO.Qty);

                        double ScheduleTOQty = 0, totalSchTOQty = 0, totalSchTOQtyTotal = 0;
                        ScheduleTOQty = (double)ScheduleTO["Total Qty"];
                        if (totalSchTO["Total Qty"] == null)
                        {
                            bool isParsable1 = Double.TryParse(totalSchTO["Total Qty"], out totalSchTOQty);
                        }
                        else
                        {
                            totalSchTOQty = (double)totalSchTO["Total Qty"];
                        }
                        totalSchTOQtyTotal = ((totalSchTOQty) + (ScheduleTOQty));
                        totalSchTO["Total Qty"] = String.Format("{0:0.000}", totalSchTOQtyTotal);

                        if (TotalAmount > 0)
                            //double amount = Math.Round(TotalAmount, mathroundFact);
                            ScheduleTO.Amount = String.Format("{0:0.000}", Math.Round(TotalAmount, 3));
                        else
                            ScheduleTO.Amount = 0;

                        double ScheduleTOAmt = 0, totalSchTOAmt = 0;
                        ScheduleTOAmt = (double)ScheduleTO.Amount;
                        if (totalSchTO.Amount == null)
                        {
                            bool isParsable2 = Double.TryParse(totalSchTO.Amount, out totalSchTOAmt);
                        }
                        else
                        {
                            totalSchTOAmt = (double)totalSchTO.Amount;
                        }

                        double totalSchAmount = ((ScheduleTOAmt) + (totalSchTOAmt));
                        totalSchTO.Amount = String.Format("{0:0.000}", totalSchAmount);

                        double rateNC = ScheduleSummaryTO.RateForNC / conversionFact;
                        ScheduleTO["Todays Rate"] = String.Format("{0:0.00}", rateNC);

                        if (ScheduleSummaryTO.COrNcId > 0)
                        {
                            double rateC = ScheduleSummaryTO.RateForC / conversionFact;
                            ScheduleTO["Todays Rate"] = String.Format("{0:0.00}", rateC);
                        }

                        double ScheduleTOTodaysRate = 0, totalSchTOTodaysRate = 0;
                        ScheduleTOTodaysRate = (double)ScheduleTO["Todays Rate"];
                        if (totalSchTO["Todays Rate"] == null)
                        {
                            bool isParsable3 = Double.TryParse(totalSchTO["Todays Rate"], out totalSchTOTodaysRate);
                        }
                        else
                        {
                            totalSchTOTodaysRate = (double)totalSchTO["Todays Rate"];
                        }

                        double totalRate = ((ScheduleTOTodaysRate) + (totalSchTOTodaysRate));
                        totalSchTO["Todays Rate"] = String.Format("{0:0.00}", totalRate);

                        ScheduleTOList.Add(ScheduleTO);

                    }
                    ScheduleTOList.Add(totalSchTO);
                    return ScheduleTOList;
                }
            }
            return null;
        }
        private dynamic GetTotalOfScheduleTOList(dynamic ScheduleTONew, dynamic ScheduleTO, TblPurchaseScheduleSummaryTO ScheduleSummaryTO, List<TblProductItemTO> prodItemTOList)
        {
            Double conversionFact = 1000;
            //dynamic ScheduleTONew = new JObject();
            ScheduleTONew.Date = null;
            ScheduleTONew.TruckNo = null;
            ScheduleTONew.Broker = ScheduleSummaryTO.SupplierName;
            ScheduleTONew.Location = " Total ";
            ScheduleTONew.Party = null;
            ScheduleTONew["Vehicle Type"] = null;
            ScheduleTONew.Remark = null;
            foreach (var prodItemTO in prodItemTOList)
            {
                ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = "";
                TblPurchaseVehicleDetailsTO DetailsTO = ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(w => w.ItemName == prodItemTO.ItemName).FirstOrDefault();

                if (DetailsTO != null)
                {
                    ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] += DetailsTO.Qty;
                }
                else
                {
                    ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = "";
                }
            }
            foreach (var detailsTo in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
            {
                TblProductItemTO prodItemTO = prodItemTOList.Where(w => w.ItemName == detailsTo.ItemName).FirstOrDefault();

                if (prodItemTO != null)
                {

                }
                else
                {
                    ScheduleTONew[detailsTo.ItemName + "//" + detailsTo.ProdItemId] += detailsTo.Qty;
                }
            }
            ScheduleTONew["Total Qty"] += ScheduleTO["Total Qty"];


            ScheduleTONew.Amount += ScheduleTO.Amount;

            //ScheduleTO.TodaysRate =  String.Format("{0:n}",ScheduleSummaryTO.Rate);
            ScheduleTONew["Todays Rate"] += ScheduleTO["Todays Rate"];

            //if (ScheduleSummaryTO.COrNcId > 0)
            //{
            //    ScheduleTONew["Todays Rate"] += ScheduleSummaryTO.RateForC / conversionFact;

            //}
            return ScheduleTONew;
        }


        public List<dynamic> GetOldMasterReport(string fromDate, string toDate, Int32 masterReportTypeE, String purchaseManagerIds, bool? isImport = null)
        {
            Boolean isTakeNonCommercialQty = false;
            Double conversionFact = 1000;
            Int16 mathroundFact = 3;
            //Commented by minal because Task Id = 1020
            List<string> columnName = new List<string>();
            columnName.Add("Rate");
            columnName.Add("Recovery");
            columnName.Add("METAL COST");
            columnName.Add("PRODUCT FOR RATE");
            columnName.Add("PRODUCT FOR RECOVERY");
            columnName.Add("PRODUCT FOR PADTA");
            columnName.Add("PADTA");

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummary(fromDate, toDate, purchaseManagerIds);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                GetSameProdItemsCombinedListForReportByItemName(tblPurchaseScheduleSummaryTOList);

                if (masterReportTypeE == (Int32)Constants.MasterReportTypeE.UNLOADING_DATE_REPORT)
                    GetUnloadingPadtaDtlsForVehSche(tblPurchaseScheduleSummaryTOList);

                //Prajakta[2020 - 06 - 10]Added to add non commercial qty on basis of configuration
                TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_NONCOMMERCIAL_QTY_FOR_WEIGHTED_RATE);
                if (tblConfigParamsTO != null)
                {
                    if (tblConfigParamsTO.ConfigParamVal == "1")
                    {
                        isTakeNonCommercialQty = true;
                    }
                    else
                    {
                        isTakeNonCommercialQty = false;
                    }
                }

                List<TblProductItemTO> prodItemTOList = getListOfGrades(Constants.ItemProdCategoryE.SCRAP_OR_WASTE);
                foreach (var item in prodItemTOList)
                {
                    item.ItemName = item.ItemName.Trim();
                }
                prodItemTOList = prodItemTOList.GroupBy(x => new { x.ItemName }).Select(s => s.FirstOrDefault()).ToList();
                if (prodItemTOList != null && prodItemTOList.Count > 0)
                {
                    //dynamic ScheduleTOList = new JObject();

                    dynamic ScheduleTOList = new List<dynamic>();
                    dynamic SortedList = new List<dynamic>();
                    dynamic ScheduleTOFinalList = new List<dynamic>();


                    foreach (var ScheduleSummaryTO in (isImport == null || isImport == false) ? tblPurchaseScheduleSummaryTOList : tblPurchaseScheduleSummaryTOList.Where(x=>x.VehicleTypeName?.ToLower() == "import").ToList())
                    {
                        List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(ScheduleSummaryTO.RootScheduleId);
                        //if (ScheduleSummaryTO.ActualRootScheduleId == 1593250)
                        //{
                        //}

                        if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                        {
                            TblPurchaseInvoiceTO InvoiceTO = InvoiceTOList[0];
                            InvoiceTO.TblPurchaseInvoiceAddrTOList = _iTblPurchaseInvoiceAddrDAO.SelectAllTblPurchaseInvoiceAddr(InvoiceTO.IdInvoicePurchase);
                            if (InvoiceTO.TblPurchaseInvoiceAddrTOList != null && InvoiceTO.TblPurchaseInvoiceAddrTOList.Count > 0 && ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            {
                                ScheduleSummaryTO.SupplierName = InvoiceTO.TblPurchaseInvoiceAddrTOList[0].BillingPartyName;
                            }
                        }

                        if (masterReportTypeE == (Int32)Constants.MasterReportTypeE.UNLOADING_DATE_PADTA_REPORT)
                        {
                            List<DropDownTO> dropDownTOList = GetBaseMetalCostList(ScheduleSummaryTO.RootScheduleId);
                            if (dropDownTOList != null && dropDownTOList.Count > 0)
                            {
                                if (dropDownTOList[0].Tag != null && dropDownTOList[0].Tag.GetType() == typeof(TblBaseItemMetalCostTO))
                                {
                                    TblBaseItemMetalCostTO tblBaseItemMetalCostTO = (TblBaseItemMetalCostTO)dropDownTOList[0].Tag;

                                    if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                                        ScheduleSummaryTO.BaseMetalCost = tblBaseItemMetalCostTO.BaseMetalCostForC;
                                    else if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                                        ScheduleSummaryTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;
                                }

                            }
                        }

                        dynamic ScheduleTO = new JObject();
                        ScheduleTO.Date = ScheduleSummaryTO.CreatedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                        ScheduleTO.Date = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                        ScheduleTO.TruckNo = ScheduleSummaryTO.VehicleNo;
                        ScheduleTO.Broker = ScheduleSummaryTO.SupplierName;
                        if (!string.IsNullOrEmpty(ScheduleSummaryTO.Location))//Reshma Update for old master report.
                            ScheduleTO.Location = ScheduleSummaryTO.Location.TrimEnd();
                        else
                            ScheduleTO.Location = ScheduleSummaryTO.Location;

                        ScheduleTO.Party = ScheduleSummaryTO.SupplierName;
                        ScheduleTO["Vehicle Type"] = ScheduleSummaryTO.VehicleTypeName;
                        if (isImport != null && isImport == true)
                            ScheduleTO["PARTY/LOT NO"] = ScheduleSummaryTO.LotSize;
                        ScheduleTO.Remark = "Qty";
                        double amount = 0;
                        double Qty = 0;
                        foreach (var prodItemTO in prodItemTOList)
                        {
                            //if (prodItemTO.IdProdItem ==185)
                            //{

                            //}
                            ScheduleTO[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = "";
                            TblPurchaseVehicleDetailsTO DetailsTO = ScheduleSummaryTO?.PurchaseScheduleSummaryDetailsTOList?.Where(w => w.ItemName == prodItemTO.ItemName)?.FirstOrDefault();

                            if (DetailsTO != null)
                            {
                                ScheduleTO[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = DetailsTO.Qty;
                            }
                            else
                            {
                                ScheduleTO[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = "";
                            }
                        }

                        if(ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null)
                        foreach (var detailsTo in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TblProductItemTO prodItemTO = prodItemTOList.Where(w => w.ItemName == detailsTo.ItemName)?.FirstOrDefault();

                            if (prodItemTO != null)
                            {

                            }
                            else
                            {
                                ScheduleTO[detailsTo.ItemName + "//" + detailsTo.ProdItemId] = detailsTo.Qty;
                            }
                        }

                        double TotalAmount = 0;
                        if (ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null)
                            foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TotalAmount += (item.Qty * item.Rate) / conversionFact;
                        }

                        ScheduleTO["Total Qty"] = ScheduleSummaryTO.Qty;

                        if (TotalAmount > 0)
                            ScheduleTO.Amount = Math.Round(TotalAmount, 3);
                        else
                            ScheduleTO.Amount = "";

                        //ScheduleTO.TodaysRate = String.Format("{0:n}", ScheduleSummaryTO.Rate);
                        ScheduleTO["Todays Rate"] = ScheduleSummaryTO.RateForNC / conversionFact;

                        if (ScheduleSummaryTO.COrNcId > 0)
                        {
                            ScheduleTO["Todays Rate"] = ScheduleSummaryTO.RateForC / conversionFact;

                        }
                        //Commented by minal because Task Id = 1020
                        ScheduleTO["Padta Per Truck(MT)"] = "";
                        ScheduleTO["Super Rate Differance"] = "";
                        ScheduleTO["Net Padta"] = "";

                        ScheduleTO["Weighted Rate"] = "";
                        ScheduleTO["Weighted Recovery"] = "";
                        ScheduleTO["Product For Padta"] = "";
                        ScheduleTO["Product For Recovery"] = "";
                        ScheduleTO["Product For Rate"] = "";
                        ScheduleTO.Cities = ScheduleSummaryTO.Location;
                        ScheduleTO["Broker Details"] = ScheduleSummaryTO.SupplierName;

                        //Deepali[24 - 04 - 2019] as per requirement taken by sameer.
                        CultureInfo myCI = new CultureInfo("en-US");
                        CalendarWeekRule myCWR = myCI.DateTimeFormat.CalendarWeekRule;
                        DayOfWeek myFirstDOW = myCI.DateTimeFormat.FirstDayOfWeek;
                        Calendar myCal = myCI.Calendar;

                        var day = myCal.GetWeekOfYear(ScheduleSummaryTO.CreatedOn, myCWR, myFirstDOW);

                        DateTime date = ScheduleSummaryTO.CreatedOn;
                        DateTime beginningOfMonth = new DateTime(date.Year, date.Month, 1);

                        while (date.Date.AddDays(1).DayOfWeek != CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek)
                            date = date.AddDays(1);

                        var week = (int)Math.Truncate((double)date.Subtract(beginningOfMonth).TotalDays / 7f) + 1;


                        ScheduleTO.Week = "Week " + week;
                        if (ScheduleSummaryTO.COrNcId == 1)
                        {
                            ScheduleTO.BillType = "Order";
                        }
                        else
                        {
                            ScheduleTO.BillType = "Enquiry";
                        }

                        ScheduleTOList.Add(ScheduleTO);
                        //Commented by minal because Task Id = 1020
                        if (isImport == null || isImport == false)
                            foreach (var column in columnName)
                        {
                            dynamic ScheduleTONew = new JObject();
                            ScheduleTONew = getCopyOfScheduleTO(ScheduleTO, ScheduleSummaryTO, prodItemTOList, column, isTakeNonCommercialQty,isImport);

                            ScheduleTOList.Add(ScheduleTONew);
                        }
                    }

                    return ScheduleTOList;
                }
            }
            return null;
        }

        private dynamic getCopyOfScheduleTO(dynamic ScheduleTO, TblPurchaseScheduleSummaryTO ScheduleSummaryTO, List<TblProductItemTO> prodItemTOList, string column, Boolean isTakeNonCommercialQty, bool? isImport = null)
        {
            Double conversionFact = 1000;
            Int16 mathroundFact = 3;
            dynamic ScheduleTONew = new JObject();
            ScheduleTONew.Date = ScheduleTO.Date;
            ScheduleTONew.TruckNo = ScheduleTO.TruckNo;
            ScheduleTONew.Broker = ScheduleTO.Broker;
            ScheduleTONew.Location = ScheduleTO.Location;
            ScheduleTONew.Party = ScheduleTO.Party;
            ScheduleTONew["Vehicle Type"] = ScheduleSummaryTO.VehicleTypeName;
            if (isImport != null && isImport == true)
                ScheduleTONew["PARTY/LOT NO"] = ScheduleSummaryTO.LotSize;
            ScheduleTONew.Remark = column;
            double TotalAmount = 0;
            double TotalQty = 0;
            double PadtaPerTruckPerMT = 0;
            double WeightedRate = 0;
            double ProductForRecovery = 0;
            double ProductForRecoveryAct = 0;
            double ProductForRateAct = 0;
            double ProductForPadta = 0;
            double NonComercialQty = 0;
            double WeightedRecovery = 0;
            foreach (var prodItemTO in prodItemTOList)
            {

                TblPurchaseVehicleDetailsTO DetailsTO = ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList?.Where(w => w.ItemName == prodItemTO.ItemName)?.FirstOrDefault();
                if (DetailsTO != null)
                {
                    ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = "";
                    DetailsTO = DetailsTO.DeepCopy();

                    DetailsTO.Rate = Math.Round((DetailsTO.Rate / conversionFact), mathroundFact);

                    Double baseMetalCost = ScheduleSummaryTO.BaseMetalCost;
                    if (ScheduleSummaryTO.COrNcId == 0)
                    {
                        baseMetalCost = ScheduleSummaryTO.BaseMetalCostForNC;
                    }
                    //Prajakta[2019-03-27] Commented and added
                    double gratePadta = (baseMetalCost - DetailsTO.TotalCost);
                    // double gratePadta = (baseMetalCost - DetailsTO.MetalCost);

                    DetailsTO.GradePadta = Math.Round((gratePadta / conversionFact), mathroundFact);

                    DetailsTO.MetalCost = Math.Round(DetailsTO.MetalCost / conversionFact, mathroundFact);
                    if (column == "Recovery")
                    {
                        ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round(DetailsTO.Recovery, mathroundFact);
                    }
                    if (column == "METAL COST")
                    {
                        //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.MetalCost);
                        ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round(DetailsTO.MetalCost, mathroundFact);
                    }
                    if (column == "Rate")
                    {
                        //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Rate);
                        ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round(DetailsTO.Rate, mathroundFact);
                    }
                    if (column == "PRODUCT FOR RATE")
                    {
                        //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Qty * DetailsTO.Rate);
                        ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round((DetailsTO.Qty * DetailsTO.Rate), mathroundFact);

                    }
                    if (column == "PRODUCT FOR RECOVERY")
                    {
                        //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Qty * DetailsTO.Recovery);
                        if (prodItemTO.IsNonCommercialItem > 0)
                        {
                            ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = 0;
                        }
                        else
                        {
                            ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round(DetailsTO.Qty * DetailsTO.Recovery, 2);
                        }
                    }
                    if (column == "PRODUCT FOR PADTA")
                    {
                        // TotalAmount = 0;
                        // TotalQty = 0;
                        // ProductForRecovery = 0;
                        // foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        // {
                        //     TotalAmount += (item.Qty * item.Rate) / conversionFact;
                        //     TotalQty = TotalQty + item.Qty;
                        //     ProductForRecovery = ProductForRecovery + (item.Qty * item.Recovery);
                        // }
                        // if (ScheduleSummaryTO.COrNcId == 1)
                        // {
                        //     PadtaPerTruckPerMT = (ScheduleSummaryTO.BaseMetalCost - ScheduleSummaryTO.CalculatedMetalCost) / conversionFact;
                        // }
                        // else
                        // {
                        //     PadtaPerTruckPerMT = (ScheduleSummaryTO.BaseMetalCost - ScheduleSummaryTO.BaseMetalCostForNC) / conversionFact;
                        // }

                        // ProductForPadta = PadtaPerTruckPerMT * (TotalQty - NonComercialQty);

                        //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Qty * DetailsTO.Padta);
                        if (prodItemTO.IsNonCommercialItem > 0)
                        {
                            ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = 0;
                        }
                        else
                        {
                            ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round((DetailsTO.Qty * DetailsTO.GradePadta), mathroundFact);
                            // ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round(ProductForPadta, mathroundFact);
                        }
                    }
                    if (column == "PADTA")
                    {
                        //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Padta);
                        if (prodItemTO.IsNonCommercialItem > 0)
                        {
                            ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = 0;
                        }
                        else
                        {
                            ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round(DetailsTO.GradePadta, mathroundFact);
                        }
                        if (prodItemTO.IsNonCommercialItem == 1)
                        {
                            NonComercialQty = NonComercialQty + DetailsTO.Qty;
                        }
                    }
                }
                else
                {
                    ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = "";
                }
            }
            if(ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null)
            foreach (var DetailsTO in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
            {
                TblProductItemTO prodItemTO = prodItemTOList.Where(w => w.ItemName == DetailsTO.ItemName).FirstOrDefault();

                if (prodItemTO != null)
                {
                }
                else
                {
                    // ScheduleTONew[DetailsTO.ItemName] = "";
                    if (DetailsTO != null)
                    {
                        // DetailsTO = DetailsTO.DeepCopy();

                        // DetailsTO.Rate = Math.Round((DetailsTO.Rate / conversionFact), mathroundFact);

                        Double baseMetalCost = ScheduleSummaryTO.BaseMetalCost;
                        if (ScheduleSummaryTO.COrNcId == 0)
                        {
                            baseMetalCost = ScheduleSummaryTO.BaseMetalCostForNC;
                        }
                        //Prajakta[2019-03-27] Commented and added
                        double gratePadta = (baseMetalCost - DetailsTO.TotalCost);
                        //double gratePadta = (baseMetalCost - DetailsTO.MetalCost);

                        DetailsTO.GradePadta = Math.Round((gratePadta / conversionFact), mathroundFact);

                        // DetailsTO.MetalCost = Math.Round(DetailsTO.MetalCost / conversionFact, mathroundFact);
                        if (column == "Recovery")
                        {
                            ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = Math.Round(DetailsTO.Recovery, mathroundFact);
                        }
                        if (column == "METAL COST")
                        {
                            //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.MetalCost);
                            ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = Math.Round(DetailsTO.MetalCost / conversionFact, mathroundFact);
                        }
                        if (column == "Rate")
                        {
                            //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Rate);
                            ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = Math.Round(DetailsTO.Rate / conversionFact, mathroundFact);
                        }
                        if (column == "PRODUCT FOR RATE")
                        {
                            //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Qty * DetailsTO.Rate);
                            ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = Math.Round((DetailsTO.Qty * (DetailsTO.Rate / conversionFact)), mathroundFact);

                        }
                        if (column == "PRODUCT FOR RECOVERY")
                        {
                            //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Qty * DetailsTO.Recovery);
                            if (DetailsTO.IsNonCommercialItem > 0)
                            {
                                ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = 0;
                            }
                            else
                            {
                                ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = Math.Round(DetailsTO.Qty * DetailsTO.Recovery, mathroundFact);
                            }
                        }
                        if (column == "PRODUCT FOR PADTA")
                        {
                            // TotalAmount = 0;
                            // TotalQty = 0;
                            // ProductForRecovery = 0;
                            // foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                            // {
                            //     TotalAmount += (item.Qty * item.Rate) / conversionFact;
                            //     TotalQty = TotalQty + item.Qty;
                            //     ProductForRecovery = ProductForRecovery + (item.Qty * item.Recovery);
                            // }
                            // //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Qty * DetailsTO.Padta);
                            // if (ScheduleSummaryTO.COrNcId == 1)
                            // {
                            //     PadtaPerTruckPerMT = (ScheduleSummaryTO.BaseMetalCost - ScheduleSummaryTO.CalculatedMetalCost) / conversionFact;
                            // }
                            // else
                            // {
                            //     PadtaPerTruckPerMT = (ScheduleSummaryTO.BaseMetalCost - ScheduleSummaryTO.BaseMetalCostForNC) / conversionFact;
                            // }

                            // ProductForPadta = PadtaPerTruckPerMT * (TotalQty - NonComercialQty);
                            if (DetailsTO.IsNonCommercialItem > 0)
                            {
                                ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = 0;
                            }
                            else
                            {
                                ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = Math.Round((DetailsTO.Qty * DetailsTO.GradePadta), mathroundFact);
                                // ScheduleTONew[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = Math.Round(ProductForPadta, mathroundFact);
                            }
                        }
                        if (column == "PADTA")
                        {
                            //ScheduleTONew[prodItemTO.ItemName] = String.Format("{0:n}", DetailsTO.Padta);
                            if (DetailsTO.IsNonCommercialItem > 0)
                            {
                                ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = 0;
                            }
                            else
                            {
                                ScheduleTONew[DetailsTO.ItemName + "//" + DetailsTO.ProdItemId] = Math.Round(DetailsTO.GradePadta, mathroundFact);
                            }
                            if (DetailsTO.IsNonCommercialItem == 1)
                            {
                                NonComercialQty = NonComercialQty + DetailsTO.Qty;
                            }
                        }
                    }

                }
            }

            TotalQty = ScheduleSummaryTO.Qty;

            if (column == "PADTA")
            {
                TotalAmount = 0;
                ProductForRecovery = 0;
                if (ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null)
                    foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                {
                    TotalAmount += (item.Qty * item.Rate) / conversionFact;
                    //TotalQty = TotalQty + item.Qty;

                    if (isTakeNonCommercialQty)
                    {
                        ProductForRecovery = ProductForRecovery + (item.Qty * item.Recovery);
                    }
                    else
                    {
                        if (item.IsNonCommercialItem == 0)
                            ProductForRecovery = ProductForRecovery + (item.Qty * item.Recovery);
                    }

                }
                if (ScheduleSummaryTO.COrNcId == 1)
                {
                    PadtaPerTruckPerMT = (ScheduleSummaryTO.BaseMetalCost - ScheduleSummaryTO.CalculatedMetalCost) / conversionFact;
                }
                else
                {
                    //Prajakta[2019-04-02] Commented and added
                    // PadtaPerTruckPerMT = (ScheduleSummaryTO.BaseMetalCost - ScheduleSummaryTO.BaseMetalCostForNC) / conversionFact;
                    PadtaPerTruckPerMT = (ScheduleSummaryTO.BaseMetalCostForNC - ScheduleSummaryTO.CalculatedMetalCostForNC) / conversionFact;
                }

                // WeightedRate = TotalAmount / TotalQty;

                if (isTakeNonCommercialQty)
                {
                    WeightedRate = TotalAmount / (TotalQty);
                }
                else
                {
                    WeightedRate = TotalAmount / (TotalQty - NonComercialQty);
                }

                if (isTakeNonCommercialQty)
                {
                    ProductForPadta = PadtaPerTruckPerMT * (TotalQty);
                    WeightedRecovery = ProductForRecovery / (TotalQty);
                    ProductForRecoveryAct = WeightedRecovery * (TotalQty);
                    ProductForRateAct = WeightedRate * (TotalQty);
                }
                else
                {
                    ProductForPadta = PadtaPerTruckPerMT * (TotalQty - NonComercialQty);
                    WeightedRecovery = ProductForRecovery / (TotalQty - NonComercialQty);
                    ProductForRecoveryAct = WeightedRecovery * (TotalQty - NonComercialQty);
                    ProductForRateAct = WeightedRate * (TotalQty - NonComercialQty);
                }

                //ProductForRateAct = WeightedRate * TotalQty;

                WeightedRate = CheckValIsNaN(WeightedRate);
                ProductForPadta = CheckValIsNaN(ProductForPadta);
                WeightedRecovery = CheckValIsNaN(WeightedRecovery);
                ProductForRecoveryAct = CheckValIsNaN(ProductForRecoveryAct);
                ProductForRateAct = CheckValIsNaN(ProductForRateAct);


            }
            //Saket [2019-04-02] As per discussion with mahesh despande they want qty in each column.
            //if (TotalQty != 0 && column == "PADTA")
            if (TotalQty != 0)
            {
                ScheduleTONew.TotalQty = Math.Round(TotalQty, mathroundFact);
            }
            else
            {
                ScheduleTONew.TotalQty = "";
            }

            if (column == "Qty" || column == "Rate")
            {
                TotalAmount = 0;
                if (ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null)
                    foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                {
                    TotalAmount += (item.Qty * item.Rate) / conversionFact;
                }

                //ScheduleTONew.Amount = String.Format("{0:n}", TotalAmount);
                ScheduleTONew.Amount = Math.Round(TotalAmount, 3);
            }
            else
            {
                ScheduleTONew.Amount = "";
            }

            //ScheduleTONew.TodaysRate = String.Format("{0:n}", ScheduleTO.TodaysRate);
            // ScheduleTONew.TodaysRate = ScheduleTO.TodaysRate;
            ScheduleTONew["Todays Rate"] = ScheduleSummaryTO.RateForNC / conversionFact;

            if (ScheduleSummaryTO.COrNcId > 0)
            {
                ScheduleTONew["Todays Rate"] = ScheduleSummaryTO.RateForC / conversionFact;

            }
            // ScheduleTONew["Todays Rate"] = ScheduleSummaryTO.Rate / conversionFact;

            if (PadtaPerTruckPerMT != 0 && column == "PADTA")
            {
                //ScheduleTONew.PadtaPerTruckPerMT = String.Format("{0:n}", PadtaPerTruckPerMT);
                ScheduleTONew.PadtaPerTruckPerMT = Math.Round(PadtaPerTruckPerMT, mathroundFact);
            }
            else
            {
                ScheduleTONew.PadtaPerTruckPerMT = "";
            }
            //ScheduleTONew.SuperRateDifferance = String.Format("{0:n}", ScheduleTO.SuperRateDifferance);
            ScheduleTONew.SuperRateDifferance = ScheduleTO.SuperRateDifferance;
            //ScheduleTONew.NetPadta = String.Format("{0:n}", ScheduleTO.NetPadta);
            ScheduleTONew.NetPadta = ScheduleTO.NetPadta;
            if (WeightedRate != 0)
            {
                //ScheduleTONew.WeightedRate =  String.Format("{0:n}",WeightedRate);
                ScheduleTONew.WeightedRate = Math.Round(WeightedRate, mathroundFact);
            }
            else
            {
                ScheduleTONew.WeightedRate = "";
            }

            if (WeightedRecovery != 0)
            {
                //ScheduleTONew.WeightedRecovery = String.Format("{0:n}", WeightedRecovery);
                ScheduleTONew.WeightedRecovery = Math.Round(WeightedRecovery, mathroundFact);
            }
            else
            {
                ScheduleTONew.WeightedRecovery = "";
            }
            if (ProductForPadta != 0 && column == "PADTA")
            {
                //ScheduleTONew.ProductForPadta = String.Format("{0:n}", ProductForPadta);
                ScheduleTONew.ProductForPadta = Math.Round(ProductForPadta, mathroundFact);
            }
            else
            {
                ScheduleTONew.ProductForPadta = "";
            }

            if (ProductForRecoveryAct != 0)
            {
                //ScheduleTONew.ProductForRecovery = String.Format("{0:n}", ProductForRecovery);
                ScheduleTONew.ProductForRecovery = Math.Round(ProductForRecoveryAct, mathroundFact);
            }
            else
            {
                ScheduleTONew.ProductForRecovery = "";
            }

            if (ProductForRateAct != 0)
            {
                //ScheduleTONew.ProductForRate = String.Format("{0:n}", TotalAmount);
                ScheduleTONew.ProductForRate = Math.Round(ProductForRateAct, mathroundFact);
            }
            else
            {
                ScheduleTONew.ProductForRate = "";
            }

            ScheduleTONew.Cities = ScheduleTO.Cities;
            ScheduleTONew.BrokerDetails = ScheduleTO.BrokerDetails;
            ScheduleTONew.Week = ScheduleTO.Week;
            ScheduleTONew.BillType = ScheduleTO.BillType;

            return ScheduleTONew;
        }

        private List<TblProductItemTO> getListOfGrades(Constants.ItemProdCategoryE itemProdCategoryE)
        {
            string specId = null;
            List<TblProdClassificationTO> TblProdClassificationTOCatlist = _iTblProdClassificationBL.SelectAllProdClassificationListyByItemProdCatgE(itemProdCategoryE);
            List<TblProdClassificationTO> TblProdClassificationTOSpecificationlist = new List<TblProdClassificationTO>();
            if (TblProdClassificationTOCatlist != null && TblProdClassificationTOCatlist.Count > 0)
            {
                string catStr = (string.Join(",", TblProdClassificationTOCatlist.Select(x => x.IdProdClass.ToString()).ToArray()));

                List<TblProdClassificationTO> TblProdClassificationTOSubCatlist = _iTblProdClassificationBL.SelectAllTblProdClassification(catStr, "SC");
                if (TblProdClassificationTOSubCatlist != null && TblProdClassificationTOSubCatlist.Count > 0)
                {
                    string subCatStr = (string.Join(",", TblProdClassificationTOSubCatlist.Select(x => x.IdProdClass.ToString()).ToArray()));

                    TblProdClassificationTOSpecificationlist = _iTblProdClassificationBL.SelectAllTblProdClassification(subCatStr, "S");
                }

            }
            if (TblProdClassificationTOSpecificationlist != null && TblProdClassificationTOSpecificationlist.Count > 0)
            {
                foreach (var SpecTO in TblProdClassificationTOSpecificationlist)
                {
                    if (specId == null)
                    {
                        specId = SpecTO.IdProdClass.ToString();
                    }
                    else
                    {
                        specId = specId + "," + SpecTO.IdProdClass.ToString();
                    }
                }
            }
            return _iTblProductItemBL.SelectAllTblProductGraidList(specId);
        }

        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummary(string fromDate, string toDate, String purchaseManagerIds)
        {
            TblPurSchSummaryFilterTO tblPurSchSummaryFilterTempTO = new TblPurSchSummaryFilterTO();
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;

            if (Constants.IsDateTime(fromDate))
                from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            if (Constants.IsDateTime(toDate))
                to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));


            tblPurSchSummaryFilterTempTO.FromDate = from_Date;
            tblPurSchSummaryFilterTempTO.ToDate = to_Date;
            //Prajakta[2019-09-26] Commented and added  UNLOADING_COMPLETED statusId to optimize code
            //tblPurSchSummaryFilterTempTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED);
            tblPurSchSummaryFilterTempTO.StatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED);
            tblPurSchSummaryFilterTempTO.PhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS);

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForGradeNote(tblPurSchSummaryFilterTempTO, purchaseManagerIds);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListToReturn = new List<TblPurchaseScheduleSummaryTO>();

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                //Prajakta[2019-09-26] Commented and added to optimize code
                // Boolean isGetGradeExpDtls = false;
                // foreach (var tblPurchaseScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                // {
                //     if (tblPurchaseScheduleSummaryTO.IsCorrectionCompleted > 0 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)// && tblPurchaseScheduleSummaryTO.CommercialApproval > 0 Commented for c or nc 
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                //         tblPurchaseScheduleSummaryTOListToReturn.Add(tblPurchaseScheduleSummaryTO);
                //     }
                // }
                // return tblPurchaseScheduleSummaryTOListToReturn;

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return null;
            }
        }

        //Added by minal 26 May 2021

        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummaryForDropbox(string vehicleIds, int cOrNcId)
        {

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForGradeNoteForDropbox(vehicleIds, cOrNcId);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListToReturn = new List<TblPurchaseScheduleSummaryTO>();

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                //Prajakta[2019-09-26] Commented and added to optimize code
                // Boolean isGetGradeExpDtls = false;
                // foreach (var tblPurchaseScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                // {
                //     if (tblPurchaseScheduleSummaryTO.IsCorrectionCompleted > 0 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)// && tblPurchaseScheduleSummaryTO.CommercialApproval > 0 Commented for c or nc 
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                //         tblPurchaseScheduleSummaryTOListToReturn.Add(tblPurchaseScheduleSummaryTO);
                //     }
                // }
                // return tblPurchaseScheduleSummaryTOListToReturn;

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return null;
            }
        }

        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummaryForMasterReportForDropbox(string vehicleIds, int cOrNcId)
        {

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForMasterReportForDropbox(vehicleIds, cOrNcId);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListToReturn = new List<TblPurchaseScheduleSummaryTO>();

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                //Prajakta[2019-09-26] Commented and added to optimize code
                // Boolean isGetGradeExpDtls = false;
                // foreach (var tblPurchaseScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                // {
                //     if (tblPurchaseScheduleSummaryTO.IsCorrectionCompleted > 0 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)// && tblPurchaseScheduleSummaryTO.CommercialApproval > 0 Commented for c or nc 
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                //         tblPurchaseScheduleSummaryTOListToReturn.Add(tblPurchaseScheduleSummaryTO);
                //     }
                // }
                // return tblPurchaseScheduleSummaryTOListToReturn;

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return null;
            }
        }

        //Added by minal
        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummaryForMasterReport(string fromDate, string toDate, String purchaseManagerIds, Int32 isConsiderTm = 0)
        {
            TblPurSchSummaryFilterTO tblPurSchSummaryFilterTempTO = new TblPurSchSummaryFilterTO();
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;

            if (Constants.IsDateTime(fromDate))
                from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            if (Constants.IsDateTime(toDate))
                to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));


            tblPurSchSummaryFilterTempTO.FromDate = from_Date;
            tblPurSchSummaryFilterTempTO.ToDate = to_Date;
            //Prajakta[2019-09-26] Commented and added  UNLOADING_COMPLETED statusId to optimize code
            //tblPurSchSummaryFilterTempTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED);
            tblPurSchSummaryFilterTempTO.StatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED);
            tblPurSchSummaryFilterTempTO.PhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS);
            tblPurSchSummaryFilterTempTO.IsConsiderTm = isConsiderTm;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForMasterReport(tblPurSchSummaryFilterTempTO, purchaseManagerIds);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListToReturn = new List<TblPurchaseScheduleSummaryTO>();

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                //Prajakta[2019-09-26] Commented and added to optimize code
                // Boolean isGetGradeExpDtls = false;
                // foreach (var tblPurchaseScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                // {
                //     if (tblPurchaseScheduleSummaryTO.IsCorrectionCompleted > 0 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)// && tblPurchaseScheduleSummaryTO.CommercialApproval > 0 Commented for c or nc 
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                //         tblPurchaseScheduleSummaryTOListToReturn.Add(tblPurchaseScheduleSummaryTO);
                //     }
                // }
                // return tblPurchaseScheduleSummaryTOListToReturn;

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return tblPurchaseScheduleSummaryTOList;
            }
        }

        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummaryForReport(DateTime fromDate, DateTime toDate, String purchaseManagerIds, Int32 isConsiderTm = 0)
        {
            TblPurSchSummaryFilterTO tblPurSchSummaryFilterTempTO = new TblPurSchSummaryFilterTO();
            //DateTime from_Date = DateTime.MinValue;
            //DateTime to_Date = DateTime.MinValue;

            //if (Constants.IsDateTime(fromDate))
            //    from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            //if (Constants.IsDateTime(toDate))
            //    to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));


            tblPurSchSummaryFilterTempTO.FromDate = fromDate;
            tblPurSchSummaryFilterTempTO.ToDate = toDate;
            //Prajakta[2019-09-26] Commented and added  UNLOADING_COMPLETED statusId to optimize code
            //tblPurSchSummaryFilterTempTO.StatusId = Convert.ToInt32(Constants.TranStatusE.VEHICLE_SCHEDULE_REJECTED);
            tblPurSchSummaryFilterTempTO.StatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED);
            tblPurSchSummaryFilterTempTO.PhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS);
            tblPurSchSummaryFilterTempTO.IsConsiderTm = isConsiderTm;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForGradeNote(tblPurSchSummaryFilterTempTO, purchaseManagerIds);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListToReturn = new List<TblPurchaseScheduleSummaryTO>();

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                //Prajakta[2019-09-26] Commented and added to optimize code
                // Boolean isGetGradeExpDtls = false;
                // foreach (var tblPurchaseScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                // {
                //     if (tblPurchaseScheduleSummaryTO.IsCorrectionCompleted > 0 && tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && tblPurchaseScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)// && tblPurchaseScheduleSummaryTO.CommercialApproval > 0 Commented for c or nc 
                //     {
                //         tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                //         tblPurchaseScheduleSummaryTOListToReturn.Add(tblPurchaseScheduleSummaryTO);
                //     }
                // }
                // return tblPurchaseScheduleSummaryTOListToReturn;

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return tblPurchaseScheduleSummaryTOList;
            }
        }


        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummary(Int32 rootScheduleId)
        {

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                Boolean isGetGradeExpDtls = false;

                foreach (var tblPurchaseScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                {
                    tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, isGetGradeExpDtls);
                }
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return null;
            }
        }


        public ResultMessage SaveScheduleDtlsAsPerCorNC(TblPurchaseScheduleSummaryTO scheduleTO, Boolean isProcess, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 rootScheduleId = 0;
            double totalInvoiceQty = 0;
            Int32 otherTaxTypeId = 0;
            Int32 statusId = 0;
            Int32 vehiclePhaseId = 0;

            List<TblPurchaseScheduleSummaryTO> scheduleInsertList = new List<TblPurchaseScheduleSummaryTO>();
            List<TblPurchaseScheduleSummaryTO> scheduleUpdateList = new List<TblPurchaseScheduleSummaryTO>();

            try
            {

                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO == NULL");
                }

                Boolean isForBrm = false;
                TblConfigParamsTO tblConfigParamsTOIsBrm = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI, conn, tran);
                if (tblConfigParamsTOIsBrm != null && tblConfigParamsTOIsBrm.ConfigParamVal.ToString() == "1")
                {
                    isForBrm = true;
                }

                // if (scheduleTO.RootScheduleId > 0)
                //     rootScheduleId = scheduleTO.RootScheduleId;
                // else
                //     rootScheduleId = scheduleTO.IdPurchaseScheduleSummary;

                rootScheduleId = scheduleTO.ActualRootScheduleId;

                List<TblPurchaseInvoiceTO> tblPurchaseInvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(rootScheduleId, conn, tran);

                if (tblPurchaseInvoiceTOList != null && tblPurchaseInvoiceTOList.Count > 0)
                {
                    List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDtlsList = _iTblPurchaseInvoiceItemDetailsBL.SelectPurchaseInvoiceItemDtlsForOtherTaxId(tblPurchaseInvoiceTOList[0].IdInvoicePurchase, otherTaxTypeId, conn, tran);
                    totalInvoiceQty = GetPurchaseInvoiceQty(purchaseInvoiceItemDtlsList);

                }
                else
                    totalInvoiceQty = 0;


                //Prajakta[2020-07-16] Added to asign invoice qty from UI
                if (scheduleTO.InvoiceQty > 0)
                    totalInvoiceQty = scheduleTO.InvoiceQty;

                if (scheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM && isForBrm)
                {
                    if (totalInvoiceQty >= scheduleTO.Qty)
                    {
                        resultMessage.DefaultSuccessBehaviour();
                        return resultMessage;
                    }
                }

                //Get All Schedule List
                List<TblPurchaseScheduleSummaryTO> allScheduleList = new List<TblPurchaseScheduleSummaryTO>();
                if (isProcess && isForBrm)
                {
                    allScheduleList = SelectVehicleScheduleByRootAndStatusId(rootScheduleId, statusId, vehiclePhaseId, conn, tran);
                }
                else
                {
                    allScheduleList.Add(scheduleTO);
                }

                if (allScheduleList == null || allScheduleList.Count == 0)
                {
                    throw new Exception("allScheduleList == NULL");
                }

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsForPurchaseTO(scheduleTO.PurchaseEnquiryId, conn, tran);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == NULL");
                }

                TblBaseItemMetalCostTO tblBaseItemMetalCostTO = new TblBaseItemMetalCostTO();

                if (isForBrm)
                {
                    List<TblBaseItemMetalCostTO> tblBaseItemMetalCostTOList = _iTblBaseItemMetalCostBL.SelectLatestBaseItemMetalCost(enquiryTO.GlobalRatePurchaseId, conn, tran);
                    if (tblBaseItemMetalCostTOList == null)
                    {
                        throw new Exception("tblBaseItemMetalCostTOList == NULL");
                    }

                    GetBaseItemCostAsPerCOrNC(tblBaseItemMetalCostTOList, tblBaseItemMetalCostTO);



                }

                for (int k = 0; k < allScheduleList.Count; k++)
                {

                    Boolean isGetGradeExpDtls = true;
                    TblPurchaseScheduleSummaryTO existingScheduleTO = allScheduleList[k];

                    if (isProcess && isForBrm)
                    {
                        existingScheduleTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(existingScheduleTO.IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                        if (existingScheduleTO.PurchaseScheduleSummaryDetailsTOList == null || existingScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count == 0)
                        {
                            throw new Exception("existingScheduleTO.PurchaseScheduleSummaryDetailsTOList == NULL");
                        }
                    }

                    //Change as per c or nc change trail as per C or NC
                    TblPurchaseScheduleSummaryTO newScheduleTO = new TblPurchaseScheduleSummaryTO();

                    if (existingScheduleTO.PurchaseScheduleSummaryDetailsTOList != null && existingScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                    {
                        //existingScheduleTO.PurchaseScheduleSummaryDetailsTOList = existingScheduleTO.PurchaseScheduleSummaryDetailsTOList.OrderBy(a => a.ItemSeqNo).ToList();
                        existingScheduleTO.PurchaseScheduleSummaryDetailsTOList = SortList(existingScheduleTO.PurchaseScheduleSummaryDetailsTOList);
                    }

                    resultMessage = AdjustPurchaseInvoiceQty(existingScheduleTO, totalInvoiceQty, enquiryTO, tblBaseItemMetalCostTO, isForBrm, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error In AdjustPurchaseInvoiceQty(existingScheduleTO, totalInvoiceQty, enquiryTO, conn, tran);");
                    }

                    // if (existingScheduleTO.Qty != 18.180)
                    // {
                    if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(TblPurchaseScheduleSummaryTO))
                    {
                        newScheduleTO = (TblPurchaseScheduleSummaryTO)resultMessage.Tag;
                        if (newScheduleTO.StatusId == (Int32)Constants.TranStatusE.New)
                        {
                            newScheduleTO.RootScheduleId = existingScheduleTO.IdPurchaseScheduleSummary;
                        }
                        //Deepali [29-04-2021] As per discussion with Prajkta.
                        //newScheduleTO.EnqQty = existingScheduleTO.Qty;
                        existingScheduleTO.EnqQty = newScheduleTO.Qty;
                        newScheduleTO.EnqQty = newScheduleTO.Qty;

                        scheduleInsertList.Add(newScheduleTO);
                    }

                    // }


                    scheduleUpdateList.Add(existingScheduleTO);

                }


                if (isProcess)
                {
                    resultMessage = UpdatePurchaseInvoiceGradeDtls(scheduleUpdateList, scheduleInsertList, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error In UpdatePurchaseInvoiceGradeDtls(scheduleUpdateList,scheduleInsertList,conn,tran);");
                    }



                    //Update isActive record qty and enqQty
                    //if(!Startup.IsForBRM)
                    //{

                    //    List<TblPurchaseScheduleSummaryTO> scheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.SelectAllEnquiryScheduleSummaryTOByRootID(scheduleUpdateList[0].ActualRootScheduleId, true);
                    //    if(scheduleSummaryTOList != null && scheduleSummaryTOList.Count == 1)
                    //    {
                    //        scheduleSummaryTOList[0].Qty = scheduleUpdateList[0].Qty;
                    //        scheduleSummaryTOList[0].EnqQty = scheduleUpdateList[0].EnqQty;

                    //        Int32 result = _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummary(scheduleSummaryTOList[0], conn, tran);
                    //        if(result == -1)
                    //        {
                    //            throw new Exception("Error in UpdateTblPurchaseScheduleSummary");
                    //        }
                    //    }

                    //}

                }


                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = scheduleInsertList;
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SaveScheduleDtlsAsPerCorNC(TblPurchaseScheduleSummaryTO scheduleTO, SqlConnection conn,SqlTransaction tran)");
                return resultMessage;

            }

        }

        public List<TblPurchaseVehicleDetailsTO> SortList(List<TblPurchaseVehicleDetailsTO> purchaseSchItemList)
        {
            List<TblPurchaseVehicleDetailsTO> returnList = new List<TblPurchaseVehicleDetailsTO>();

            if (purchaseSchItemList != null && purchaseSchItemList.Count > 0)
            {
                List<TblPurchaseVehicleDetailsTO> tempList = new List<TblPurchaseVehicleDetailsTO>();

                List<TblPurchaseVehicleDetailsTO> tempList1 = new List<TblPurchaseVehicleDetailsTO>();

                tempList = purchaseSchItemList.Where(a => a.ItemSeqNo == 0).ToList();

                tempList1 = purchaseSchItemList.Where(a => a.ItemSeqNo != 0).ToList();

                tempList1 = tempList1.OrderBy(a => a.ItemSeqNo).ToList();

                if (tempList != null && tempList.Count > 0)
                {
                    for (int i = 0; i < tempList.Count; i++)
                    {
                        tempList1.Add(tempList[i]);
                    }
                }



                if (tempList1 != null && tempList1.Count > 0)
                {
                    returnList = tempList1;
                }
                else
                {
                    returnList = purchaseSchItemList;
                }
            }
            return returnList;


        }

        public void GetBaseItemCostAsPerCOrNC(List<TblBaseItemMetalCostTO> tblBaseItemMetalCostTOList, TblBaseItemMetalCostTO tblBaseItemMetalCostTO)
        {
            if (tblBaseItemMetalCostTOList != null && tblBaseItemMetalCostTOList.Count > 0)
            {
                List<TblBaseItemMetalCostTO> resForC = tblBaseItemMetalCostTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).ToList();
                if (resForC != null)
                {
                    tblBaseItemMetalCostTO.BaseMetalCostForC = resForC[0].BaseMetalCostForC;
                    tblBaseItemMetalCostTO.GlobalRatePurchaseId = resForC[0].GlobalRatePurchaseId;
                    tblBaseItemMetalCostTO.BaseRecovery = resForC[0].BaseRecovery;
                    tblBaseItemMetalCostTO.BaseRate = resForC[0].BaseRate;
                    tblBaseItemMetalCostTO.COrNcId = resForC[0].COrNcId;
                }

                List<TblBaseItemMetalCostTO> resForNC = tblBaseItemMetalCostTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
                if (resForNC != null)
                {
                    tblBaseItemMetalCostTO.BaseMetalCostForNC = resForNC[0].BaseMetalCostForNC;
                    tblBaseItemMetalCostTO.GlobalRatePurchaseId = resForNC[0].GlobalRatePurchaseId;
                    tblBaseItemMetalCostTO.BaseRecovery = resForNC[0].BaseRecovery;
                    tblBaseItemMetalCostTO.BaseRate = resForNC[0].BaseRate;
                    tblBaseItemMetalCostTO.COrNcId = resForNC[0].COrNcId;
                }

            }
        }

        public ResultMessage UpdatePurchaseInvoiceGradeDtls(List<TblPurchaseScheduleSummaryTO> scheduleUpdateList, List<TblPurchaseScheduleSummaryTO> scheduleInsertList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                resultMessage = UpdateScheduleDtls(scheduleUpdateList, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error In UpdateScheduleDtls(scheduleUpdateList, conn, tran);");
                }

                resultMessage = InsertScheduleDtls(scheduleInsertList, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error In InsertScheduleDtls(scheduleInsertList, conn, tran);");
                }

                if (!Startup.IsForBRM)
                {
                    if (scheduleUpdateList != null && scheduleUpdateList.Count > 0)
                    {
                        Int32 result = _iTblPurchaseScheduleSummaryDAO.UpdateScheduleEnqQtyOnly(scheduleUpdateList[0], conn, tran);
                        if (result == -1)
                        {
                            throw new Exception("Error in UpdateScheduleEnqQtyOnly");
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdatePurchaseInvoiceGradeDtls(List<TblPurchaseScheduleSummaryTO> scheduleUpdateList,List<TblPurchaseScheduleSummaryTO> scheduleInsertList, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }


        public ResultMessage CalculateGradeExpressionDtls(TblPurchaseScheduleSummaryTO scheduleTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                resultMessage = CalculateItemDetails(scheduleTO.PurchaseScheduleSummaryDetailsTOList, scheduleTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error while calculation of item details");
                }
                double baseMetalCost = CalculateItemsMetalCost(scheduleTO.PurchaseScheduleSummaryDetailsTOList, scheduleTO);

                List<TblBaseItemMetalCostTO> unldDateBaseMetalCostList = GetBaseMetalCostListTo(scheduleTO.ActualRootScheduleId);
                if (unldDateBaseMetalCostList != null && unldDateBaseMetalCostList.Count > 0)
                {
                    List<TblPurchaseScheduleSummaryTO> tempScheduleList = new List<TblPurchaseScheduleSummaryTO>();
                    tempScheduleList.Add(scheduleTO);
                    GetUnloadingDatePadtaDtls(unldDateBaseMetalCostList[0], tempScheduleList);
                    scheduleTO = tempScheduleList[0];
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Erorr in ");
                return resultMessage;
            }
        }
        //Old code used for one sauda linking only
        //public void CalculateRateAsPerCorNCForSaudaConversion(TblPurchaseScheduleSummaryTO scheduleTO, TblPurchaseEnquiryTO enquiryTO)
        //{
        //    List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList = scheduleTO.PurchaseScheduleSummaryDetailsTOList;
        //    if (scheduleItemDtlsList != null && scheduleItemDtlsList.Count > 0)
        //    {
        //        for (int i = 0; i < scheduleItemDtlsList.Count; i++)
        //        {
        //            if (enquiryTO.PurchaseEnquiryDetailsTOList != null && enquiryTO.PurchaseEnquiryDetailsTOList.Count > 0)
        //            {
        //                TblPurchaseEnquiryDetailsTO tempTO = enquiryTO.PurchaseEnquiryDetailsTOList.Where(a => a.ProdItemId == scheduleItemDtlsList[i].ProdItemId).FirstOrDefault();
        //                if (tempTO != null)
        //                {
        //                    scheduleItemDtlsList[i].ItemBookingRate = tempTO.ItemBookingRate;
        //                }
        //            }

        //            if (scheduleItemDtlsList[i].ItemBookingRate <= 0)
        //            {
        //                scheduleItemDtlsList[i].ItemBookingRate = enquiryTO.BookingRate;
        //            }

        //            List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(scheduleItemDtlsList[i].ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId);
        //            if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
        //            {
        //                if (scheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
        //                {
        //                    scheduleItemDtlsList[i].Rate = scheduleItemDtlsList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt;
        //                }
        //                else
        //                {
        //                    scheduleItemDtlsList[i].Rate = scheduleItemDtlsList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
        //                }

        //            }

        //            if (scheduleItemDtlsList[i].IsNonCommercialItem == 1)
        //            {
        //                scheduleItemDtlsList[i].Rate = 0;
        //            }

        //        }
        //    }
        //}

        public void CalculateRateAsPerCorNCForSaudaConversion(TblPurchaseScheduleSummaryTO scheduleTO, List<TblPurchaseEnquiryTO> enquiryTOList)
        {
            List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList = scheduleTO.PurchaseScheduleSummaryDetailsTOList;
            if (scheduleItemDtlsList != null && scheduleItemDtlsList.Count > 0)
            {
                for (int i = 0; i < scheduleItemDtlsList.Count; i++)
                {
                    Boolean isItemPresent = false;
                    for (int k = 0; k < enquiryTOList.Count; k++)
                    {
                        TblPurchaseEnquiryTO enquiryTO = enquiryTOList[k];
                        if (enquiryTO.PurchaseEnquiryDetailsTOList != null && enquiryTO.PurchaseEnquiryDetailsTOList.Count > 0)
                        {
                            TblPurchaseEnquiryDetailsTO tempTO = enquiryTO.PurchaseEnquiryDetailsTOList.Where(a => a.ProdItemId == scheduleItemDtlsList[i].ProdItemId).FirstOrDefault();
                            if (tempTO != null)
                            {
                                scheduleItemDtlsList[i].ItemBookingRate = tempTO.ItemBookingRate;
                                isItemPresent = true;
                                break;
                            }
                        }
                    }

                    if (!isItemPresent)
                    {
                        scheduleItemDtlsList[i].ItemBookingRate = enquiryTOList[0].BookingRate;
                    }

                    List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(scheduleItemDtlsList[i].ProdItemId.ToString(), enquiryTOList[0].SaudaCreatedOn, enquiryTOList[0].StateId);
                    if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
                    {
                        if (scheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        {
                            scheduleItemDtlsList[i].Rate = scheduleItemDtlsList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt;
                        }
                        else
                        {
                            scheduleItemDtlsList[i].Rate = scheduleItemDtlsList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
                        }

                    }

                    if (scheduleItemDtlsList[i].IsNonCommercialItem == 1)
                    {
                        scheduleItemDtlsList[i].Rate = 0;
                    }

                }
            }
        }

        //public void CalculateProductAmount(TblPurchaseScheduleSummaryTO scheduleTO)
        //{
        //    List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList = scheduleTO.PurchaseScheduleSummaryDetailsTOList;
        //    if (scheduleItemDtlsList != null && scheduleItemDtlsList.Count > 0)
        //    {
        //        for (int i = 0; i < scheduleItemDtlsList.Count; i++)
        //        {
        //              scheduleItemDtlsList[i].ProductAomunt = scheduleItemDtlsList[i].Rate * scheduleItemDtlsList[i].Qty;
        //            if (scheduleItemDtlsList[i].IsNonCommercialItem == 1)
        //            {
        //                scheduleItemDtlsList[i].ProductAomunt = 0;
        //            }
        //        }
        //    }
        //}

        public void CalculateRateAsPerCorNCForEnquiry(TblPurchaseEnquiryTO enquiryTO)
        {
            List<TblPurchaseEnquiryDetailsTO> purchaseEnquiryDetailsTOList = enquiryTO.PurchaseEnquiryDetailsTOList;
            if (purchaseEnquiryDetailsTOList != null && purchaseEnquiryDetailsTOList.Count > 0)
            {
                for (int i = 0; i < purchaseEnquiryDetailsTOList.Count; i++)
                {
                    List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(purchaseEnquiryDetailsTOList[i].ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId);
                    if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
                    {
                        if (enquiryTO.COrNCId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        {
                            purchaseEnquiryDetailsTOList[i].Rate = purchaseEnquiryDetailsTOList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt;
                        }
                        else
                        {
                            purchaseEnquiryDetailsTOList[i].Rate = purchaseEnquiryDetailsTOList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
                        }

                    }

                }
            }
        }

        public void CalculateRateAsPerCorNC(TblPurchaseScheduleSummaryTO scheduleTO, TblPurchaseEnquiryTO enquiryTO)
        {
            List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList = scheduleTO.PurchaseScheduleSummaryDetailsTOList;
            if (scheduleItemDtlsList != null && scheduleItemDtlsList.Count > 0)
            {
                for (int i = 0; i < scheduleItemDtlsList.Count; i++)
                {
                    //List<TblProductItemTO> tblProductItemTOList = _iTblProductItemBL.SelectAllTblProductItemListByProdItemId(scheduleItemDtlsList[i].ProdItemId, scheduleTO.StateId);
                    List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(scheduleItemDtlsList[i].ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId);
                    if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
                    {
                        if (scheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        {
                            //scheduleItemDtlsList[i].Rate = enquiryTO.BookingRate + tblProductItemTOList[0].ParityAmt;
                            scheduleItemDtlsList[i].Rate = scheduleItemDtlsList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt;
                        }
                        else
                        {
                            //scheduleItemDtlsList[i].Rate = enquiryTO.BookingRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
                            scheduleItemDtlsList[i].Rate = scheduleItemDtlsList[i].ItemBookingRate + tblProductItemTOList[0].ParityAmt + tblProductItemTOList[0].NonConfParityAmt;
                        }

                        if (scheduleItemDtlsList[i].IsNonCommercialItem == 1)
                        {
                            scheduleItemDtlsList[i].Rate = 0;
                        }

                    }

                }
            }
        }
        public void CalculateProductAmount(TblPurchaseScheduleSummaryTO scheduleTO)
        {
            List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList = scheduleTO.PurchaseScheduleSummaryDetailsTOList;
            if (scheduleItemDtlsList != null && scheduleItemDtlsList.Count > 0)
            {
                for (int i = 0; i < scheduleItemDtlsList.Count; i++)
                {
                    scheduleItemDtlsList[i].ProductAomunt = scheduleItemDtlsList[i].Rate * scheduleItemDtlsList[i].Qty;
                    if (scheduleItemDtlsList[i].IsNonCommercialItem == 1)
                    {
                        scheduleItemDtlsList[i].ProductAomunt = 0;
                    }
                }
            }
        }
        //public ResultMessage AdjustPurchaseInvoiceQty(TblPurchaseScheduleSummaryTO scheduleTO, double totalInvoiceQty, TblPurchaseEnquiryTO enquiryTO, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, SqlConnection conn, SqlTransaction tran)
        //{
        //    List<TblPurchaseVehicleDetailsTO> newPurchaseVehDtlsTOList = new List<TblPurchaseVehicleDetailsTO>();
        //    TblPurchaseScheduleSummaryTO newScheduleTO = null;
        //    ResultMessage resultMessage = new ResultMessage();
        //    try
        //    {

        //        if (scheduleTO.PurchaseScheduleSummaryDetailsTOList != null && scheduleTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
        //        {
        //            if (totalInvoiceQty == 0)
        //            {
        //                if (scheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
        //                {
        //                    scheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
        //                    scheduleTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;
        //                    scheduleTO.BaseMetalCost = 0;
        //                    scheduleTO.CalculatedMetalCost = 0;
        //                    scheduleTO.Padta = 0;
        //                    CalculateRateAsPerCorNC(scheduleTO, enquiryTO);
        //                    CalculateProductAmount(scheduleTO);
        //                    CalculateGradeExpressionDtls(scheduleTO, conn, tran);
        //                    newScheduleTO = null;
        //                }
        //            }
        //            else if (totalInvoiceQty < scheduleTO.Qty)
        //            {
        //                newScheduleTO = new TblPurchaseScheduleSummaryTO();
        //                newScheduleTO = scheduleTO.DeepCopy();
        //                newScheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
        //                newScheduleTO.IsActive = 0;
        //                newScheduleTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;

        //                for (int i = 0; i < scheduleTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
        //                {
        //                    TblPurchaseVehicleDetailsTO purchaseItemDtlsTO = scheduleTO.PurchaseScheduleSummaryDetailsTOList[i];

        //                    if (totalInvoiceQty > 0)
        //                    {
        //                        totalInvoiceQty = totalInvoiceQty - purchaseItemDtlsTO.Qty;

        //                        if (totalInvoiceQty < 0)
        //                        {
        //                            TblPurchaseVehicleDetailsTO newPurchaseItemDtlsTO = new TblPurchaseVehicleDetailsTO();
        //                            purchaseItemDtlsTO.Qty = purchaseItemDtlsTO.Qty + totalInvoiceQty;
        //                            purchaseItemDtlsTO.Qty = Math.Round(purchaseItemDtlsTO.Qty, 3);
        //                            newPurchaseItemDtlsTO = purchaseItemDtlsTO.DeepCopy();
        //                            newPurchaseItemDtlsTO.Qty = 0;
        //                            newPurchaseItemDtlsTO.CorNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
        //                            newPurchaseItemDtlsTO.Qty = newPurchaseItemDtlsTO.Qty - totalInvoiceQty;
        //                            newPurchaseItemDtlsTO.Qty = Math.Round(newPurchaseItemDtlsTO.Qty, 3);
        //                            newPurchaseVehDtlsTOList.Add(newPurchaseItemDtlsTO);
        //                            totalInvoiceQty = 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        TblPurchaseVehicleDetailsTO newPurchaseItemDtlsTO = new TblPurchaseVehicleDetailsTO();
        //                        newPurchaseItemDtlsTO = purchaseItemDtlsTO.DeepCopy();
        //                        newPurchaseItemDtlsTO.CorNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
        //                        newPurchaseVehDtlsTOList.Add(newPurchaseItemDtlsTO);
        //                        purchaseItemDtlsTO.IsRemoveItem = 1;
        //                    }

        //                }
        //                newScheduleTO.PurchaseScheduleSummaryDetailsTOList = newPurchaseVehDtlsTOList;
        //                newScheduleTO.Qty = newScheduleTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);
        //                newScheduleTO.OrgScheduleQty = newScheduleTO.Qty;
        //                CalculateRateAsPerCorNC(newScheduleTO, enquiryTO);
        //                CalculateProductAmount(newScheduleTO);
        //                CalculateGradeExpressionDtls(newScheduleTO, conn, tran);


        //                scheduleTO.PurchaseScheduleSummaryDetailsTOList = scheduleTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.IsRemoveItem == 0).ToList();
        //                scheduleTO.Qty = scheduleTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);
        //                scheduleTO.OrgScheduleQty = scheduleTO.Qty;
        //                CalculateRateAsPerCorNC(scheduleTO, enquiryTO);
        //                CalculateProductAmount(scheduleTO);
        //                CalculateGradeExpressionDtls(scheduleTO, conn, tran);

        //            }

        //        }

        //        resultMessage.DefaultSuccessBehaviour();
        //        resultMessage.Tag = newScheduleTO;
        //        return resultMessage;
        //    }
        //    catch (System.Exception ex)
        //    {

        //        resultMessage.DefaultExceptionBehaviour(ex, "Error in AdjustPurchaseInvoiceQty(TblPurchaseScheduleSummaryTO scheduleTO, double totalInvoiceQty, TblPurchaseEnquiryTO enquiryTO, SqlConnection conn, SqlTransaction tran)");
        //        return resultMessage;
        //    }
        //}

        public ResultMessage AdjustPurchaseInvoiceQty(TblPurchaseScheduleSummaryTO scheduleTO, double totalInvoiceQty, TblPurchaseEnquiryTO enquiryTO, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, Boolean isForBrm, SqlConnection conn, SqlTransaction tran)
        {
            //Prajakta[2021-04-05] Commented and addded to spli enquiry vehicle
            //List<TblPurchaseVehicleDetailsTO> newPurchaseVehDtlsTOList = new List<TblPurchaseVehicleDetailsTO>();
            //TblPurchaseScheduleSummaryTO newScheduleTO = null;
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                resultMessage = SpliQtyForOrder(scheduleTO, totalInvoiceQty, enquiryTO, tblBaseItemMetalCostTO, isForBrm, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in SpliQtyForOrder()");
                }

                resultMessage.DefaultSuccessBehaviour();
                //resultMessage.Tag = newScheduleTO;
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in AdjustPurchaseInvoiceQty(TblPurchaseScheduleSummaryTO scheduleTO, double totalInvoiceQty, TblPurchaseEnquiryTO enquiryTO, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage SpliQtyForOrder(TblPurchaseScheduleSummaryTO scheduleTO, double totalInvoiceQty, TblPurchaseEnquiryTO enquiryTO, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, Boolean isForBrm, SqlConnection conn, SqlTransaction tran)
        {
            List<TblPurchaseVehicleDetailsTO> newPurchaseVehDtlsTOList = new List<TblPurchaseVehicleDetailsTO>();
            TblPurchaseScheduleSummaryTO newScheduleTO = null;
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                if (scheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                {
                    scheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                }

                if (!isForBrm)
                {
                    if (totalInvoiceQty >= scheduleTO.Qty)
                    {
                        scheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                        scheduleTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;
                        scheduleTO.BaseMetalCost = 0;
                        scheduleTO.CalculatedMetalCost = 0;
                        scheduleTO.Padta = 0;
                        CalculateRateAsPerCorNC(scheduleTO, enquiryTO);
                        CalculateProductAmount(scheduleTO);
                        CalculateGradeExpressionDtls(scheduleTO, conn, tran);
                        newScheduleTO = null;
                    }
                }

                if (totalInvoiceQty == 0)
                {
                    if (scheduleTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                    {
                        scheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                        scheduleTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;
                        scheduleTO.BaseMetalCost = 0;
                        scheduleTO.CalculatedMetalCost = 0;
                        scheduleTO.Padta = 0;
                        CalculateRateAsPerCorNC(scheduleTO, enquiryTO);
                        CalculateProductAmount(scheduleTO);
                        CalculateGradeExpressionDtls(scheduleTO, conn, tran);
                        newScheduleTO = null;
                    }

                }
                else if (totalInvoiceQty < scheduleTO.Qty)
                {
                    newScheduleTO = new TblPurchaseScheduleSummaryTO();
                    newScheduleTO = scheduleTO.DeepCopy();
                    newScheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                    newScheduleTO.IsActive = 0;
                    newScheduleTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;

                    for (int i = 0; i < scheduleTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                    {
                        TblPurchaseVehicleDetailsTO purchaseItemDtlsTO = scheduleTO.PurchaseScheduleSummaryDetailsTOList[i];

                        if (totalInvoiceQty > 0)
                        {
                            totalInvoiceQty = totalInvoiceQty - purchaseItemDtlsTO.Qty;

                            if (totalInvoiceQty < 0)
                            {
                                TblPurchaseVehicleDetailsTO newPurchaseItemDtlsTO = new TblPurchaseVehicleDetailsTO();
                                purchaseItemDtlsTO.Qty = purchaseItemDtlsTO.Qty + totalInvoiceQty;
                                purchaseItemDtlsTO.Qty = Math.Round(purchaseItemDtlsTO.Qty, 3);
                                newPurchaseItemDtlsTO = purchaseItemDtlsTO.DeepCopy();
                                newPurchaseItemDtlsTO.Qty = 0;
                                newPurchaseItemDtlsTO.CorNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                                newPurchaseItemDtlsTO.Qty = newPurchaseItemDtlsTO.Qty - totalInvoiceQty;
                                newPurchaseItemDtlsTO.Qty = Math.Round(newPurchaseItemDtlsTO.Qty, 3);
                                newPurchaseVehDtlsTOList.Add(newPurchaseItemDtlsTO);
                                totalInvoiceQty = 0;
                            }
                        }
                        else
                        {
                            TblPurchaseVehicleDetailsTO newPurchaseItemDtlsTO = new TblPurchaseVehicleDetailsTO();
                            newPurchaseItemDtlsTO = purchaseItemDtlsTO.DeepCopy();
                            newPurchaseItemDtlsTO.CorNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                            newPurchaseVehDtlsTOList.Add(newPurchaseItemDtlsTO);
                            purchaseItemDtlsTO.IsRemoveItem = 1;
                        }

                    }
                    newScheduleTO.PurchaseScheduleSummaryDetailsTOList = newPurchaseVehDtlsTOList;
                    newScheduleTO.Qty = newScheduleTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);
                    newScheduleTO.OrgScheduleQty = newScheduleTO.Qty;
                    CalculateRateAsPerCorNC(newScheduleTO, enquiryTO);
                    CalculateProductAmount(newScheduleTO);
                    CalculateGradeExpressionDtls(newScheduleTO, conn, tran);


                    scheduleTO.PurchaseScheduleSummaryDetailsTOList = scheduleTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.IsRemoveItem == 0).ToList();
                    scheduleTO.Qty = scheduleTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);
                    scheduleTO.OrgScheduleQty = scheduleTO.Qty;
                    CalculateRateAsPerCorNC(scheduleTO, enquiryTO);
                    CalculateProductAmount(scheduleTO);
                    CalculateGradeExpressionDtls(scheduleTO, conn, tran);

                }


                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = newScheduleTO;
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SpliQtyForOrder()");
                return resultMessage;


            }
        }

        public ResultMessage SpliQtyForEnquiry(TblPurchaseScheduleSummaryTO scheduleTO, double totalInvoiceQty, TblPurchaseEnquiryTO enquiryTO, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, SqlConnection conn, SqlTransaction tran)
        {
            List<TblPurchaseVehicleDetailsTO> newPurchaseVehDtlsTOList = new List<TblPurchaseVehicleDetailsTO>();
            TblPurchaseScheduleSummaryTO newScheduleTO = null;
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                if (totalInvoiceQty == 0)
                {
                    scheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                    scheduleTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;
                    scheduleTO.BaseMetalCost = 0;
                    scheduleTO.CalculatedMetalCost = 0;
                    scheduleTO.Padta = 0;
                    CalculateRateAsPerCorNC(scheduleTO, enquiryTO);
                    CalculateProductAmount(scheduleTO);
                    CalculateGradeExpressionDtls(scheduleTO, conn, tran);
                    newScheduleTO = null;

                }
                else if (totalInvoiceQty < scheduleTO.Qty)
                {
                    newScheduleTO = new TblPurchaseScheduleSummaryTO();
                    newScheduleTO = scheduleTO.DeepCopy();
                    newScheduleTO.COrNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                    newScheduleTO.IsActive = 0;
                    newScheduleTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;

                    for (int i = 0; i < scheduleTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                    {
                        TblPurchaseVehicleDetailsTO purchaseItemDtlsTO = scheduleTO.PurchaseScheduleSummaryDetailsTOList[i];

                        if (totalInvoiceQty > 0)
                        {
                            totalInvoiceQty = totalInvoiceQty - purchaseItemDtlsTO.Qty;

                            if (totalInvoiceQty < 0)
                            {
                                TblPurchaseVehicleDetailsTO newPurchaseItemDtlsTO = new TblPurchaseVehicleDetailsTO();
                                purchaseItemDtlsTO.Qty = purchaseItemDtlsTO.Qty + totalInvoiceQty;
                                purchaseItemDtlsTO.Qty = Math.Round(purchaseItemDtlsTO.Qty, 3);
                                newPurchaseItemDtlsTO = purchaseItemDtlsTO.DeepCopy();
                                newPurchaseItemDtlsTO.Qty = 0;
                                newPurchaseItemDtlsTO.CorNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                                newPurchaseItemDtlsTO.Qty = newPurchaseItemDtlsTO.Qty - totalInvoiceQty;
                                newPurchaseItemDtlsTO.Qty = Math.Round(newPurchaseItemDtlsTO.Qty, 3);
                                newPurchaseVehDtlsTOList.Add(newPurchaseItemDtlsTO);
                                totalInvoiceQty = 0;
                            }
                        }
                        else
                        {
                            TblPurchaseVehicleDetailsTO newPurchaseItemDtlsTO = new TblPurchaseVehicleDetailsTO();
                            newPurchaseItemDtlsTO = purchaseItemDtlsTO.DeepCopy();
                            newPurchaseItemDtlsTO.CorNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                            newPurchaseVehDtlsTOList.Add(newPurchaseItemDtlsTO);
                            purchaseItemDtlsTO.IsRemoveItem = 1;
                        }

                    }
                    newScheduleTO.PurchaseScheduleSummaryDetailsTOList = newPurchaseVehDtlsTOList;
                    newScheduleTO.Qty = newScheduleTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);
                    newScheduleTO.OrgScheduleQty = newScheduleTO.Qty;
                    CalculateRateAsPerCorNC(newScheduleTO, enquiryTO);
                    CalculateProductAmount(newScheduleTO);
                    CalculateGradeExpressionDtls(newScheduleTO, conn, tran);


                    scheduleTO.PurchaseScheduleSummaryDetailsTOList = scheduleTO.PurchaseScheduleSummaryDetailsTOList.Where(a => a.IsRemoveItem == 0).ToList();
                    scheduleTO.Qty = scheduleTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);
                    scheduleTO.OrgScheduleQty = scheduleTO.Qty;
                    CalculateRateAsPerCorNC(scheduleTO, enquiryTO);
                    CalculateProductAmount(scheduleTO);
                    CalculateGradeExpressionDtls(scheduleTO, conn, tran);

                }


                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = newScheduleTO;
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SpliQtyForOrder()");
                return resultMessage;


            }
        }

        public double GetPurchaseInvoiceQty(List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDtlsList)
        {
            double totalPurchaseInvoiceQty = 0;

            if (purchaseInvoiceItemDtlsList != null && purchaseInvoiceItemDtlsList.Count > 0)
            {
                for (int i = 0; i < purchaseInvoiceItemDtlsList.Count; i++)
                {
                    totalPurchaseInvoiceQty += purchaseInvoiceItemDtlsList[i].InvoiceQty;
                    totalPurchaseInvoiceQty = Math.Round(totalPurchaseInvoiceQty, 3);
                }
            }
            return totalPurchaseInvoiceQty;
        }

        public ResultMessage UpdateScheduleDtls(List<TblPurchaseScheduleSummaryTO> scheduleUpdateList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {
                if (scheduleUpdateList != null && scheduleUpdateList.Count > 0)
                {
                    for (int i = 0; i < scheduleUpdateList.Count; i++)
                    {
                        if (i == 9)
                        {

                        }
                        TblPurchaseScheduleSummaryTO tempScheduleTO = scheduleUpdateList[i];
                        result = DeleteAndInsertOldRecords(tempScheduleTO, true, conn, tran);
                        if (result <= 0)
                        {
                            throw new Exception("Error in DeleteAndInsertOldRecords(tempScheduleTO,conn,tran); ");
                        }

                        //result = TblPurchaseScheduleSummaryBL.UpdateTblPurchaseScheduleSummary(tempScheduleTO, conn, tran);
                        // if (result <= 0)
                        // {
                        //     throw new Exception("Error while updating schedule ");
                        // }
                        // else
                        // {
                        //     if (tempScheduleTO.PurchaseScheduleSummaryDetailsTOList != null && tempScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                        //     {
                        //         for (int k = 0; k < tempScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count; k++)
                        //         {
                        //             TblPurchaseVehicleDetailsTO tempScheduleDtlsTO = tempScheduleTO.PurchaseScheduleSummaryDetailsTOList[k];
                        //             result = _iTblPurchaseVehicleDetailsBL.UpdateTblPurchaseScheduleDetails(tempScheduleDtlsTO, conn, tran);
                        //             if (result <= 0)
                        //             {
                        //                 throw new Exception("Error while updating schedule item details");
                        //             }
                        //             else
                        //             {
                        //                 if (tempScheduleDtlsTO.GradeExpressionDtlsTOList != null && tempScheduleDtlsTO.GradeExpressionDtlsTOList.Count > 0)
                        //                 {
                        //                     for (int p = 0; p < tempScheduleDtlsTO.GradeExpressionDtlsTOList.Count; p++)
                        //                     {
                        //                         result = TblGradeExpressionDtlsBL.UpdateTblGradeExpressionDtls(tempScheduleDtlsTO.GradeExpressionDtlsTOList[p], conn, tran);
                        //                         if (result <= 0)
                        //                         {
                        //                             throw new Exception("Error while updating schedule item grade calculation details");
                        //                         }
                        //                     }
                        //                 }
                        //             }
                        //         }
                        //     }
                        // }
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in  UpdateScheduleDtls(List<TblPurchaseScheduleSummaryTO> scheduleUpdateList ,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage InsertScheduleDtls(List<TblPurchaseScheduleSummaryTO> scheduleUpdateList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {
                //Prajakta[202-05-20] added for IOT
                int confiqId = _iTblConfigParamsDAO.IoTSetting();


                if (scheduleUpdateList != null && scheduleUpdateList.Count > 0)
                {
                    for (int i = 0; i < scheduleUpdateList.Count; i++)
                    {
                        TblPurchaseScheduleSummaryTO tempScheduleTO = scheduleUpdateList[i];

                        Int32 tempStatusId = tempScheduleTO.StatusId;
                        if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                        {
                            tempScheduleTO.StatusId = (Int32)Constants.TranStatusE.New;
                            tempScheduleTO.VehicleNo = String.Empty;
                        }

                        result = InsertTblPurchaseScheduleSummary(tempScheduleTO, conn, tran);
                        if (result <= 0)
                        {
                            throw new Exception("Error in InsertTblPurchaseScheduleSummary(tempScheduleTO, conn, tran);");
                        }
                        else
                        {
                            if (tempScheduleTO.PurchaseScheduleSummaryDetailsTOList != null && tempScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                            {
                                for (int k = 0; k < tempScheduleTO.PurchaseScheduleSummaryDetailsTOList.Count; k++)
                                {
                                    TblPurchaseVehicleDetailsTO tempScheduleDtlsTO = tempScheduleTO.PurchaseScheduleSummaryDetailsTOList[k];
                                    tempScheduleDtlsTO.SchedulePurchaseId = tempScheduleTO.IdPurchaseScheduleSummary;

                                    //Prajakta[2019-04-09] Added as per disscussion with saket..as for both type vehicles after item details
                                    //get bifurgated into C or NC
                                    tempScheduleDtlsTO.TransferedFrmScheduleId = 0;
                                    result = _iTblPurchaseVehicleDetailsBL.InsertTblPurchaseVehicleDetails(tempScheduleDtlsTO, conn, tran);
                                    if (result <= 0)
                                    {
                                        throw new Exception("Error in InsertTblPurchaseVehicleDetails(tempScheduleDtlsTO, conn, tran);");
                                    }
                                    else
                                    {
                                        if (tempScheduleDtlsTO.GradeExpressionDtlsTOList != null && tempScheduleDtlsTO.GradeExpressionDtlsTOList.Count > 0)
                                        {
                                            tempScheduleDtlsTO.GradeExpressionDtlsTOList = tempScheduleDtlsTO.GradeExpressionDtlsTOList.Where(w => w.ExpressionDtlsId > 0).ToList();

                                            for (int p = 0; p < tempScheduleDtlsTO.GradeExpressionDtlsTOList.Count; p++)
                                            {
                                                tempScheduleDtlsTO.GradeExpressionDtlsTOList[p].PurchaseScheduleDtlsId = tempScheduleDtlsTO.IdVehiclePurchase;
                                                result = _iTblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tempScheduleDtlsTO.GradeExpressionDtlsTOList[p], conn, tran);
                                                if (result <= 0)
                                                {
                                                    throw new Exception("Error in InsertTblGradeExpressionDtls(tempScheduleDtlsTO.GradeExpressionDtlsTOList[p], conn, tran);");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        tempScheduleTO.StatusId = tempStatusId;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in  UpdateScheduleDtls(List<TblPurchaseScheduleSummaryTO> scheduleUpdateList ,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }


        public ResultMessage GetCombinedvehicleItemDtlsForCAndNC(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            DateTime serverDateTime = _iCommonDAO.ServerDateTime;
            List<TblPurchaseScheduleSummaryTO> scheduleTOList = new List<TblPurchaseScheduleSummaryTO>();
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                resultMessage = SaveScheduleDtlsAsPerCorNC(tblPurchaseScheduleSummaryTO, false, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in SaveScheduleDtlsAsPerCorNC(tblPurchaseScheduleSummaryTO,false,conn,tran);");
                }

                List<TblPurchaseScheduleSummaryTO> scheduleInsertList = null;
                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseScheduleSummaryTO>))
                {
                    scheduleInsertList = new List<TblPurchaseScheduleSummaryTO>();
                    scheduleInsertList = (List<TblPurchaseScheduleSummaryTO>)resultMessage.Tag;
                    scheduleTOList.AddRange(scheduleInsertList);
                }


                scheduleTOList.Add(tblPurchaseScheduleSummaryTO);

                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = scheduleTOList;
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, " GetCombinedvehicleItemDtlsForCAndNC(TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        //Prajakta[2020-09-19] Commented as get data for vehicle tracking from sql query
        /// <returns></returns>
        public List<VehicleStatusDateTO> GetAllVehicleStatusDateTOList(DateTime fromDate, DateTime toDate, string pmUserId, Int32 vehicleFilterId)
        {
            List<VehicleStatusDateTO> vehicleStatusDateTOList = new List<VehicleStatusDateTO>();
            Int32 isForBrm = 0;
            TblConfigParamsTO tblConfigParamsTOIsBrm = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
            if (tblConfigParamsTOIsBrm != null)
            {
                isForBrm = Convert.ToInt32(tblConfigParamsTOIsBrm.ConfigParamVal);
            }


            TblPurSchSummaryFilterTO tblPurSchSummaryFilterTempTO = new TblPurSchSummaryFilterTO();


            if (!String.IsNullOrEmpty(pmUserId))
                tblPurSchSummaryFilterTempTO.UserId = pmUserId;

            //tblPurSchSummaryFilterTempTO.UserId = pmUserId.ToString();
            tblPurSchSummaryFilterTempTO.FromDate = fromDate;
            tblPurSchSummaryFilterTempTO.ToDate = toDate;
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsList(tblPurSchSummaryFilterTempTO);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {

                if ((Int32)Constants.VehicleFilterE.COMPLETED == vehicleFilterId)
                {
                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(w => w.IsCorrectionCompleted == 1).ToList();
                }
                else if ((Int32)Constants.VehicleFilterE.PENDING == vehicleFilterId)
                {
                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(w => w.IsCorrectionCompleted == 0).ToList();
                }


                for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];

                    List<TblPurchaseScheduleSummaryTO> allSchedulTOList = SelectAllEnquiryScheduleSummaryTOByRootId(tblPurchaseScheduleSummaryTO.ActualRootScheduleId);

                    if (allSchedulTOList != null && allSchedulTOList.Count > 0)
                    {

                        VehicleStatusDateTO vehicleStatusDateTO = new VehicleStatusDateTO();
                        vehicleStatusDateTO.VehicleNo = tblPurchaseScheduleSummaryTO.VehicleNo;
                        vehicleStatusDateTO.PartyName = tblPurchaseScheduleSummaryTO.SupplierName;
                        vehicleStatusDateTO.RootScheduleId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                        vehicleStatusDateTO.SupervisorName = tblPurchaseScheduleSummaryTO.SupervisorName;
                        vehicleStatusDateTO.ManagerName = tblPurchaseScheduleSummaryTO.PurchaseManager;
                        vehicleStatusDateTO.EngineerName = tblPurchaseScheduleSummaryTO.EngineerName;
                        vehicleStatusDateTO.WeghingStageCnt = tblPurchaseScheduleSummaryTO.WtStageCompCnt;
                        vehicleStatusDateTO.COrNcId = tblPurchaseScheduleSummaryTO.COrNcId;
                        vehicleStatusDateTO.GraderName = tblPurchaseScheduleSummaryTO.GreaderName;

                        //Schedule On
                        TblPurchaseScheduleSummaryTO temp = allSchedulTOList.Where(w => w.StatusId == (Int32)Constants.TranStatusE.New).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.ScheduleOn = temp.CreatedOn;
                            vehicleStatusDateTO.ScheduleOnStr = Constants.GetDateWithFormate(vehicleStatusDateTO.ScheduleOn);
                            vehicleStatusDateTO.ScheduleOnDiffMin = 0;
                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.ScheduleBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.ScheduleBy = temp.CreatedByName;
                        }

                        if (isForBrm == 1)
                        {
                            temp = allSchedulTOList.Where(w => w.StatusId == (Int32)Constants.TranStatusE.SEND_FOR_VERIFICATION).FirstOrDefault();
                            if (temp != null)
                            {
                                vehicleStatusDateTO.SendForCommercialapproval = temp.CreatedOn;
                                vehicleStatusDateTO.SendForCommercialapprovalOnStr = Constants.GetDateWithFormate(temp.CreatedOn);
                                vehicleStatusDateTO.SendForCommercialapprovalOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.ScheduleOn, temp.CreatedOn);
                                if (temp.UpdatedByName != null)
                                    vehicleStatusDateTO.SendForCommercialapprovalBy = temp.UpdatedByName;
                                else
                                    vehicleStatusDateTO.SendForCommercialapprovalBy = temp.CreatedByName;
                            }


                            temp = allSchedulTOList.Where(w => w.StatusId == (Int32)Constants.TranStatusE.SEND_FOR_INSPECTION).FirstOrDefault();
                            if (temp != null)
                            {
                                vehicleStatusDateTO.SendForOutsideInspection = temp.CreatedOn;
                                vehicleStatusDateTO.SendForOutsideInspectionOnStr = Constants.GetDateWithFormate(temp.CreatedOn);

                                if (tblPurchaseScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                                {
                                    vehicleStatusDateTO.SendForOutsideInspectionOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.SendForCommercialapproval, temp.CreatedOn);
                                }
                                else
                                {
                                    vehicleStatusDateTO.SendForOutsideInspectionOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.ScheduleOn, temp.CreatedOn);
                                }
                                if (temp.UpdatedByName != null)
                                    vehicleStatusDateTO.SendForOutsideInspectionBy = temp.UpdatedByName;
                                else
                                    vehicleStatusDateTO.SendForOutsideInspectionBy = temp.CreatedByName;
                            }

                        }


                        temp = allSchedulTOList.Where(w => w.StatusId == (Int32)Constants.TranStatusE.VEHICLE_REPORTED_FOR_LOADING).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.VehicleReportedOn = temp.CreatedOn;
                            vehicleStatusDateTO.VehicleReportedOnStr = Constants.GetDateWithFormate(temp.CreatedOn);

                            if (isForBrm == 1)
                                vehicleStatusDateTO.VehicleReportedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.SendForOutsideInspection, temp.CreatedOn);
                            else
                            {
                                vehicleStatusDateTO.VehicleReportedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.ScheduleOn, temp.CreatedOn);
                            }

                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.VehicleReportedBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.VehicleReportedBy = temp.CreatedByName;
                        }


                        temp = allSchedulTOList.Where(w => w.StatusId == (Int32)Constants.TranStatusE.VEHICLE_REQUESTED).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.RequestedToSendIn = temp.CreatedOn;
                            vehicleStatusDateTO.RequestedToSendInOnStr = Constants.GetDateWithFormate(temp.CreatedOn);

                            if (isForBrm == 1)
                                vehicleStatusDateTO.RequestedToSendInOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.VehicleReportedOn, temp.CreatedOn);
                            else
                            {
                                //vehicleStatusDateTO.RequestedToSendInOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.ScheduleOn, temp.CreatedOn);
                                vehicleStatusDateTO.RequestedToSendInOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.VehicleReportedOn, temp.CreatedOn);
                            }

                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.RequestedToSendInBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.RequestedToSendInBy = temp.CreatedByName;
                        }

                        temp = allSchedulTOList.Where(w => (w.VehiclePhaseId == 0 || w.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.OUTSIDE_INSPECTION) && (w.StatusId == (Int32)Constants.TranStatusE.SEND_IN || w.StatusId == (Int32)Constants.TranStatusE.UNLOADING_IS_IN_PROCESS || w.StatusId == (Int32)Constants.TranStatusE.WEIGHING_COMPLETED)).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.SentIn = temp.CreatedOn;
                            vehicleStatusDateTO.SentInOnStr = Constants.GetDateWithFormate(temp.CreatedOn);
                            vehicleStatusDateTO.SentInOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.RequestedToSendIn, temp.CreatedOn);
                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.SentInBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.SentInBy = temp.CreatedByName;
                        }

                        temp = allSchedulTOList.Where(w => w.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && w.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED && w.IsUnloadingCompleted == 1).FirstOrDefault();
                        if (temp != null)
                        {
                            //Updated On
                            //vehicleStatusDateTO.UnloadingCompletedOn = temp.UpdatedOn;
                            //vehicleStatusDateTO.UnloadingCompletedOnStr = Constants.GetDateWithFormate(temp.UpdatedOn);
                            //vehicleStatusDateTO.UnloadingCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.SentIn, temp.UpdatedOn);

                            vehicleStatusDateTO.UnloadingCompletedOn = temp.CreatedOn;
                            vehicleStatusDateTO.UnloadingCompletedOnStr = Constants.GetDateWithFormate(temp.CreatedOn);
                            vehicleStatusDateTO.UnloadingCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.SentIn, temp.CreatedOn);
                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.UnloadingCompletedBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.UnloadingCompletedBy = temp.CreatedByName;

                        }


                        temp = allSchedulTOList.Where(w => w.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT && w.IsVehicleOut == 1).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.VehicleOutOn = temp.CreatedOn;
                            vehicleStatusDateTO.VehicleOutOnStr = Constants.GetDateWithFormate(temp.CreatedOn);
                            vehicleStatusDateTO.VehicleOutOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.UnloadingCompletedOn, temp.CreatedOn);
                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.VehicleOutBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.VehicleOutBy = temp.CreatedByName;
                        }

                        temp = allSchedulTOList.Where(w => w.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING && w.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && w.IsGradingCompleted == 1).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.GradingCompletedOn = temp.CreatedOn;
                            vehicleStatusDateTO.GradingCompletedOnStr = Constants.GetDateWithFormate(temp.CreatedOn);
                            vehicleStatusDateTO.GradingCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.UnloadingCompletedOn, temp.CreatedOn);
                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.GradingCompletedBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.GradingCompletedBy = temp.CreatedByName;
                        }


                        temp = allSchedulTOList.Where(w => w.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.RECOVERY && w.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && w.IsRecovery == 1).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.RecoveryCompletedOn = temp.CreatedOn;
                            vehicleStatusDateTO.RecoveryCompletedOnStr = Constants.GetDateWithFormate(temp.CreatedOn);
                            vehicleStatusDateTO.RecoveryCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.GradingCompletedOn, temp.CreatedOn);
                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.RecoveryCompletedBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.RecoveryCompletedBy = temp.CreatedByName;
                        }

                        temp = allSchedulTOList.Where(w => w.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && w.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && w.IsCorrectionCompleted == 1).FirstOrDefault();
                        if (temp != null)
                        {
                            vehicleStatusDateTO.CorrectionCompletedOn = temp.CreatedOn;
                            vehicleStatusDateTO.CorrectionCompletedOnStr = Constants.GetDateWithFormate(temp.CreatedOn);

                            if (isForBrm == 1)
                                vehicleStatusDateTO.CorrectionCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.RecoveryCompletedOn, temp.CreatedOn);
                            else
                                vehicleStatusDateTO.CorrectionCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.GradingCompletedOn, temp.CreatedOn);

                            if (temp.UpdatedByName != null)
                                vehicleStatusDateTO.CorrectionCompletedBy = temp.UpdatedByName;
                            else
                                vehicleStatusDateTO.CorrectionCompletedBy = temp.CreatedByName;

                        }

                        vehicleStatusDateTOList.Add(vehicleStatusDateTO);

                    }
                }
            }


            return vehicleStatusDateTOList;

        }

        //Prajakta[2020-sep-19] Added for vehicle tracking
        public List<VehicleStatusDateTO> GetAllVehicleTrackingDtlsList(DateTime fromDate, DateTime toDate, string pmUserId, Int32 vehicleFilterId, Int32 isPrintExcelReport)
        {
            Int32 isForBrm = 0;
            TblConfigParamsTO tblConfigParamsTOIsBrm = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
            if (tblConfigParamsTOIsBrm != null)
            {
                isForBrm = Convert.ToInt32(tblConfigParamsTOIsBrm.ConfigParamVal);
            }

            TblPurSchSummaryFilterTO tblPurSchSummaryFilterTempTO = new TblPurSchSummaryFilterTO();

            if (!String.IsNullOrEmpty(pmUserId))
                tblPurSchSummaryFilterTempTO.UserId = pmUserId;

            //tblPurSchSummaryFilterTempTO.UserId = pmUserId.ToString();
            tblPurSchSummaryFilterTempTO.FromDate = fromDate;
            tblPurSchSummaryFilterTempTO.ToDate = toDate;

            List<VehicleStatusDateTO> vehicleStatusDateTOList = _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleTrackingDtls(tblPurSchSummaryFilterTempTO);

            if (vehicleStatusDateTOList != null && vehicleStatusDateTOList.Count > 0)
            {
                if ((Int32)Constants.VehicleFilterE.COMPLETED == vehicleFilterId)
                {
                    vehicleStatusDateTOList = vehicleStatusDateTOList.Where(w => w.IsCorrectionCompleted == 1).ToList();
                }
                else if ((Int32)Constants.VehicleFilterE.PENDING == vehicleFilterId)
                {
                    vehicleStatusDateTOList = vehicleStatusDateTOList.Where(w => w.IsCorrectionCompleted == 0).ToList();
                }
            }
            vehicleStatusDateTOList = GetDiffMinForVehicleMovement(vehicleStatusDateTOList, isForBrm);
            return vehicleStatusDateTOList;

        }

        public List<VehicleStatusDateTO> GetDiffMinForVehicleMovement(List<VehicleStatusDateTO> vehicleStatusDateTOList, Int32 isForBRM)
        {
            if (vehicleStatusDateTOList != null && vehicleStatusDateTOList.Count > 0)
            {
                for (int i = 0; i < vehicleStatusDateTOList.Count; i++)
                {
                    VehicleStatusDateTO vehicleStatusDateTO = vehicleStatusDateTOList[i];

                    vehicleStatusDateTO.ScheduleOnDiffMin = 0;

                    vehicleStatusDateTO.SendForCommercialapprovalOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.ScheduleOn, vehicleStatusDateTO.SendForCommercialapproval);

                    if (vehicleStatusDateTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                    {
                        vehicleStatusDateTO.SendForOutsideInspectionOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.SendForCommercialapproval, vehicleStatusDateTO.SendForOutsideInspection);
                    }
                    else
                    {
                        vehicleStatusDateTO.SendForOutsideInspectionOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.ScheduleOn, vehicleStatusDateTO.SendForOutsideInspection);
                    }

                    if (isForBRM == 1)
                        vehicleStatusDateTO.VehicleReportedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.SendForOutsideInspection, vehicleStatusDateTO.VehicleReportedOn);
                    else
                    {
                        vehicleStatusDateTO.VehicleReportedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.ScheduleOn, vehicleStatusDateTO.VehicleReportedOn);
                    }

                    vehicleStatusDateTO.RequestedToSendInOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.VehicleReportedOn, vehicleStatusDateTO.RequestedToSendIn);

                    vehicleStatusDateTO.SentInOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.RequestedToSendIn, vehicleStatusDateTO.SentIn);

                    vehicleStatusDateTO.UnloadingCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.SentIn, vehicleStatusDateTO.UnloadingCompletedOn);

                    vehicleStatusDateTO.VehicleOutOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.UnloadingCompletedOn, vehicleStatusDateTO.VehicleOutOn);

                    vehicleStatusDateTO.GradingCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.UnloadingCompletedOn, vehicleStatusDateTO.GradingCompletedOn);

                    vehicleStatusDateTO.RecoveryCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.GradingCompletedOn, vehicleStatusDateTO.RecoveryCompletedOn);

                    if (isForBRM == 1)
                        vehicleStatusDateTO.CorrectionCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.RecoveryCompletedOn, vehicleStatusDateTO.CorrectionCompletedOn);
                    else
                        vehicleStatusDateTO.CorrectionCompletedOnDiffMin = Constants.GetDateTimeDiffInMin(vehicleStatusDateTO.GradingCompletedOn, vehicleStatusDateTO.CorrectionCompletedOn);

                }
            }

            return vehicleStatusDateTOList;
        }

        public ResultMessage PrintVehicleTrackingReport(List<VehicleStatusDateTO> vehicleStatusDateTOList)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {




                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in PrintVehicleTrackingReport(List<VehicleStatusDateTO>  vehicleStatusDateTOList)");
                return resultMessage;
            }
        }

        public List<DropDownTO> SelectAllSystemUsersFromRoleTypeWithVehAllocation(Int32 roleTypeId, Int32 nameWithCount)
        {

            List<DropDownTO> userListWithVehicleCount = new List<DropDownTO>();
            DateTime serverDate = _iCommonDAO.ServerDateTime;

            List<DropDownTO> roleUserList = _idimensionBL.SelectAllSystemUsersFromRoleType(roleTypeId);

            if (roleUserList != null && roleUserList.Count > 0)
            {
                Boolean getAllAlocatedVehicles = false;
                Dictionary<Int32, Int32> DCT = _iTblPurchaseScheduleSummaryDAO.GetAllocatedVehiclesAgainstRole(roleTypeId, getAllAlocatedVehicles);

                getAllAlocatedVehicles = true;
                //Dictionary<Int32, Int32> allAllocatedVehDCT = _iTblPurchaseScheduleSummaryDAO.GetAllocatedVehiclesAgainstRole(roleTypeId, getAllAlocatedVehicles);

                Dictionary<Int32, Int32> allAllocatedVehDCT = _iTblPurchaseScheduleSummaryDAO.GetTodaysAllocatedVehiclesCnt(roleTypeId, serverDate);



                for (int i = 0; i < roleUserList.Count; i++)
                {
                    DropDownTO dropDownTO = roleUserList[i];
                    dropDownTO.Tag = 0;

                    String countToAppend = string.Empty;
                    String totalCountToAppend = string.Empty;

                    Int32 cnt = 0;
                    Int32 totalCnt = 0;

                    if (DCT != null && DCT.ContainsKey(roleUserList[i].Value))
                    {
                        dropDownTO.Tag = DCT[roleUserList[i].Value];

                        countToAppend = " (" + DCT[roleUserList[i].Value] + ")";

                        cnt = DCT[roleUserList[i].Value];
                        //totalCountToAppend = countToAppend;
                    }

                    if (allAllocatedVehDCT != null && allAllocatedVehDCT.ContainsKey(roleUserList[i].Value))
                    {
                        Int32 tempVal = allAllocatedVehDCT[roleUserList[i].Value];
                        totalCnt = tempVal;
                        totalCountToAppend = tempVal.ToString();
                    }

                    if (String.IsNullOrEmpty(totalCountToAppend))
                    {
                        totalCountToAppend = "0";
                    }

                    if (String.IsNullOrEmpty(countToAppend))
                    {
                        countToAppend = " 0";
                    }

                    dropDownTO.Text = (roleUserList[i].Text);
                    Int32 totalVehCnt = cnt + totalCnt;
                    if (nameWithCount == 1)
                    {
                        dropDownTO.Text += countToAppend + "/" + totalVehCnt;
                    }
                    else
                    {
                        dropDownTO.Tag += "/" + totalVehCnt;
                    }
                    userListWithVehicleCount.Add(dropDownTO);
                }

            }

            if (userListWithVehicleCount != null && userListWithVehicleCount.Count > 0)
            {
                userListWithVehicleCount = userListWithVehicleCount.OrderBy(o => o.Tag).ThenBy(t => t.Text).ToList();
            }

            return userListWithVehicleCount;

        }
        //Added by minal 02 May 2021 For Drpbox
        public ResultMessage DataFromExportToExcel()
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                //Boolean isForBRM = false;
                //TblConfigParamsTO isForBRMConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
                //if (isForBRMConfigTO != null)
                //{
                //    if (isForBRMConfigTO.ConfigParamVal.ToString() == "1")
                //    {
                //        isForBRM = true;
                //    }
                //    else
                //    {
                //        isForBRM = false;
                //    }
                //}
                Int32 cOrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                resultMessage = CreateAndBackupExcelFileCopy(cOrNcId, Startup.IsForBRM);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ResultMessage DataFromExportToExcelWBReport()
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Int32 result = 0;
                DateTime currentDate = _iCommonDAO.ServerDateTime;
                Int32 days = 3;
                currentDate = currentDate.AddDays(-days);
                Int32 cOrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;

                resultMessage = SelectAndExportToExcelWBReportForCopy(currentDate);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        //Added by minal

        #region Data Extraction Process For Schedule

        public DateTime GetLastTransactionDate(DateTime toDate)
        {
            DateTime transactionDate = toDate;

            DateTime reportMinDate = _iTblReportsBackupDtlsBL.SelectReportMinBackUpdate();
            if (reportMinDate != DateTime.MinValue && reportMinDate < toDate)
            {
                transactionDate = reportMinDate;
            }

            return transactionDate;
        }

        public ResultMessage DataExtractionForCorrectionCompleVehicles()
        {
            lock (dataExtractionLockObj)
            {
                ResultMessage resultMessage = new ResultMessage();
                SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
                SqlTransaction tran = null;
                int result = 0;
                try
                {

                    DateTime serveDate = _iCommonDAO.ServerDateTime;
                    Boolean isForBRM = Startup.IsForBRM;

                    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_EXTRACTION_DAYS);
                    if (tblConfigParamsTO != null)
                    {
                        Int32 days = Convert.ToInt32(tblConfigParamsTO.ConfigParamVal);
                        serveDate = serveDate.AddDays(-days);
                    }

                    //Prajakta[2021-07-29] Added to get last report backup Date
                    serveDate = GetLastTransactionDate(serveDate);

                    int confiqId = _iTblConfigParamsDAO.IoTSetting();
                    Int32 cOrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;

                    List<TblPurchaseScheduleSummaryTO> allCorrectionComplVehList = SelectAllCorrectionCompleVehicles(serveDate, cOrNcId);
                    if (allCorrectionComplVehList == null || allCorrectionComplVehList.Count == 0)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "No vehicles found to extract.";
                        return resultMessage;
                    }

                    if (isForBRM)
                    {
                        allCorrectionComplVehList = allCorrectionComplVehList.Where(a => a.IsDBup == 1).ToList();
                        if (allCorrectionComplVehList == null || allCorrectionComplVehList.Count == 0)
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "No vehicles found to extract.";
                            return resultMessage;
                        }
                    }

                    //resultMessage = CreateAndBackupExcelFile(allCorrectionComplVehList, cOrNcId, isForBRM);
                    //if (resultMessage.MessageType != ResultMessageE.Information)
                    //{
                    //    return resultMessage;
                    //}

                    allCorrectionComplVehList = allCorrectionComplVehList.GroupBy(g => g.ActualRootScheduleId).Select(s => s.FirstOrDefault()).ToList();
                    for (int i = 0; i < allCorrectionComplVehList.Count; i++)
                    {

                        try
                        {
                            conn.Open();
                            tran = conn.BeginTransaction();
                            List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList = new List<TblAddonsFunDtlsTO>();

                            TblPurchaseScheduleSummaryTO scheduleSummaryTO = allCorrectionComplVehList[i];
                            if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                            {
                                //if IsDBup = 1 means all process completed @ Added By kiran 
                                if (scheduleSummaryTO.IsDBup == 0)
                                {
                                    continue;
                                }
                            }
                            resultMessage = DeleteAllDtlsAgainstVeh(scheduleSummaryTO, tblAddonsFunDtlsTOList, conn, tran);
                            if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                            {
                                //throw new Exception("Error in DeleteAllDtlsAgainstVeh(scheduleSummaryTO, conn, tran);");
                                continue;
                            }

                            if (tblAddonsFunDtlsTOList != null && tblAddonsFunDtlsTOList.Count > 0)
                            {
                                resultMessage = DeleteFileFromAzure(tblAddonsFunDtlsTOList, conn, tran);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    //throw new Exception("Error in DeleteFileFromAzure(tblAddonsFunDtlsTOList,conn,tran);");
                                    continue;
                                }
                            }


                            //if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                            //{
                            //    int deleteResult = RemoveDateFromGateAndWeightIOT(scheduleSummaryTO);
                            //    if (deleteResult != 1)
                            //    {
                            //        throw new Exception("Error While RemoveDateFromGateAndWeightIOT ");
                            //    }
                            //}

                            tran.Commit();
                        }
                        catch (System.Exception ex)
                        {
                            throw new Exception("Error in DataExtractionForCorrectionCompleVehicles()");
                        }
                        finally
                        {
                            conn.Close();
                        }

                    }



                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = "Data extraction process completed successfully.";
                    return resultMessage;
                }
                catch (System.Exception ex)
                {
                    resultMessage.DefaultExceptionBehaviour(ex, "Error in DataExtractionForCorrectionCompleVehiles()");
                    return resultMessage;

                }
                finally
                {
                    conn.Close();
                }
            }
        }

        public ResultMessage DataExtractionForConfirmCorrectionCompleVehicles()
        {
            lock (dataExtractionLockObj)
            {
                ResultMessage resultMessage = new ResultMessage();
                SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
                SqlTransaction tran = null;
                int result = 0;
                try
                {

                    DateTime serveDate = _iCommonDAO.ServerDateTime;
                    Boolean isForBRM = Startup.IsForBRM;

                    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_EXTRACTION_DAYS);
                    if (tblConfigParamsTO != null)
                    {
                        Int32 days = Convert.ToInt32(tblConfigParamsTO.ConfigParamVal);
                        serveDate = serveDate.AddDays(-days);
                    }

                    //Prajakta[2021-07-29] Added to get last report backup Date
                    serveDate = GetLastTransactionDate(serveDate);

                    int confiqId = _iTblConfigParamsDAO.IoTSetting();
                    Int32 cOrNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;

                    List<TblPurchaseScheduleSummaryTO> allCorrectionComplVehList = SelectAllCorrectionCompleVehicles(serveDate, cOrNcId);
                    if (allCorrectionComplVehList == null || allCorrectionComplVehList.Count == 0)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "No vehicles found to extract.";
                        return resultMessage;
                    }

                    if (isForBRM)
                    {
                        allCorrectionComplVehList = allCorrectionComplVehList.Where(a => a.IsDBup == 1).ToList();
                        if (allCorrectionComplVehList == null || allCorrectionComplVehList.Count == 0)
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "No vehicles found to extract.";
                            return resultMessage;
                        }
                    }

                    resultMessage = CreateAndBackupExcelFile(allCorrectionComplVehList, cOrNcId, isForBRM);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    allCorrectionComplVehList = allCorrectionComplVehList.GroupBy(g => g.ActualRootScheduleId).Select(s => s.FirstOrDefault()).ToList();
                    for (int i = 0; i < allCorrectionComplVehList.Count; i++)
                    {

                        try
                        {
                            conn.Open();
                            tran = conn.BeginTransaction();
                            List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList = new List<TblAddonsFunDtlsTO>();

                            TblPurchaseScheduleSummaryTO scheduleSummaryTO = allCorrectionComplVehList[i];
                            if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                            {
                                //if IsDBup = 1 means all process completed @ Added By kiran 
                                if (scheduleSummaryTO.IsDBup == 0)
                                {
                                    continue;
                                }
                            }
                            resultMessage = DeleteAllDtlsAgainstVeh(scheduleSummaryTO, tblAddonsFunDtlsTOList, conn, tran);
                            if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                            {
                                //throw new Exception("Error in DeleteAllDtlsAgainstVeh(scheduleSummaryTO, conn, tran);");
                                continue;
                            }

                            if (tblAddonsFunDtlsTOList != null && tblAddonsFunDtlsTOList.Count > 0)
                            {
                                resultMessage = DeleteFileFromAzure(tblAddonsFunDtlsTOList, conn, tran);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    //throw new Exception("Error in DeleteFileFromAzure(tblAddonsFunDtlsTOList,conn,tran);");
                                    continue;
                                }
                            }


                            //if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                            //{
                            //    int deleteResult = RemoveDateFromGateAndWeightIOT(scheduleSummaryTO);
                            //    if (deleteResult != 1)
                            //    {
                            //        throw new Exception("Error While RemoveDateFromGateAndWeightIOT ");
                            //    }
                            //}

                            tran.Commit();
                        }
                        catch (System.Exception ex)
                        {
                            throw new Exception("Error in DataExtractionForConfirmCorrectionCompleVehicles()");
                        }
                        finally
                        {
                            conn.Close();
                        }

                    }



                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = "Data extraction process completed successfully.";
                    return resultMessage;
                }
                catch (System.Exception ex)
                {
                    resultMessage.DefaultExceptionBehaviour(ex, "Error in DataExtractionForCorrectionCompleVehiles()");
                    return resultMessage;

                }
                finally
                {
                    conn.Close();
                }
            }
        }

        public ResultMessage CreateAndBackupExcelFileCopy(Int32 cOrNcId, Boolean isForBRM)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            Int32 days = 3;
            currentDate = currentDate.AddDays(-days);
            try
            {
                if (isForBRM)
                {
                    resultMessage = SelectAndExportToExcelTallyTransportReportForCopy(currentDate, cOrNcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    resultMessage = SelectAndExportToExcelCCTransportReportForCopy(currentDate, cOrNcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    resultMessage = SelectAndExportToExcelTallyPREnquiryReportForCopy(currentDate, cOrNcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    resultMessage = SelectAndExportToExcelTallyCreditNoteOrderReportForCopy(currentDate);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    resultMessage = SelectAndExportToExcelGradeNoteEnquiryReportForCopy(currentDate, cOrNcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    resultMessage = SelectAndExportToExcelWBReportForCopy(currentDate);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                }
                if (!isForBRM)
                {
                    resultMessage = SelectAndExportToExcelTallyReportForCopy(cOrNcId, currentDate);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CreateAndBackupExcelFile(DateTime fromDate,DateTime toDate,Int32 cOrNcId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }



        public ResultMessage CreateAndBackupExcelFile(List<TblPurchaseScheduleSummaryTO> allCorrectionComplVehList, Int32 cOrNcId, Boolean isForBRM)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            try
            {
                if (allCorrectionComplVehList != null && allCorrectionComplVehList.Count > 0)
                {
                    List<Int32> vehicleIdsList = allCorrectionComplVehList.Select(a => a.ActualRootScheduleId).ToList();
                    if (vehicleIdsList != null && vehicleIdsList.Count > 0)
                    {
                        String vehicleIds = String.Join(",", vehicleIdsList);
                        if (!String.IsNullOrEmpty(vehicleIds))
                        {
                            if (isForBRM)
                            {
                                resultMessage = SelectAndExportToExcelTallyTransportReport(vehicleIds, cOrNcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelCCTransportReport(vehicleIds, cOrNcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelTallyPREnquiryReport(vehicleIds, cOrNcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelTallyCreditNoteOrderReport(vehicleIds, cOrNcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelGradeNoteEnquiryReport(vehicleIds, cOrNcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelWBReport(vehicleIds, cOrNcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                            }
                            if (!isForBRM)
                            {
                                Int32 isConsiderTm = 1;
                                List<TallyReportTO> list = GetListOfTallyReport(null, null, cOrNcId, 0, null, 0, false, vehicleIds, isConsiderTm);
                                //crete file and uplod res
                                result = CreateTempTallyExcel(list);
                                if (result != 1)
                                {
                                    resultMessage.DefaultBehaviour();
                                    resultMessage.Text = "Error while creating excel file.";
                                    return resultMessage;
                                }
                            }
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CreateAndBackupExcelFile(DateTime fromDate,DateTime toDate,Int32 cOrNcId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public List<TallyReportTO> GetListOfTallyReport(string fromDate, string toDate, int ConfirmTypeId, int supplierId, String purchaseManagerIds, int materialTypeId, Boolean isForNewTallyReport, string vehicleIds, Int32 isConsiderTm = 0)
        {
            Int16 mathroundFact = 3;
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;
            if (Constants.IsDateTime(fromDate))
                from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            if (Constants.IsDateTime(toDate))
                to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));
            List<TallyReportTO> list = new List<TallyReportTO>();
            List<TallyReportTO> finalList = new List<TallyReportTO>();
            //Boolean isForBRM = false;

            //TblConfigParamsTO isBRMConfigParamTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
            //if (isBRMConfigParamTO != null)
            //{

            //    if (isBRMConfigParamTO.ConfigParamVal == "1")
            //    {
            //        isForBRM = true;
            //    }

            //}

            Boolean isTakeNonCommercialQty = false;
            TblConfigParamsTO isTakeNonCommerQtyConfigTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_NONCOMMERCIAL_QTY_FOR_WEIGHTED_RATE);
            if (isTakeNonCommerQtyConfigTO != null)
            {
                if (isTakeNonCommerQtyConfigTO.ConfigParamVal.ToString() == "1")
                {
                    isTakeNonCommercialQty = true;
                }
                else
                {
                    isTakeNonCommercialQty = false;
                }
            }

            String dateOfBackYears = String.Empty;
            TblConfigParamsTO dateBackYearsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.DATE_BACK_YEARS);
            if (dateBackYearsTO != null)
            {
                if (!(String.IsNullOrEmpty(dateBackYearsTO.ConfigParamVal)))
                {
                    dateOfBackYears = dateBackYearsTO.ConfigParamVal.ToString();
                }
            }

            list = _ireportDAO.SelectTallyReportDetails(from_Date, to_Date, ConfirmTypeId, supplierId, purchaseManagerIds, materialTypeId, vehicleIds, dateOfBackYears, isConsiderTm);

            if (list != null && list.Count > 0)
            {
                if (isForNewTallyReport)
                {
                    finalList = list;
                }
                else if (!isForNewTallyReport)
                {
                    //finalList = list;


                    //Commented by minal for Kalika Changes
                    var summuryGroupList = list.ToLookup(p => p.IdPurchaseScheduleSummary).ToList();

                    if (summuryGroupList != null)
                    {
                        for (int i = 0; i < summuryGroupList.Count; i++)
                        {

                            TallyReportTO tallyReportTO = new TallyReportTO();
                            TallyReportTO tallyReportTOForProcessCharge = new TallyReportTO();
                            TallyReportTO tallyReportTOForGrandTotal = new TallyReportTO();

                            tallyReportTO.SupplierName = summuryGroupList[i].FirstOrDefault().SupplierName + " Total";
                            tallyReportTO.SupplierName = " Total";
                            tallyReportTO.GradeQty = Math.Round(summuryGroupList[i].Sum(w => w.GradeQty), mathroundFact);
                            tallyReportTO.DustQty = Math.Round(summuryGroupList[i].Sum(w => w.DustQty), mathroundFact);

                            tallyReportTO.GradeRate = Math.Round((summuryGroupList[i].Average(w => w.GradeRate)), mathroundFact);

                            tallyReportTO.TotalGradeQty = Math.Round((summuryGroupList[i].Sum(w => w.GradeQty)), mathroundFact);
                            tallyReportTO.DisplayTotalGradeQty = String.Format("{0:0.000}", tallyReportTO.TotalGradeQty);

                            double totalRate = Math.Round(summuryGroupList[i].Sum(w => w.GradeRate), mathroundFact);
                            tallyReportTO.GradeRate = Math.Round(totalRate / tallyReportTO.GradeQty, mathroundFact);
                            tallyReportTO.Total = Math.Round((summuryGroupList[i].Sum(w => w.Total)), mathroundFact);
                            //Added by minal for display Total after two decimal point for report 

                            tallyReportTO.DisplayTotal = String.Format("{0:0.00}", tallyReportTO.Total);

                            if (Startup.IsForBRM)
                            {
                                tallyReportTO.DisplayTotal = String.Format("{0:0.000}", tallyReportTO.Total);
                            }

                            if (!Startup.IsForBRM)
                            {
                                double total = 0, processCharge = 0, grandTotal = 0;
                                //Added by minal 03 May 2021 For Add Process charge
                                tallyReportTOForProcessCharge.SupplierName = "Process Charge";
                                if ((summuryGroupList[i].FirstOrDefault().IsBoth == 1) && (summuryGroupList[i].FirstOrDefault().COrNCId == (Int32)Constants.ConfirmTypeE.CONFIRM))
                                {
                                    tallyReportTOForProcessCharge.Total = 0.00;
                                }
                                else
                                {
                                    tallyReportTOForProcessCharge.Total = summuryGroupList[i].FirstOrDefault().ProcessChargePerVeh;
                                }


                                if ((summuryGroupList[i].FirstOrDefault().IsBoth == 1))
                                {
                                    Boolean isBothRecPresent = false;
                                    for (int k = 0; k < summuryGroupList.Count; k++)
                                    {
                                        if (k != i)
                                        {
                                            var isBothRecPresentList = summuryGroupList[k].Where(a => a.RootScheduleId == summuryGroupList[i].FirstOrDefault().RootScheduleId
                                    ).ToList();

                                            if (isBothRecPresentList != null && isBothRecPresentList.Count > 0)
                                            {
                                                isBothRecPresent = true;
                                                break;
                                            }
                                            else
                                            {
                                                isBothRecPresent = false;
                                            }
                                        }

                                    }

                                    if (isBothRecPresent)
                                    {
                                        tallyReportTOForProcessCharge.Total = 0.00;

                                        var enquiryList = summuryGroupList[i].Where(a => a.COrNCId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
                                        if (enquiryList != null && enquiryList.Count > 0)
                                        {
                                            tallyReportTOForProcessCharge.Total = enquiryList.FirstOrDefault().ProcessChargePerVeh;
                                        }

                                    }
                                    else
                                    {
                                        var res = summuryGroupList[i].Where(a => a.IsBoth == 1).ToList();
                                        if (res != null && res.Count > 0)
                                        {
                                            var enquiryList = res.Where(a => a.COrNCId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
                                            if (enquiryList != null && enquiryList.Count > 0)
                                            {
                                                tallyReportTOForProcessCharge.Total = enquiryList.FirstOrDefault().ProcessChargePerVeh;
                                            }
                                            else
                                            {
                                                var orderList = res.Where(a => a.COrNCId == (Int32)Constants.ConfirmTypeE.CONFIRM).ToList();
                                                if (orderList != null && orderList.Count > 0)
                                                {
                                                    tallyReportTOForProcessCharge.Total = orderList.FirstOrDefault().ProcessChargePerVeh;
                                                }
                                            }
                                        }

                                    }

                                }
                                else
                                {
                                    tallyReportTOForProcessCharge.Total = summuryGroupList[i].FirstOrDefault().ProcessChargePerVeh;
                                }

                                tallyReportTOForProcessCharge.DisplayTotal = String.Format("{0:0.00}", tallyReportTOForProcessCharge.Total);

                                if (Startup.IsForBRM)
                                {
                                    tallyReportTOForProcessCharge.DisplayTotal = String.Format("{0:0.000}", tallyReportTOForProcessCharge.Total);
                                }

                                total = tallyReportTO.Total;
                                processCharge = tallyReportTOForProcessCharge.Total;
                                grandTotal = ((total) - (processCharge));

                                tallyReportTOForGrandTotal.SupplierName = "Grand Total";
                                tallyReportTOForGrandTotal.Total = (grandTotal);
                                tallyReportTOForGrandTotal.DisplayTotal = String.Format("{0:0.00}", tallyReportTOForGrandTotal.Total);
                                if (Startup.IsForBRM)
                                {
                                    tallyReportTOForGrandTotal.DisplayTotal = String.Format("{0:0.000}", tallyReportTOForGrandTotal.Total);
                                }
                                //Added by minal 
                            }

                            double qty = tallyReportTO.GradeQty;

                            if (!isTakeNonCommercialQty)
                            {
                                qty = tallyReportTO.GradeQty - tallyReportTO.DustQty;
                            }

                            tallyReportTO.GradeRate = Math.Round(tallyReportTO.Total / qty, mathroundFact);
                            //Added by minal for display gradeRate after two decimal point for report 
                            tallyReportTO.DisplayGradeRate = String.Format("{0:0.00}", tallyReportTO.GradeRate);
                            if (Startup.IsForBRM)
                            {
                                tallyReportTO.DisplayGradeRate = String.Format("{0:0.000}", tallyReportTO.GradeRate);
                            }

                            tallyReportTO.DisplayGradeQty = String.Format("{0:0.000}", tallyReportTO.GradeQty);

                            var gruopList = summuryGroupList[i].ToList();

                            foreach (var item in summuryGroupList[i])
                            {
                                if (!Startup.IsForBRM)
                                {
                                    if (item.DisplayRecordInFirstRow == (Int32)Constants.DisplayRecordInFirstRowE.FIRST_ROW)
                                    {
                                        item.DisplayProcessChargePerVeh = tallyReportTOForProcessCharge.DisplayTotal;
                                    }
                                    else
                                    {
                                        item.DisplayProcessChargePerVeh = "0.00";
                                    }
                                    item.DisplayGrandTotal = tallyReportTOForGrandTotal.DisplayTotal;
                                }
                                if (Startup.IsForBRM)
                                {
                                    item.DisplayProcessChargePerVeh = tallyReportTOForProcessCharge.DisplayTotal;
                                    item.DisplayGrandTotal = tallyReportTOForGrandTotal.DisplayTotal;
                                }
                            }


                            //gruopList.Add(tallyReportTO);
                            //if (!Startup.IsForBRM)
                            //{
                            //    gruopList.Add(tallyReportTOForProcessCharge);
                            //    gruopList.Add(tallyReportTOForGrandTotal);
                            //}
                            finalList.AddRange(gruopList);
                        }
                    }

                    //Commented by minal for Kalika Changes

                }
            }

            return finalList;
        }
        public ResultMessage PrintTallyReportFileAWS()
        {
            ResultMessage resultMessage = new ResultMessage();
            resultMessage = PrintTallyReport(DateTime.Today.AddDays(-1).ToString(), DateTime.Today.AddDays(-1).ToString(),2,0,"",0,false,"",true);

            resultMessage.DefaultSuccessBehaviour();
            return resultMessage;
        }
        

        


            public ResultMessage PrintTallyReport(string fromDate, string toDate, int ConfirmTypeId, int supplierId, String purchaseManagerIds, int materialTypeId, Boolean isForNewTallyReport, string vehicleIds, bool? isStoreCloud = false)
        {
            ResultMessage resultMessage = new ResultMessage();

            List<TallyReportTO> TblReportsTOList = GetListOfTallyReport(fromDate, toDate, ConfirmTypeId, supplierId, purchaseManagerIds, materialTypeId, isForNewTallyReport, vehicleIds);

            DataSet printDataSet = new DataSet();
            DataTable headerDT = new DataTable();
            if ((TblReportsTOList != null && TblReportsTOList.Count > 0) || isStoreCloud == true)
            {
                headerDT = Common.ToDataTable(TblReportsTOList);
            }
            headerDT.TableName = "headerDT";

            printDataSet.Tables.Add(headerDT);
            String ReportTemplateName = "TallyPROrderBReportTemplate";
            if (!isForNewTallyReport && Startup.IsForBRM)
            {
                ReportTemplateName = "TallyReportIsBRMTemplate";
            }
            else if (!isForNewTallyReport && !Startup.IsForBRM)
            {
                ReportTemplateName = "TallyReportTemplate";

                /*double totalGrossWeight = 0;
                double totalTareWeight = 0;
                double totalNetWeight = 0;

                foreach (TallyReportTO tallyReportsTO in TblReportsTOList)
                {
                    totalGrossWeight += tallyReportsTO.GrossWeight;
                    totalTareWeight += tallyReportsTO.TareWeight;
                    totalNetWeight += tallyReportsTO.NetWeight;
                }

                DataRow dr = headerDT.NewRow();
                dr["Grade"] = "Total";
                dr["GrossWeight"] = totalGrossWeight;
                dr["TareWeight"] = totalTareWeight;
                dr["NetWeight"] = totalNetWeight;
                headerDT.Rows.Add(dr);*/
            }


            String templateFilePath = _iDimReportTemplateBL.SelectReportFullName(ReportTemplateName);
            String fileName = "Doc-" + DateTime.Now.Ticks;
            String saveLocation = AppDomain.CurrentDomain.BaseDirectory + fileName + ".xls";
            Boolean IsProduction = true;

            TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName("IS_PRODUCTION_ENVIRONMENT_ACTIVE");
            if (tblConfigParamsTO != null)
            {
                if (Convert.ToInt32(tblConfigParamsTO.ConfigParamVal) == 0)
                {
                    IsProduction = false;
                }
            }
            resultMessage = _iRunReport.GenrateMktgInvoiceReport(printDataSet, templateFilePath, saveLocation, Constants.ReportE.EXCEL_DONT_OPEN, IsProduction);
            if (resultMessage.MessageType == ResultMessageE.Information)
            {
                String filePath = String.Empty;
                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(String))
                {
                    filePath = resultMessage.Tag.ToString();
                }
                //driveName + path;
                int returnPath = 0;
                if (returnPath != 1)
                {
                    String fileName1 = Path.GetFileName(saveLocation);
                    Byte[] bytes = File.ReadAllBytes(filePath);
                   
                    if (bytes != null && bytes.Length > 0)
                    {
                        resultMessage.Tag = bytes;

                        if (isStoreCloud == true)
                        {
                            #region Upload File to Cloud
                            string filename = "TallyReport-" + DateTime.Now.ToString("dd-MM-yyyy-HH-mm-ss");
                             UploadFileToCloudForFlexCel(filePath, filename, bytes);
                            #endregion
                        }

                        string resFname = Path.GetFileNameWithoutExtension(saveLocation);
                        string directoryName;
                        directoryName = Path.GetDirectoryName(saveLocation);
                        string[] fileEntries = Directory.GetFiles(directoryName, "*Doc*");
                        string[] filesList = Directory.GetFiles(directoryName, "*Doc*");

                        foreach (string file in filesList)
                        {
                            //if (file.ToUpper().Contains(resFname.ToUpper()))
                            {
                                File.Delete(file);
                            }
                        }
                    }

                    if (resultMessage.MessageType == ResultMessageE.Information)
                    {
                        return resultMessage;
                    }
                }

            }
            else
            {
                resultMessage.Text = "Something wents wrong please try again";
                resultMessage.DisplayMessage = "Something wents wrong please try again";
                resultMessage.Result = 0;
            }
            resultMessage.DefaultSuccessBehaviour();
            return resultMessage;
        }

        //Added by minal 02 May 2021 For Copy
        public ResultMessage SelectAndExportToExcelTallyTransportReportForCopy(DateTime currentDate, Int32 cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.TALLY_TRANSPORT_ENQUIRY.ToString());
                backupDate = currentDate.AddHours(-24);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }


                List<TallyTransportEnquiryTO> tallyTransportEnquiryTOList = _ireportDAO.SelectTallyTransportEnquiryDetailsForCopy(backupDate, currentDate, cOrNcId);
                if (tallyTransportEnquiryTOList == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tallyTransportEnquiryTOList is null. ");
                    return resultMessage;
                }
                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                Int32 result = 0;
                if (tallyTransportEnquiryTOList.Count > 0)
                {
                    //crete file and uplod res
                    result = CreateTempTallyTransportEnquiryExcel(tallyTransportEnquiryTOList);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    reportBackUpTO.IsBackUp = 1;
                }
                else
                {
                    reportBackUpTO.IsBackUp = 0;
                }

                reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_TRANSPORT_ENQUIRY.ToString();
                reportBackUpTO.BackupDate = _iCommonDAO.ServerDateTime;
                //reportBackUpTO.IsBackUp = 1;
                result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelTallyTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelCCTransportReportForCopy(DateTime currentDate, Int32 cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.CC_TRANSPORT_ENQUIRY.ToString());
                backupDate = currentDate.AddHours(-24);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }

                List<CCTransportEnquiryTO> cCTransportEnquiryTOList = _ireportDAO.SelectCCTransportEnquiryDetailsForCopy(backupDate, currentDate, cOrNcId);
                if (cCTransportEnquiryTOList == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! cCTransportEnquiryTOList is null. ");
                    return resultMessage;
                }
                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                Int32 result = 0;
                if (cCTransportEnquiryTOList.Count > 0)
                {
                    //crete file and uplod res
                    result = CreateTempCCTransportEnquiryExcel(cCTransportEnquiryTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    reportBackUpTO.IsBackUp = 1;
                }
                else
                {
                    reportBackUpTO.IsBackUp = 0;
                }

                reportBackUpTO.ReportName = Constants.BRMReportNameE.CC_TRANSPORT_ENQUIRY.ToString();
                reportBackUpTO.BackupDate = _iCommonDAO.ServerDateTime;
                result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelTallyPREnquiryReportForCopy(DateTime currentDate, Int32 cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            String materialIds = String.Empty;
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.TALLY_PR_ENQUIRY_REPORT.ToString());
                backupDate = currentDate.AddHours(-24);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }
                string configParamNameScrap = Constants.CP_SCRAP_MATERIAL_IDS_FOR_TALLY_PR_ENQUIRY_RPT;
                TblConfigParamsTO configParamsTOScrap = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(configParamNameScrap);
                if (configParamsTOScrap != null && !String.IsNullOrEmpty(configParamsTOScrap.ConfigParamVal))
                {
                    materialIds = configParamsTOScrap.ConfigParamVal;
                }

                List<TallyReportTO> tallyPRReportTOList = _ireportDAO.SelectTallyPREnquiryDetailsForCopy(backupDate, currentDate, materialIds, cOrNcId);
                if (tallyPRReportTOList == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tallyPRReportTOList is null. ");
                    return resultMessage;
                }
                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                Int32 result = 0;

                if (tallyPRReportTOList.Count > 0)
                {

                    //crete file and uplod res
                    result = CreateTempTallyPREnquiryExcel(tallyPRReportTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    reportBackUpTO.IsBackUp = 1;
                }
                else
                {
                    reportBackUpTO.IsBackUp = 0;
                }

                reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_PR_ENQUIRY_REPORT.ToString();
                reportBackUpTO.BackupDate = _iCommonDAO.ServerDateTime;
                //reportBackUpTO.IsBackUp = 1;
                result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelWBReportForCopy(DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.WB_REPORT.ToString());
                backupDate = currentDate.AddHours(-24);

                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }
                List<TblWBRptTO> tblWBRptTOList = new List<TblWBRptTO>();
                List<TblWBRptTO> tblWBRptTOListForSale = new List<TblWBRptTO>();
                List<TblWBRptTO> tblWBRptTOListForUnload = new List<TblWBRptTO>();

                tblWBRptTOList = _ireportDAO.SelectWBForPurchaseReportListForCopy(backupDate, currentDate);
                if (tblWBRptTOList == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tblWBRptTOList is null. ");
                    return resultMessage;
                }
                tblWBRptTOListForSale = _ireportDAO.SelectWBForLoadReportListForCopy(backupDate, currentDate);
                if (tblWBRptTOListForSale == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tblWBRptTOListForSale is null. ");
                    return resultMessage;
                }
                if (tblWBRptTOListForSale.Count > 0)
                {
                    Double grossWt = 0, tareWt = 0, netWt = 0;
                    List<Int64> loadingIdList = tblWBRptTOListForSale.Select(a => a.Id).Distinct().ToList();
                    for (int i = 0; i < loadingIdList.Count; i++)
                    {
                        var rList = tblWBRptTOListForSale.Where(a => a.Id == loadingIdList[i]);

                        grossWt = Convert.ToDouble(rList.Max(x => x.GrossWeight));
                        tareWt = Convert.ToDouble(rList.Max(x => x.TareWeight));
                        netWt = grossWt - tareWt;
                        if (netWt < 0)
                        {
                            netWt = 0;
                        }
                        foreach (var item in tblWBRptTOListForSale.Where(w => w.Id == loadingIdList[i]))
                        {
                            item.NetWeight = Convert.ToDecimal(netWt);
                        }
                    }
                    tblWBRptTOList.AddRange(tblWBRptTOListForSale);
                }

                tblWBRptTOListForUnload = _ireportDAO.SelectWBForUnloadReportListForCopy(backupDate, currentDate);
                if (tblWBRptTOListForUnload == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tblWBRptTOListForUnload is null. ");
                    return resultMessage;
                }
                if (tblWBRptTOListForSale.Count > 0)
                {
                    Double grossWt = 0, tareWt = 0, netWt = 0;
                    List<Int64> unLoadingIdList = tblWBRptTOListForUnload.Select(a => a.Id).Distinct().ToList();
                    for (int i = 0; i < unLoadingIdList.Count; i++)
                    {
                        var rList = tblWBRptTOListForUnload.Where(a => a.Id == unLoadingIdList[i]);

                        grossWt = Convert.ToDouble(rList.Max(x => x.GrossWeight));
                        tareWt = Convert.ToDouble(rList.Max(x => x.TareWeight));
                        netWt = grossWt - tareWt;
                        if (netWt < 0)
                        {
                            netWt = 0;
                        }
                        foreach (var item in tblWBRptTOListForUnload.Where(w => w.Id == unLoadingIdList[i]))
                        {
                            item.NetWeight = Convert.ToDecimal(netWt);
                        }
                    }
                    tblWBRptTOList.AddRange(tblWBRptTOListForUnload);
                }

                if (tblWBRptTOList == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tblWBRptTOList is null. ");
                    return resultMessage;
                }
                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                Int32 result = 0;
                if (tblWBRptTOList.Count > 0)
                {
                    result = CreateTempWBReportExcel(tblWBRptTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    reportBackUpTO.IsBackUp = 1;
                }
                else
                {
                    reportBackUpTO.IsBackUp = 0;
                }


                reportBackUpTO.ReportName = Constants.BRMReportNameE.WB_REPORT.ToString();
                reportBackUpTO.BackupDate = _iCommonDAO.ServerDateTime;
                //reportBackUpTO.IsBackUp = 1;
                result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }

        }
        public ResultMessage SelectAndExportToExcelTallyCreditNoteOrderReportForCopy(DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.TALLY_CREDIT_NOTE_ORDER_REPORT.ToString());
                backupDate = currentDate.AddHours(-24);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }

                resultMessage = TallyCrNoteOrderDetailsToDropboxForCopy(backupDate, currentDate);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }

                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_CREDIT_NOTE_ORDER_REPORT.ToString();
                reportBackUpTO.BackupDate = _iCommonDAO.ServerDateTime;
                //reportBackUpTO.IsBackUp = 1;

                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(int))
                {
                    reportBackUpTO.IsBackUp = Convert.ToInt32(resultMessage.Tag);
                }

                Int32 result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelGradeNoteEnquiryReportForCopy(DateTime currentDate, Int32 cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.GRADE_NOTE_ENQUIRY_REPORT.ToString());
                backupDate = currentDate.AddHours(-24);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }

                resultMessage = GradeNoteEnquiryDetailsToDropoxForCopy(backupDate, currentDate, cOrNcId);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    //tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }
                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                reportBackUpTO.ReportName = Constants.BRMReportNameE.GRADE_NOTE_ENQUIRY_REPORT.ToString();
                reportBackUpTO.BackupDate = _iCommonDAO.ServerDateTime;
                //reportBackUpTO.IsBackUp = 1;

                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(int))
                {
                    reportBackUpTO.IsBackUp = Convert.ToInt32(resultMessage.Tag);
                }

                Int32 result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelTallyReportForCopy(int cOrNcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.KalikaReportNameE.TALLY_REPORT.ToString());
                backupDate = currentDate.AddHours(-24);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }

                Int32 confirmTypeId = 2;//Prajakta[2021-09-06] Added to get tally report for order/enquiry vehicles
                Int32 isConsiderTm = 1;
                List<TallyReportTO> tallyReportList = GetListOfTallyReport(backupDate.ToString(), currentDate.ToString(), confirmTypeId, 0, null, 0, false, null, isConsiderTm);
                if (tallyReportList == null)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tallyReportList is null. ");
                    return resultMessage;
                }
                Int32 result = CreateTempTallyExcel(tallyReportList);
                if (result != 1)
                {
                    //tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }

                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                reportBackUpTO.ReportName = Constants.KalikaReportNameE.TALLY_REPORT.ToString();
                reportBackUpTO.BackupDate = _iCommonDAO.ServerDateTime;
                reportBackUpTO.IsBackUp = 1;
                result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }

        }

        //Added by minal

        public ResultMessage SelectAndExportToExcelTallyTransportReport(string vehicleIds, Int32 cOrNcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.TALLY_TRANSPORT_ENQUIRY.ToString());
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }
                else
                {
                    backupDate = currentDate;
                }


                List<TallyTransportEnquiryTO> tallyTransportEnquiryTOList = _ireportDAO.SelectTallyTransportEnquiryDetailsForCopy(backupDate, currentDate, cOrNcId);
                if (tallyTransportEnquiryTOList == null || tallyTransportEnquiryTOList.Count == 0)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tallyTransportEnquiryTOList is null. ");
                    return resultMessage;
                }
                //crete file and uplod res
                Int32 result = CreateTempTallyTransportEnquiryExcel(tallyTransportEnquiryTOList);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }

                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_TRANSPORT_ENQUIRY.ToString();
                reportBackUpTO.BackupDate = currentDate;
                reportBackUpTO.IsBackUp = 1;
                result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelTallyTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelCCTransportReport(string vehicleIds, Int32 cOrNcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.CC_TRANSPORT_ENQUIRY.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }

                }

                if (isTakeBackUp)
                {
                    List<CCTransportEnquiryTO> cCTransportEnquiryTOList = _ireportDAO.SelectCCTransportEnquiryDetails(vehicleIds, cOrNcId);
                    if (cCTransportEnquiryTOList == null || cCTransportEnquiryTOList.Count == 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.DefaultBehaviour("Record not found!! cCTransportEnquiryTOList is null. ");
                        return resultMessage;
                    }
                    //crete file and uplod res
                    Int32 result = CreateTempCCTransportEnquiryExcel(cCTransportEnquiryTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }

                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.CC_TRANSPORT_ENQUIRY.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelTallyPREnquiryReport(string vehicleIds, Int32 cOrNcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.TALLY_PR_ENQUIRY_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }

                if (isTakeBackUp)
                {
                    List<TallyReportTO> tallyPRReportTOList = _ireportDAO.SelectTallyPREnquiryDetails(vehicleIds, cOrNcId);
                    if (tallyPRReportTOList == null || tallyPRReportTOList.Count == 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.DefaultBehaviour("Record not found!! tallyPRReportTOList is null. ");
                        return resultMessage;
                    }
                    //crete file and uplod res
                    Int32 result = CreateTempTallyPREnquiryExcel(tallyPRReportTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_PR_ENQUIRY_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelTallyCreditNoteOrderReport(string vehicleIds, Int32 cOrNcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.TALLY_CREDIT_NOTE_ORDER_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }

                if (isTakeBackUp)
                {
                    resultMessage = TallyCrNoteOrderDetailsToDropbox(vehicleIds, cOrNcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }

                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_CREDIT_NOTE_ORDER_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    Int32 result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelGradeNoteEnquiryReport(string vehicleIds, Int32 cOrNcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.GRADE_NOTE_ENQUIRY_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;

                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }


                if (isTakeBackUp)
                {
                    resultMessage = GradeNoteEnquiryDetailsToDropox(vehicleIds, cOrNcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.GRADE_NOTE_ENQUIRY_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    Int32 result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }

        public ResultMessage SelectAndExportToExcelWBReport(string vehicleIds, Int32 cOrNcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.WB_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }


                if (isTakeBackUp)
                {
                    List<TblWBRptTO> tblWBRptTOList = _ireportDAO.SelectWBForPurchaseReportList(vehicleIds, cOrNcId);
                    if (tblWBRptTOList == null || tblWBRptTOList.Count == 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.DefaultBehaviour("Record not found!! tblWBRptTOList is null. ");
                        return resultMessage;
                    }
                    Int32 result = CreateTempWBReportExcel(tblWBRptTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }

                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.WB_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }
        public int CreateTempTallyExcel(List<TallyReportTO> list)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (list == null || list.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);

                excelWorksheet.Cells[1, 1].Value = "Voucher No.";
                excelWorksheet.Cells[1, 2].Value = "Date";
                excelWorksheet.Cells[1, 3].Value = "Vehicle No.";
                excelWorksheet.Cells[1, 4].Value = "Supplier Name";
                excelWorksheet.Cells[1, 5].Value = "Purchase Manager";
                excelWorksheet.Cells[1, 6].Value = "Purchase Ledger";
                excelWorksheet.Cells[1, 7].Value = "Location";
                excelWorksheet.Cells[1, 8].Value = "Grade";
                excelWorksheet.Cells[1, 9].Value = "Gross weight";
                excelWorksheet.Cells[1, 10].Value = "Tare weight";
                excelWorksheet.Cells[1, 11].Value = "Net Weight";
                excelWorksheet.Cells[1, 12].Value = "Unloading Qty(MT)";
                excelWorksheet.Cells[1, 13].Value = "Rate(₹)";
                excelWorksheet.Cells[1, 14].Value = "Total";
                excelWorksheet.Cells[1, 15].Value = "Bill Type";
                excelWorksheet.Cells[1, 16].Value = "Material Type";
                excelWorksheet.Cells[1, 17].Value = "Container No.";
                excelWorksheet.Cells[1, 18].Value = "Narration";
                excelWorksheet.Cells[1, 19].Value = "Process Charge";
                excelWorksheet.Cells[1, 20].Value = "Grand Total";

                excelWorksheet.Cells[1, 1, 1, 20].Style.Font.Bold = true;

                double totalGrossWeight = 0;
                double totalTareWeight = 0;
                double totalNetWeight = 0;

                for (int i = 0; i < list.Count; i++)
                {
                    excelWorksheet.Cells[cellRow, 1].Value = list[i].VoucherNo;
                    excelWorksheet.Cells[cellRow, 2].Value = list[i].Date;
                    excelWorksheet.Cells[cellRow, 3].Value = list[i].TruckNo;
                    excelWorksheet.Cells[cellRow, 4].Value = list[i].SupplierName;
                    excelWorksheet.Cells[cellRow, 5].Value = list[i].PM;
                    excelWorksheet.Cells[cellRow, 6].Value = list[i].PurchaseLedger;
                    excelWorksheet.Cells[cellRow, 7].Value = list[i].Location;
                    excelWorksheet.Cells[cellRow, 8].Value = list[i].Grade;
                    excelWorksheet.Cells[cellRow, 9].Value = list[i].GrossWeight;
                    excelWorksheet.Cells[cellRow, 10].Value = list[i].TareWeight;
                    excelWorksheet.Cells[cellRow, 11].Value = list[i].NetWeight;
                    excelWorksheet.Cells[cellRow, 12].Value = list[i].DisplayGradeQty;
                    excelWorksheet.Cells[cellRow, 13].Value = list[i].DisplayGradeRate;
                    excelWorksheet.Cells[cellRow, 14].Value = list[i].DisplayTotal;
                    excelWorksheet.Cells[cellRow, 15].Value = list[i].BillType;
                    excelWorksheet.Cells[cellRow, 16].Value = list[i].MaterialType;
                    excelWorksheet.Cells[cellRow, 17].Value = list[i].ContainerNo;
                    excelWorksheet.Cells[cellRow, 18].Value = list[i].Narration;
                    excelWorksheet.Cells[cellRow, 19].Value = list[i].DisplayProcessChargePerVeh;
                    excelWorksheet.Cells[cellRow, 20].Value = list[i].DisplayGrandTotal;

                    totalGrossWeight += list[i].GrossWeight;
                    totalTareWeight += list[i].TareWeight;
                    totalNetWeight += list[i].NetWeight;

                    cellRow++;

                    //if (i == (list.Count - 1))
                    //{
                    //    excelWorksheet.Cells[cellRow, 6].Value = "Total";
                    //    excelWorksheet.Cells[cellRow, 7].Value = Math.Round((list.Sum(ele => ele.GradeQty)), 2);
                    //    excelWorksheet.Cells[cellRow, 9].Value = Math.Round((list.Sum(ele => ele.Total)), 2);
                    //    excelWorksheet.Cells[cellRow, 1, cellRow, 12].Style.Font.Bold = true;
                    //}


                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 20])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                        range.AutoFitColumns();
                    }
                }

                /*excelWorksheet.Cells[cellRow, 8].Value = "Total";
                excelWorksheet.Cells[cellRow, 9].Value = totalGrossWeight;
                excelWorksheet.Cells[cellRow, 10].Value = totalTareWeight;
                excelWorksheet.Cells[cellRow, 11].Value = totalNetWeight;
                using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 20])
                {
                    range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                    range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                    range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                    range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                    range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                    range.Style.Font.Name = "Times New Roman";
                    range.Style.Font.Size = 10;
                    range.AutoFitColumns();
                }*/

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion


                #region Upload File to Cloud
                TblConfigParamsTO configParamTOForAWS = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.IS_FILE_UPLOAD_TO_AWS);

                String fileName = Constants.ExcelFileName + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "_Recycle_" + ".xlsx";
                var fileStream = excelPackage.GetAsByteArray();

                if (configParamTOForAWS == null || configParamTOForAWS.ConfigParamVal.ToString() == "0")
                {
                    #region Upload File to Azure

                    // Create azure storage  account connection.
                    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                    // Create the blob client.
                    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                    // Retrieve reference to a target container.
                    CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                    CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                    Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                    #endregion
                }
                else
                {
                    #region Upload File to AWS

                    TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
                    if (configParamTOForAWSRecycleBucket == null)
                    {
                        throw new Exception("configParamTOForAWSRecycleBucket == null");
                    }
                    TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
                    if (configParamTOForAWSAccessKey == null)
                    {
                        throw new Exception("configParamTOForAWSAccessKey == null");
                    }
                    TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
                    if (configParamTOForAWSSecretKey == null)
                    {
                        throw new Exception("configParamTOForAWSSecretKey == null");
                    }

                    var result = UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, "");
                    #endregion
                }
                excelPackage.Dispose();

                #endregion

                

                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempInvoiceExcel");
                return -1;
            }

        }

        public int CreateTempTallyTransportEnquiryExcel(List<TallyTransportEnquiryTO> tallyTransportEnquiryTOList)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (tallyTransportEnquiryTOList == null || tallyTransportEnquiryTOList.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);

                //excelWorksheet.Cells[1, 1].Value = "Sr.No.";
                //excelWorksheet.Cells[1, 2].Value = "Date";
                //excelWorksheet.Cells[1, 3].Value = "Voucher Type";
                //excelWorksheet.Cells[1, 4].Value = "Party Name";
                //excelWorksheet.Cells[1, 5].Value = "Cash";                        
                //excelWorksheet.Cells[1, 6].Value = "Tranport Amount RS";
                //excelWorksheet.Cells[1, 7].Value = "Manoj Srp Petty Csh";
                //excelWorksheet.Cells[1, 8].Value = "NARRATION [Complete Truck No]";

                //excelWorksheet.Cells[1, 1].Value = "Sr.No.";
                excelWorksheet.Cells[1, 1].Value = "Date";
                excelWorksheet.Cells[1, 2].Value = "Voucher Type";
                excelWorksheet.Cells[1, 3].Value = "Party Name";
                excelWorksheet.Cells[1, 4].Value = "Cash";
                excelWorksheet.Cells[1, 5].Value = "Tranport Amount RS";
                excelWorksheet.Cells[1, 6].Value = "Manoj Srp Petty Csh";
                excelWorksheet.Cells[1, 7].Value = "NARRATION [Complete Truck No]";

                excelWorksheet.Cells[1, 1, 1, 8].Style.Font.Bold = true;

                for (int i = 0; i < tallyTransportEnquiryTOList.Count; i++)
                {
                    //excelWorksheet.Cells[cellRow, 1].Value = i + 1;
                    //excelWorksheet.Cells[cellRow, 2].Value = tallyTransportEnquiryTOList[i].Date;
                    //excelWorksheet.Cells[cellRow, 3].Value = tallyTransportEnquiryTOList[i].VoucherType;
                    //excelWorksheet.Cells[cellRow, 4].Value = tallyTransportEnquiryTOList[i].PartyName;
                    //excelWorksheet.Cells[cellRow, 5].Value = tallyTransportEnquiryTOList[i].Cash;
                    //excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                    //excelWorksheet.Cells[cellRow, 7].Style.Numberformat.Format = "#,##0.000";
                    //excelWorksheet.Cells[cellRow, 6].Value = tallyTransportEnquiryTOList[i].TranportAmountRS;
                    //excelWorksheet.Cells[cellRow, 7].Value = tallyTransportEnquiryTOList[i].ManojSrpPettyCsh;
                    //excelWorksheet.Cells[cellRow, 8].Value = tallyTransportEnquiryTOList[i].Narration;

                    //excelWorksheet.Cells[cellRow, 1].Value = i + 1;
                    excelWorksheet.Cells[cellRow, 1].Value = tallyTransportEnquiryTOList[i].Date;
                    excelWorksheet.Cells[cellRow, 2].Value = tallyTransportEnquiryTOList[i].VoucherType;
                    excelWorksheet.Cells[cellRow, 3].Value = tallyTransportEnquiryTOList[i].PartyName;
                    excelWorksheet.Cells[cellRow, 4].Value = tallyTransportEnquiryTOList[i].Cash;
                    excelWorksheet.Cells[cellRow, 5].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 5].Value = tallyTransportEnquiryTOList[i].TranportAmountRS;
                    excelWorksheet.Cells[cellRow, 6].Value = tallyTransportEnquiryTOList[i].ManojSrpPettyCsh;
                    excelWorksheet.Cells[cellRow, 7].Value = tallyTransportEnquiryTOList[i].Narration;

                    cellRow++;

                    if (i == (tallyTransportEnquiryTOList.Count - 1))
                    {

                        //excelWorksheet.Cells[cellRow, 5].Value = "Total";
                        //Double tranportAmountRS = tallyTransportEnquiryTOList.Sum(ele => ele.TranportAmountRS);
                        //Double manojSrpPettyCsh = tallyTransportEnquiryTOList.Sum(ele => ele.ManojSrpPettyCsh);
                        //excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                        //excelWorksheet.Cells[cellRow, 7].Style.Numberformat.Format = "#,##0.000";
                        //excelWorksheet.Cells[cellRow, 6].Value = tranportAmountRS;
                        //excelWorksheet.Cells[cellRow, 7].Value = manojSrpPettyCsh;
                        //excelWorksheet.Cells[cellRow, 1, cellRow, 8].Style.Font.Bold = true;

                        excelWorksheet.Cells[cellRow, 4].Value = "Total";
                        Double tranportAmountRS = tallyTransportEnquiryTOList.Sum(ele => ele.TranportAmountRS);
                        Double manojSrpPettyCsh = tallyTransportEnquiryTOList.Sum(ele => ele.ManojSrpPettyCsh);
                        excelWorksheet.Cells[cellRow, 5].Style.Numberformat.Format = "#,##0.000";
                        excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                        excelWorksheet.Cells[cellRow, 5].Value = tranportAmountRS;
                        excelWorksheet.Cells[cellRow, 6].Value = manojSrpPettyCsh;
                        excelWorksheet.Cells[cellRow, 1, cellRow, 8].Style.Font.Bold = true;
                    }


                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 8])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                        range.AutoFitColumns();

                    }
                }

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion

                #region Upload File to Cloud
                TblConfigParamsTO configParamTOForAWS = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.IS_FILE_UPLOAD_TO_AWS);
               
                String fileName = Constants.ExcelFileNameTallyTransportEnquiry + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "_Recycle_" + ".xlsx";
                var fileStream = excelPackage.GetAsByteArray();

                if (configParamTOForAWS == null || configParamTOForAWS.ConfigParamVal.ToString() == "0")
                {
                    #region Upload File to Azure

                    // Create azure storage  account connection.
                    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                    // Create the blob client.
                    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                    // Retrieve reference to a target container.
                    CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                    CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                    Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                    #endregion
                }
                else
                {
                    #region Upload File to AWS

                    TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
                    if (configParamTOForAWSRecycleBucket == null)
                    {
                        throw new Exception("configParamTOForAWSRecycleBucket == null");
                    }
                    TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
                    if (configParamTOForAWSAccessKey == null)
                    {
                        throw new Exception("configParamTOForAWSAccessKey == null");
                    }
                    TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
                    if (configParamTOForAWSSecretKey == null)
                    {
                        throw new Exception("configParamTOForAWSSecretKey == null");
                    }

                    var result = UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, "");
                    #endregion
                }
                excelPackage.Dispose();

                #endregion

                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempTallyTransportEnquiryExcel");
                return -1;
            }

        }

        public int UploadFileToCloudForFlexCel(string filePath,string fileName, byte[] fileStream)
        {

            #region Upload File to AWS
            string ContentType = "";
            if(!string.IsNullOrWhiteSpace(filePath))
            new FileExtensionContentTypeProvider().TryGetContentType(filePath, out ContentType);

            TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
            if (configParamTOForAWSRecycleBucket == null)
            {
                throw new Exception("configParamTOForAWSRecycleBucket == null");
            }
            TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
            if (configParamTOForAWSAccessKey == null)
            {
                throw new Exception("configParamTOForAWSAccessKey == null");
            }
            TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
            if (configParamTOForAWSSecretKey == null)
            {
                throw new Exception("configParamTOForAWSSecretKey == null");
            }


            return UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, ContentType);
            #endregion
        }

        public int UploadFileToAWS(string AWSAccessKey, string AWSAccessSecret, string BucketName, string fileName, byte[] fileStream, string ContentType)
        {
            var client = new AmazonS3Client(AWSAccessKey, AWSAccessSecret, Amazon.RegionEndpoint.APSouth1);

            // testing  vivek
            //byte[] bytes = File.ReadAllBytes("D:\\New folder\\Policy.png");
            PutObjectResponse response = null;

            using (var memoryStream = new MemoryStream(fileStream))
            {
                var request = new PutObjectRequest
                {
                    BucketName = BucketName,
                    Key = fileName,
                    InputStream = memoryStream,
                    ContentType = ContentType,
                    CannedACL = S3CannedACL.PublicRead
                };

                response = client.PutObjectAsync(request).Result;
            };
            return response.HttpStatusCode == HttpStatusCode.OK ? 1 : 0;
        }
        public int CreateTempCCTransportEnquiryExcel(List<CCTransportEnquiryTO> cCTransportEnquiryTOList)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (cCTransportEnquiryTOList == null || cCTransportEnquiryTOList.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);

                excelWorksheet.Cells[1, 1].Value = "Sr.No";
                excelWorksheet.Cells[1, 2].Value = "Date";
                excelWorksheet.Cells[1, 3].Value = "Party Name";
                excelWorksheet.Cells[1, 4].Value = "Vehicle Number";
                excelWorksheet.Cells[1, 5].Value = "Transport Payment";

                excelWorksheet.Cells[1, 1, 1, 5].Style.Font.Bold = true;

                for (int i = 0; i < cCTransportEnquiryTOList.Count; i++)
                {
                    excelWorksheet.Cells[cellRow, 1].Value = cCTransportEnquiryTOList[i].SrNo;
                    excelWorksheet.Cells[cellRow, 2].Value = cCTransportEnquiryTOList[i].Date;
                    excelWorksheet.Cells[cellRow, 3].Value = cCTransportEnquiryTOList[i].PartyName;
                    excelWorksheet.Cells[cellRow, 4].Value = cCTransportEnquiryTOList[i].VehicleNumber;
                    excelWorksheet.Cells[cellRow, 5].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 5].Value = cCTransportEnquiryTOList[i].TransportPayment;

                    cellRow++;

                    if (i == (cCTransportEnquiryTOList.Count - 1))
                    {
                        excelWorksheet.Cells[cellRow, 4].Value = "Total";
                        Double transportPayment = cCTransportEnquiryTOList.Sum(ele => ele.TransportPayment);
                        excelWorksheet.Cells[cellRow, 5].Style.Numberformat.Format = "#,##0.000";
                        excelWorksheet.Cells[cellRow, 5].Value = transportPayment;
                        excelWorksheet.Cells[cellRow, 1, cellRow, 5].Style.Font.Bold = true;
                    }

                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 5])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                        range.AutoFitColumns();
                    }
                }

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion

                #region Upload File to Cloud
                TblConfigParamsTO configParamTOForAWS = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.IS_FILE_UPLOAD_TO_AWS);

                String fileName = Constants.ExcelFileNameCCTransportEnquiry + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "_Recycle_" + ".xlsx";
                var fileStream = excelPackage.GetAsByteArray();

                if (configParamTOForAWS == null || configParamTOForAWS.ConfigParamVal.ToString() == "0")
                {
                    #region Upload File to Azure

                    // Create azure storage  account connection.
                    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                    // Create the blob client.
                    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                    // Retrieve reference to a target container.
                    CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                    CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                    Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                    #endregion
                }
                else
                {
                    #region Upload File to AWS

                    TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
                    if (configParamTOForAWSRecycleBucket == null)
                    {
                        throw new Exception("configParamTOForAWSRecycleBucket == null");
                    }
                    TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
                    if (configParamTOForAWSAccessKey == null)
                    {
                        throw new Exception("configParamTOForAWSAccessKey == null");
                    }
                    TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
                    if (configParamTOForAWSSecretKey == null)
                    {
                        throw new Exception("configParamTOForAWSSecretKey == null");
                    }

                    var result = UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, "");
                    #endregion
                }
                excelPackage.Dispose();

                #endregion
                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempCCTransportEnquiryExcel");
                return -1;
            }

        }

        public int CreateTempTallyPREnquiryExcel(List<TallyReportTO> tallyReportTOList)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (tallyReportTOList == null || tallyReportTOList.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);

                excelWorksheet.Cells[1, 1].Value = "Date";
                excelWorksheet.Cells[1, 2].Value = "Vehicle No.";
                excelWorksheet.Cells[1, 3].Value = "Supplier Name";
                excelWorksheet.Cells[1, 4].Value = "Purchase Manager";
                excelWorksheet.Cells[1, 5].Value = "Location";
                excelWorksheet.Cells[1, 6].Value = "Material Type";
                excelWorksheet.Cells[1, 7].Value = "Grade";
                excelWorksheet.Cells[1, 8].Value = "Unloading Qty(MT)";
                excelWorksheet.Cells[1, 9].Value = "Rate (Rs.)";
                excelWorksheet.Cells[1, 10].Value = "Total";
                excelWorksheet.Cells[1, 11].Value = "Godown";

                excelWorksheet.Cells[1, 1, 1, 11].Style.Font.Bold = true;

                for (int i = 0; i < tallyReportTOList.Count; i++)
                {
                    excelWorksheet.Cells[cellRow, 1].Value = tallyReportTOList[i].Date;
                    excelWorksheet.Cells[cellRow, 2].Value = tallyReportTOList[i].TruckNo;
                    excelWorksheet.Cells[cellRow, 3].Value = tallyReportTOList[i].SupplierName;
                    excelWorksheet.Cells[cellRow, 4].Value = tallyReportTOList[i].PM;
                    excelWorksheet.Cells[cellRow, 5].Value = tallyReportTOList[i].Location;
                    excelWorksheet.Cells[cellRow, 6].Value = tallyReportTOList[i].MaterialType;
                    excelWorksheet.Cells[cellRow, 7].Value = tallyReportTOList[i].Grade;
                    excelWorksheet.Cells[cellRow, 8].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 8].Value = tallyReportTOList[i].DisplayGradeQty;
                    excelWorksheet.Cells[cellRow, 9].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 9].Value = tallyReportTOList[i].DisplayGradeRate;
                    excelWorksheet.Cells[cellRow, 10].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 10].Value = tallyReportTOList[i].DisplayTotal;
                    //excelWorksheet.Cells[cellRow, 8].Value = String.Format("{0:0.000}", tallyReportTOList[i].GradeQty); 
                    //excelWorksheet.Cells[cellRow, 9].Value = String.Format("{0:0.000}", tallyReportTOList[i].GradeRate); 
                    //excelWorksheet.Cells[cellRow, 10].Value = String.Format("{0:0.000}", tallyReportTOList[i].Total); 
                    excelWorksheet.Cells[cellRow, 11].Value = tallyReportTOList[i].Godown;

                    cellRow++;

                    if (i == (tallyReportTOList.Count - 1))
                    {
                        //Saket[2021-05-10] Commented
                        //excelWorksheet.Cells[cellRow, 7].Value = "Total";
                        //Double gradeQty = tallyReportTOList.Sum(ele => ele.GradeQty);
                        //excelWorksheet.Cells[cellRow, 8].Style.Numberformat.Format = "#,##0.000";
                        //excelWorksheet.Cells[cellRow, 8].Value = gradeQty;
                        //Double total = tallyReportTOList.Sum(ele => ele.Total);
                        //excelWorksheet.Cells[cellRow, 10].Style.Numberformat.Format = "#,##0.000";
                        //excelWorksheet.Cells[cellRow, 10].Value = total;
                        //excelWorksheet.Cells[cellRow, 1, cellRow, 11].Style.Font.Bold = true;
                    }


                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 11])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                        range.AutoFitColumns();
                    }
                }

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion

                #region Upload File to Cloud
                TblConfigParamsTO configParamTOForAWS = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.IS_FILE_UPLOAD_TO_AWS);

                String fileName = Constants.ExcelFileNameTallyPREnquiry + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "_Recycle_" + ".xlsx";
                var fileStream = excelPackage.GetAsByteArray();

                if (configParamTOForAWS == null || configParamTOForAWS.ConfigParamVal.ToString() == "0")
                {
                    #region Upload File to Azure

                    // Create azure storage  account connection.
                    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                    // Create the blob client.
                    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                    // Retrieve reference to a target container.
                    CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                    CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                    Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                    #endregion
                }
                else
                {
                    #region Upload File to AWS

                    TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
                    if (configParamTOForAWSRecycleBucket == null)
                    {
                        throw new Exception("configParamTOForAWSRecycleBucket == null");
                    }
                    TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
                    if (configParamTOForAWSAccessKey == null)
                    {
                        throw new Exception("configParamTOForAWSAccessKey == null");
                    }
                    TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
                    if (configParamTOForAWSSecretKey == null)
                    {
                        throw new Exception("configParamTOForAWSSecretKey == null");
                    }

                    var result = UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, "");
                    #endregion
                }
                excelPackage.Dispose();

                #endregion

                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempTallyPREnquiryExcel");
                return -1;
            }

        }

        public ResultMessage TallyCrNoteOrderDetailsToDropbox(string vehicleIds, int cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;
            try
            {

                Int16 mathroundFact = 2;
                double grandBasicGradeAmount = 0;
                double grandTotal = 0;
                double grandRate = 0;

                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummaryForDropbox(vehicleIds, cOrNcId);

                //dynamic ScheduleTOList = new List<dynamic>();
                List<TallyCrOrderReportTO> tallyCrOrderReportTOList = new List<TallyCrOrderReportTO>();
                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {
                    //Prajakta[2019-03-21] Added to get only order vehicles report
                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.COrNcId == cOrNcId).ToList();
                    if (tblPurchaseScheduleSummaryTOList == null || tblPurchaseScheduleSummaryTOList.Count == 0)
                        return null;


                    // _iTblPurchaseScheduleSummaryBL.GetSameProdItemsCombinedListForReport(tblPurchaseScheduleSummaryTOList);

                    foreach (var ScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                    {
                        //Prajakta[2019-09-27] Commented to optimize code
                        //if (ScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && ScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                        {
                            double totalAmount = 0;
                            double totalQty = 0;
                            double totalBasicGradeAmount = 0;

                            List<TblPurchaseInvoiceTO> InvoiceTOList = new List<TblPurchaseInvoiceTO>();
                            TblPurchaseInvoiceTO InvoiceTO1 = new TblPurchaseInvoiceTO();
                            InvoiceTOList.Add(InvoiceTO1);

                            //List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(ScheduleSummaryTO.RootScheduleId);

                            if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                            {
                                TblPurchaseInvoiceTO InvoiceTO = InvoiceTOList[0];
                                //InvoiceTO.TblPurchaseInvoiceAddrTOList = _iTblPurchaseInvoiceAddrDAO.SelectAllTblPurchaseInvoiceAddr(InvoiceTO.IdInvoicePurchase);
                                //InvoiceTO.TblPurchaseInvoiceIntefacingDtls = _iTblPurchaseInvoiceInterfacingDtlDAO.SelectTblPurchaseInvoiceInterfacingDtlTOForReport(InvoiceTO.IdInvoicePurchase);

                                string configParamName = Constants.CP_SCRAP_OTHER_TAXES_FOR_TCS_IN_GRADE_NOTE;
                                TblConfigParamsTO configParamsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(configParamName);
                                if (configParamsTO != null)
                                {
                                    List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOList = _iTblPurchaseInvoiceItemDetailsDAO.SelectAllTblPurchaseInvoiceItemDetails(InvoiceTO.IdInvoicePurchase);
                                    if (purchaseInvoiceItemDetailsTOList != null && purchaseInvoiceItemDetailsTOList.Count > 0)
                                    {
                                        List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOListTemp = purchaseInvoiceItemDetailsTOList.Where(w => configParamsTO.ConfigParamVal.Contains(w.OtherTaxId.ToString())).ToList();
                                        if (purchaseInvoiceItemDetailsTOListTemp != null && purchaseInvoiceItemDetailsTOListTemp.Count > 0)
                                        {
                                            foreach (var arr in purchaseInvoiceItemDetailsTOListTemp)
                                            {
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TCS)
                                                {
                                                    InvoiceTO.TcsAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.OTHER_EXPENCES)
                                                {
                                                    InvoiceTO.OtherExpAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TRANSPORTER_ADVANCE)
                                                {
                                                    InvoiceTO.TransportorAdvAmt = arr.TaxableAmt;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                                {
                                    foreach (var DetailsTO in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                                    {
                                        totalQty = totalQty + DetailsTO.Qty;
                                        totalAmount = totalAmount + DetailsTO.Rate;
                                        totalBasicGradeAmount = Math.Round(totalBasicGradeAmount + (DetailsTO.Qty * DetailsTO.Rate), mathroundFact);

                                    }
                                }
                                //dynamic ScheduleTO1 = new JObject();
                                TallyCrOrderReportTO tallyCrOrderReportTO = new TallyCrOrderReportTO();
                                tallyCrOrderReportTO.Date = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                tallyCrOrderReportTO.VoucherType = "Journal";
                                tallyCrOrderReportTO.DrLedgerName = ScheduleSummaryTO.ProdClassDesc;

                                double totaltx = InvoiceTO.CgstAmt + InvoiceTO.SgstAmt + InvoiceTO.IgstAmt;
                                totaltx = Math.Round(totaltx, mathroundFact);
                                double TotalAmountToBePaidToParty = Math.Round(totalBasicGradeAmount + totaltx + InvoiceTO.TcsAmt, mathroundFact);
                                //Double BasicAmount = Math.Round((InvoiceTO.GrandTotal + ScheduleSummaryTO.FreightAmount) - TotalAmountToBePaidToParty, 2);
                                Double BasicAmount = Math.Round((InvoiceTO.GrandTotal - TotalAmountToBePaidToParty) + ScheduleSummaryTO.FreightAmount, 3);

                                if (BasicAmount > 0)
                                {
                                    continue;
                                }
                                tallyCrOrderReportTO.DrLedgerAmount = BasicAmount;
                                tallyCrOrderReportTO.CrLedgerName = ScheduleSummaryTO.SupplierName;
                                tallyCrOrderReportTO.CrLedgerAmount = BasicAmount;
                                tallyCrOrderReportTO.Narration = "BEING CREDIT NOTE RAISED FOR :" + ScheduleSummaryTO.SupplierName + " + " + ScheduleSummaryTO.EnqDisplayNo + " + " + ScheduleSummaryTO.VehicleNo;
                                //ScheduleTO1["Narration : [Supplier Name] + [Sauda Name] + [Vehicle Number]"] = "CREDIT NOTE :" + "Minal Chaudhari" + " + " + "12345678910" + " + " + "MH 10 SI 1010";

                                tallyCrOrderReportTOList.Add(tallyCrOrderReportTO);

                            }

                        }
                    }

                    if (tallyCrOrderReportTOList == null || tallyCrOrderReportTOList.Count == 0)
                    {
                        return null;
                    }

                    //crete file and uplod res
                    result = CreateTempTallyCrNoteOrderExcel(tallyCrOrderReportTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    resultMessage.DefaultSuccessBehaviour();
                    return resultMessage;
                }

            }
            catch (Exception ex)
            {
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.DefaultExceptionBehaviour(ex, "SalesChartEnquiryDetailsToDropbox");
                return resultMessage;
            }

            return resultMessage;
        }

        public ResultMessage TallyCrNoteOrderDetailsToDropboxForCopy(DateTime fromDate, DateTime toDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;
            String materialIds = String.Empty;
            try
            {
                Double conversionFact = 1000;
                Int16 mathroundFact = 3;
                double grandBasicGradeAmount = 0;
                double grandTotal = 0;
                double grandRate = 0;
                String purchaseManagerIds = String.Empty;
                Int32 isConsiderTm = 1;

                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummaryForReport(fromDate, toDate, purchaseManagerIds, isConsiderTm);

                if (tblPurchaseScheduleSummaryTOList == null)
                    return null;

                if (tblPurchaseScheduleSummaryTOList.Count == 0)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.Tag = 0;
                    return resultMessage;
                }

                //dynamic ScheduleTOList = new List<dynamic>();
                List<TallyCrOrderReportTO> tallyCrOrderReportTOList = new List<TallyCrOrderReportTO>();
                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {
                    string configParamNameScrap = Constants.CP_SCRAP_MATERIAL_IDS_FOR_TALLY_CREDIT_NOTE_ORDER_CS_RPT;
                    TblConfigParamsTO configParamsTOScrap = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(configParamNameScrap);
                    if (configParamsTOScrap != null && !String.IsNullOrEmpty(configParamsTOScrap.ConfigParamVal))
                    {
                        List<String> classTypeIdList = configParamsTOScrap.ConfigParamVal.Split(',').ToList();
                        tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(s => classTypeIdList.Contains(Convert.ToString(s.ProdClassId))).ToList();
                    }

                    if (tblPurchaseScheduleSummaryTOList == null)
                        return null;

                    if (tblPurchaseScheduleSummaryTOList.Count == 0)
                    {
                        resultMessage.DefaultSuccessBehaviour();
                        resultMessage.Tag = 0;
                        return resultMessage;
                    }

                    //Prajakta[2019-03-21] Added to get only order vehicles report
                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).ToList();
                    if (tblPurchaseScheduleSummaryTOList == null)
                        return null;

                    if (tblPurchaseScheduleSummaryTOList.Count == 0)
                    {
                        resultMessage.DefaultSuccessBehaviour();
                        resultMessage.Tag = 0;
                        return resultMessage;
                    }


                    // _iTblPurchaseScheduleSummaryBL.GetSameProdItemsCombinedListForReport(tblPurchaseScheduleSummaryTOList);

                    foreach (var ScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                    {
                        //Prajakta[2019-09-27] Commented to optimize code
                        //if (ScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && ScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                        {
                            double totalAmount = 0;
                            double totalQty = 0;
                            double totalBasicGradeAmount = 0;

                            //List<TblPurchaseInvoiceTO> InvoiceTOList = new List<TblPurchaseInvoiceTO>();
                            //TblPurchaseInvoiceTO InvoiceTO1 = new TblPurchaseInvoiceTO();
                            //InvoiceTOList.Add(InvoiceTO1);

                            List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(ScheduleSummaryTO.RootScheduleId);

                            if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                            {
                                TblPurchaseInvoiceTO InvoiceTO = InvoiceTOList[0];
                                InvoiceTO.TblPurchaseInvoiceAddrTOList = _iTblPurchaseInvoiceAddrDAO.SelectAllTblPurchaseInvoiceAddr(InvoiceTO.IdInvoicePurchase);
                                //InvoiceTO.TblPurchaseInvoiceIntefacingDtls = _iTblPurchaseInvoiceInterfacingDtlDAO.SelectTblPurchaseInvoiceInterfacingDtlTOForReport(InvoiceTO.IdInvoicePurchase);

                                string configParamName = Constants.CP_SCRAP_OTHER_TAXES_FOR_TCS_IN_GRADE_NOTE;
                                TblConfigParamsTO configParamsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(configParamName);
                                if (configParamsTO != null)
                                {
                                    List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOList = _iTblPurchaseInvoiceItemDetailsDAO.SelectAllTblPurchaseInvoiceItemDetails(InvoiceTO.IdInvoicePurchase);
                                    if (purchaseInvoiceItemDetailsTOList != null && purchaseInvoiceItemDetailsTOList.Count > 0)
                                    {
                                        List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOListTemp = purchaseInvoiceItemDetailsTOList.Where(w => configParamsTO.ConfigParamVal.Contains(w.OtherTaxId.ToString())).ToList();
                                        if (purchaseInvoiceItemDetailsTOListTemp != null && purchaseInvoiceItemDetailsTOListTemp.Count > 0)
                                        {
                                            foreach (var arr in purchaseInvoiceItemDetailsTOListTemp)
                                            {
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TCS)
                                                {
                                                    InvoiceTO.TcsAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.OTHER_EXPENCES)
                                                {
                                                    InvoiceTO.OtherExpAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TRANSPORTER_ADVANCE)
                                                {
                                                    InvoiceTO.TransportorAdvAmt = arr.TaxableAmt;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                                {

                                    foreach (var DetailsTO in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                                    {
                                        totalQty = totalQty + DetailsTO.Qty;
                                        totalAmount = totalAmount + DetailsTO.Rate;
                                        totalBasicGradeAmount = Math.Round(totalBasicGradeAmount + (DetailsTO.Qty * DetailsTO.Rate), mathroundFact);

                                    }
                                }
                                //dynamic ScheduleTO1 = new JObject();
                                TallyCrOrderReportTO tallyCrOrderReportTO = new TallyCrOrderReportTO();
                                tallyCrOrderReportTO.Date = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                tallyCrOrderReportTO.VoucherType = "Journal";
                                tallyCrOrderReportTO.DrLedgerName = ScheduleSummaryTO.ProdClassDesc;

                                if (ScheduleSummaryTO.ProdClassDesc == "Local Scrap")
                                {
                                    tallyCrOrderReportTO.DrLedgerName = "SRP";
                                }

                                double totaltx = InvoiceTO.CgstAmt + InvoiceTO.SgstAmt + InvoiceTO.IgstAmt;
                                totaltx = Math.Round(totaltx, mathroundFact);
                                double TotalAmountToBePaidToParty = Math.Round(totalBasicGradeAmount + totaltx + InvoiceTO.TcsAmt, mathroundFact);
                                //Double BasicAmount = Math.Round((InvoiceTO.GrandTotal + ScheduleSummaryTO.FreightAmount) - TotalAmountToBePaidToParty, 2);
                                Double BasicAmount = Math.Round((InvoiceTO.GrandTotal - TotalAmountToBePaidToParty) + ScheduleSummaryTO.FreightAmount, mathroundFact);

                                if (BasicAmount > 0)
                                {
                                    continue;
                                }
                                BasicAmount = Math.Abs(BasicAmount / conversionFact);
                                tallyCrOrderReportTO.DrLedgerAmount = BasicAmount;
                                tallyCrOrderReportTO.CrLedgerName = ScheduleSummaryTO.SupplierName;
                                tallyCrOrderReportTO.CrLedgerAmount = BasicAmount;
                                if (InvoiceTO.TblPurchaseInvoiceAddrTOList != null && InvoiceTO.TblPurchaseInvoiceAddrTOList.Count > 0)
                                {
                                    tallyCrOrderReportTO.Narration = "BEING CREDIT NOTE RAISED FOR :" + InvoiceTO.TblPurchaseInvoiceAddrTOList[0].BillingPartyName + " + " + ScheduleSummaryTO.SaudaSupplierName + " + " + ScheduleSummaryTO.VehicleNo;

                                }
                                //ScheduleTO1["Narration : [Supplier Name] + [Sauda Name] + [Vehicle Number]"] = "CREDIT NOTE :" + "Minal Chaudhari" + " + " + "12345678910" + " + " + "MH 10 SI 1010";

                                tallyCrOrderReportTOList.Add(tallyCrOrderReportTO);

                            }

                        }
                    }

                    if (tallyCrOrderReportTOList == null)
                    {
                        return null;
                    }
                    if (tallyCrOrderReportTOList.Count == 0)
                    {
                        resultMessage.DefaultSuccessBehaviour();
                        resultMessage.Tag = 0;
                        return resultMessage;
                    }

                    //crete file and uplod res
                    result = CreateTempTallyCrNoteOrderExcel(tallyCrOrderReportTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.Tag = 1;
                    return resultMessage;
                }

            }
            catch (Exception ex)
            {
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.DefaultExceptionBehaviour(ex, "SalesChartEnquiryDetailsToDropbox");
                return resultMessage;
            }

            return resultMessage;
        }

        public int CreateTempTallyCrNoteOrderExcel(List<TallyCrOrderReportTO> tallyCrOrderReportTOList)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (tallyCrOrderReportTOList == null || tallyCrOrderReportTOList.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);

                //excelWorksheet.Cells[1, 1].Value = "Sr.No.";
                //excelWorksheet.Cells[1, 2].Value = "Date";
                //excelWorksheet.Cells[1, 3].Value = "Voucher Type";
                //excelWorksheet.Cells[1, 4].Value = "Dr Ledger Name";
                //excelWorksheet.Cells[1, 5].Value = "Cr Ledger Name";
                //excelWorksheet.Cells[1, 6].Value = "Dr Ledger Amount";
                //excelWorksheet.Cells[1, 7].Value = "Cr Ledger Amount";
                //excelWorksheet.Cells[1, 8].Value = "Narration : [Supplier Name] + [Sauda Name] + [Vehicle Number]";

                //excelWorksheet.Cells[1, 1].Value = "Sr.No.";
                excelWorksheet.Cells[1, 1].Value = "Date";
                excelWorksheet.Cells[1, 2].Value = "Voucher Type";
                excelWorksheet.Cells[1, 3].Value = "Dr Ledger Name";
                excelWorksheet.Cells[1, 4].Value = "Cr Ledger Name";
                excelWorksheet.Cells[1, 5].Value = "Dr Ledger Amount";
                excelWorksheet.Cells[1, 6].Value = "Cr Ledger Amount";
                excelWorksheet.Cells[1, 7].Value = "Narration : [Supplier Name] + [Sauda Name] + [Vehicle Number]";

                excelWorksheet.Cells[1, 1, 1, 8].Style.Font.Bold = true;

                for (int i = 0; i < tallyCrOrderReportTOList.Count; i++)
                {
                    //excelWorksheet.Cells[cellRow, 1].Value = i + 1;
                    //excelWorksheet.Cells[cellRow, 2].Value = tallyCrOrderReportTOList[i].Date;
                    //excelWorksheet.Cells[cellRow, 3].Value = tallyCrOrderReportTOList[i].VoucherType;
                    //excelWorksheet.Cells[cellRow, 4].Value = tallyCrOrderReportTOList[i].DrLedgerName;
                    //excelWorksheet.Cells[cellRow, 5].Value = tallyCrOrderReportTOList[i].CrLedgerName;
                    //excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                    //excelWorksheet.Cells[cellRow, 6].Value = tallyCrOrderReportTOList[i].DrLedgerAmount;
                    //excelWorksheet.Cells[cellRow, 7].Style.Numberformat.Format = "#,##0.000";
                    //excelWorksheet.Cells[cellRow, 7].Value = tallyCrOrderReportTOList[i].CrLedgerAmount; 
                    //excelWorksheet.Cells[cellRow, 8].Value = tallyCrOrderReportTOList[i].Narration;

                    //excelWorksheet.Cells[cellRow, 1].Value = i + 1;
                    excelWorksheet.Cells[cellRow, 1].Value = tallyCrOrderReportTOList[i].Date;
                    excelWorksheet.Cells[cellRow, 2].Value = tallyCrOrderReportTOList[i].VoucherType;
                    excelWorksheet.Cells[cellRow, 3].Value = tallyCrOrderReportTOList[i].DrLedgerName;
                    excelWorksheet.Cells[cellRow, 4].Value = tallyCrOrderReportTOList[i].CrLedgerName;
                    excelWorksheet.Cells[cellRow, 5].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 5].Value = tallyCrOrderReportTOList[i].DrLedgerAmount;
                    excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                    excelWorksheet.Cells[cellRow, 6].Value = tallyCrOrderReportTOList[i].CrLedgerAmount;
                    excelWorksheet.Cells[cellRow, 7].Value = tallyCrOrderReportTOList[i].Narration;

                    cellRow++;

                    if (i == (tallyCrOrderReportTOList.Count - 1))
                    {
                        //excelWorksheet.Cells[cellRow, 5].Value = "Total";
                        //Double drLedgerAmount = tallyCrOrderReportTOList.Sum(ele => ele.DrLedgerAmount);
                        //excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                        //excelWorksheet.Cells[cellRow, 6].Value = drLedgerAmount;
                        //Double crLedgerAmount = tallyCrOrderReportTOList.Sum(ele => ele.CrLedgerAmount);
                        //excelWorksheet.Cells[cellRow, 7].Style.Numberformat.Format = "#,##0.000";
                        //excelWorksheet.Cells[cellRow, 7].Value = crLedgerAmount;

                        excelWorksheet.Cells[cellRow, 4].Value = "Total";
                        Double drLedgerAmount = tallyCrOrderReportTOList.Sum(ele => ele.DrLedgerAmount);
                        excelWorksheet.Cells[cellRow, 5].Style.Numberformat.Format = "#,##0.000";
                        excelWorksheet.Cells[cellRow, 5].Value = drLedgerAmount;
                        Double crLedgerAmount = tallyCrOrderReportTOList.Sum(ele => ele.CrLedgerAmount);
                        excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.000";
                        excelWorksheet.Cells[cellRow, 6].Value = crLedgerAmount;

                        excelWorksheet.Cells[cellRow, 1, cellRow, 8].Style.Font.Bold = true;
                    }

                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 8])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                        range.AutoFitColumns();
                    }
                }

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion

                #region Upload File to Cloud
                TblConfigParamsTO configParamTOForAWS = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.IS_FILE_UPLOAD_TO_AWS);

                String fileName = Constants.ExcelFileNameTallyCrNoteOrder + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "_Recycle_" + ".xlsx";
                var fileStream = excelPackage.GetAsByteArray();

                if (configParamTOForAWS == null || configParamTOForAWS.ConfigParamVal.ToString() == "0")
                {
                    #region Upload File to Azure

                    // Create azure storage  account connection.
                    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                    // Create the blob client.
                    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                    // Retrieve reference to a target container.
                    CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                    CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                    Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                    #endregion
                }
                else
                {
                    #region Upload File to AWS

                    TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
                    if (configParamTOForAWSRecycleBucket == null)
                    {
                        throw new Exception("configParamTOForAWSRecycleBucket == null");
                    }
                    TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
                    if (configParamTOForAWSAccessKey == null)
                    {
                        throw new Exception("configParamTOForAWSAccessKey == null");
                    }
                    TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
                    if (configParamTOForAWSSecretKey == null)
                    {
                        throw new Exception("configParamTOForAWSSecretKey == null");
                    }

                    var result = UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, "");
                    #endregion
                }
                excelPackage.Dispose();

                #endregion

                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempTallyCrNoteOrderExcel");
                return -1;
            }

        }

        public ResultMessage GradeNoteOrderPDetailsToDropbox(string vehicleIds, int cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;

            try
            {

                Int16 mathroundFact = 2;
                double grandBasicGradeAmount = 0;
                double grandTotal = 0;
                double grandRate = 0;


                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummaryForDropbox(vehicleIds, cOrNcId);



                //dynamic ScheduleTOList = new List<dynamic>();
                List<GradeNoteOrderPReportTO> gradeNoteOrderPReportTOList = new List<GradeNoteOrderPReportTO>();

                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {
                    //Prajakta[2019-03-21] Added to get only order vehicles report
                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).ToList();
                    if (tblPurchaseScheduleSummaryTOList == null || tblPurchaseScheduleSummaryTOList.Count == 0)
                        return null;


                    GetSameProdItemsCombinedListForReport(tblPurchaseScheduleSummaryTOList);

                    foreach (var ScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                    {
                        //Prajakta[2019-09-27] Commented to optimize code
                        //if (ScheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS && ScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED)
                        {
                            double totalAmount = 0;
                            double totalQty = 0;
                            double totalBasicGradeAmount = 0;

                            List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(ScheduleSummaryTO.RootScheduleId);

                            if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                            {
                                TblPurchaseInvoiceTO InvoiceTO = InvoiceTOList[0];
                                InvoiceTO.TblPurchaseInvoiceAddrTOList = _iTblPurchaseInvoiceAddrDAO.SelectAllTblPurchaseInvoiceAddr(InvoiceTO.IdInvoicePurchase);

                                string configParamName = Constants.CP_SCRAP_OTHER_TAXES_FOR_TCS_IN_GRADE_NOTE;
                                TblConfigParamsTO configParamsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(configParamName);
                                if (configParamsTO != null)
                                {
                                    List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOList = _iTblPurchaseInvoiceItemDetailsDAO.SelectAllTblPurchaseInvoiceItemDetails(InvoiceTO.IdInvoicePurchase);
                                    if (purchaseInvoiceItemDetailsTOList != null && purchaseInvoiceItemDetailsTOList.Count > 0)
                                    {
                                        List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOListTemp = purchaseInvoiceItemDetailsTOList.Where(w => configParamsTO.ConfigParamVal.Contains(w.OtherTaxId.ToString())).ToList();
                                        if (purchaseInvoiceItemDetailsTOListTemp != null && purchaseInvoiceItemDetailsTOListTemp.Count > 0)
                                        {
                                            foreach (var arr in purchaseInvoiceItemDetailsTOListTemp)
                                            {
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TCS)
                                                {
                                                    InvoiceTO.TcsAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.OTHER_EXPENCES)
                                                {
                                                    InvoiceTO.OtherExpAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TRANSPORTER_ADVANCE)
                                                {
                                                    InvoiceTO.TransportorAdvAmt = arr.TaxableAmt;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                                {
                                    foreach (var DetailsTO in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                                    {
                                        GradeNoteOrderPReportTO gradeNoteOrderPReportTO = new GradeNoteOrderPReportTO();
                                        //dynamic ScheduleTO = new JObject();
                                        //Prajakta[2019-06-06] Commented and added
                                        //ScheduleTO.Date = ScheduleSummaryTO.CreatedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                        gradeNoteOrderPReportTO.Date = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                        gradeNoteOrderPReportTO.TruckNo = ScheduleSummaryTO.VehicleNo;
                                        if (InvoiceTO.TblPurchaseInvoiceAddrTOList != null && InvoiceTO.TblPurchaseInvoiceAddrTOList.Count > 0)
                                        {
                                            gradeNoteOrderPReportTO.SupplierName = InvoiceTO.TblPurchaseInvoiceAddrTOList[0].BillingPartyName;
                                        }
                                        else
                                        {
                                            gradeNoteOrderPReportTO.SupplierName = "";
                                        }
                                        gradeNoteOrderPReportTO.Pm = ScheduleSummaryTO.PurchaseManager;
                                        gradeNoteOrderPReportTO.Location = ScheduleSummaryTO.Location;
                                        gradeNoteOrderPReportTO.Grade = DetailsTO.ItemName;
                                        gradeNoteOrderPReportTO.Qty = DetailsTO.Qty;
                                        totalQty = totalQty + DetailsTO.Qty;
                                        //ScheduleTO.Rate = String.Format("{0:n}", DetailsTO.Rate);
                                        gradeNoteOrderPReportTO.Rate = Math.Round(DetailsTO.Rate, mathroundFact);
                                        totalAmount = totalAmount + DetailsTO.Rate;
                                        //ScheduleTO.BasicGradeAmount = String.Format("{0:n}", DetailsTO.Qty * DetailsTO.Rate);
                                        gradeNoteOrderPReportTO.BasicGradeAmount = Math.Round((DetailsTO.Qty * DetailsTO.Rate), mathroundFact);
                                        totalBasicGradeAmount = Math.Round(totalBasicGradeAmount + (DetailsTO.Qty * DetailsTO.Rate), mathroundFact);
                                        gradeNoteOrderPReportTO.CGST = "";
                                        gradeNoteOrderPReportTO.SGST = "";
                                        gradeNoteOrderPReportTO.IGST = "";
                                        gradeNoteOrderPReportTO.TotalTax = "";
                                        gradeNoteOrderPReportTO.Tcs = "";
                                        gradeNoteOrderPReportTO.TotalAmountToBePaidToParty = "";
                                        gradeNoteOrderPReportTO.InvoiceAmount = "";
                                        gradeNoteOrderPReportTO.Freight = "";
                                        gradeNoteOrderPReportTO.BalanceAmountRs = "";
                                        gradeNoteOrderPReportTO.BillNoAndDate = "";
                                        gradeNoteOrderPReportTO.EWayBillNo = "";
                                        gradeNoteOrderPReportTO.EWayBillDate = "";

                                        gradeNoteOrderPReportTO.Narration = ScheduleSummaryTO.Narration;
                                        gradeNoteOrderPReportTO.PartyName = ScheduleSummaryTO.SupplierName;

                                        gradeNoteOrderPReportTOList.Add(gradeNoteOrderPReportTO);
                                    }
                                }
                                GradeNoteOrderPReportTO gradeNoteOrderPReportTO1 = new GradeNoteOrderPReportTO();
                                //dynamic ScheduleTO1 = new JObject();
                                //ScheduleTO1.Date = ScheduleSummaryTO.CreatedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                gradeNoteOrderPReportTO1.Date = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                //ScheduleTO1.TruckNo = ScheduleSummaryTO.VehicleNo;
                                gradeNoteOrderPReportTO1.TruckNo = ScheduleSummaryTO.VehicleNo + " Total";
                                gradeNoteOrderPReportTO1.SupplierName = "";
                                gradeNoteOrderPReportTO1.Pm = "";
                                gradeNoteOrderPReportTO1.Location = "";
                                gradeNoteOrderPReportTO1.Grade = "";
                                gradeNoteOrderPReportTO1.Qty = totalQty;
                                grandTotal += totalQty;
                                grandRate += Math.Round(totalAmount, mathroundFact);
                                grandBasicGradeAmount += Math.Round(totalBasicGradeAmount, mathroundFact);
                                //ScheduleTO1.Rate = String.Format("{0:n}", totalAmount);
                                gradeNoteOrderPReportTO1.Rate = Math.Round(totalAmount, mathroundFact);
                                //ScheduleTO1.BasicGradeAmount = String.Format("{0:n}", totalBasicGradeAmount);
                                gradeNoteOrderPReportTO1.BasicGradeAmount = Math.Round(totalBasicGradeAmount, mathroundFact);
                                //ScheduleTO1.CGST = String.Format("{0:n}", InvoiceTO.CgstAmt);
                                gradeNoteOrderPReportTO1.CGST = String.Format("{0:00}", InvoiceTO.CgstAmt);
                                //ScheduleTO1.SGST = String.Format("{0:n}", InvoiceTO.SgstAmt);
                                gradeNoteOrderPReportTO1.SGST = String.Format("{0:00}", InvoiceTO.SgstAmt);
                                //ScheduleTO1.IGST = String.Format("{0:n}", InvoiceTO.IgstAmt);
                                gradeNoteOrderPReportTO1.IGST = String.Format("{0:00}", InvoiceTO.IgstAmt);

                                //ScheduleTO1.TotalTaxes = String.Format("{0:n}", InvoiceTO.CgstAmt + InvoiceTO.SgstAmt + InvoiceTO.IgstAmt);
                                double totaltx = InvoiceTO.CgstAmt + InvoiceTO.SgstAmt + InvoiceTO.IgstAmt;
                                totaltx = Math.Round(totaltx, mathroundFact);
                                gradeNoteOrderPReportTO1.TotalTax = String.Format("{0:00}", totaltx);

                                //ScheduleTO1.TCS = String.Format("{0:n}", InvoiceTO.TcsAmt);
                                gradeNoteOrderPReportTO1.Tcs = String.Format("{0:00}", InvoiceTO.TcsAmt);

                                //ScheduleTO1.TotalAmountToBePaidToParty = String.Format("{0:n}", totalBasicGradeAmount + totaltx + InvoiceTO.TcsAmt);

                                double TotalAmountToBePaidToParty = Math.Round(totalBasicGradeAmount + totaltx + InvoiceTO.TcsAmt, mathroundFact);
                                gradeNoteOrderPReportTO1.TotalAmountToBePaidToParty = String.Format("{0:00}", TotalAmountToBePaidToParty);

                                //ScheduleTO1.InvoiceAmount = String.Format("{0:n}", InvoiceTO.GrandTotal);
                                gradeNoteOrderPReportTO1.InvoiceAmount = String.Format("{0:00}", InvoiceTO.GrandTotal);
                                gradeNoteOrderPReportTO1.Freight = String.Format("{0:00}", ScheduleSummaryTO.FreightAmount);
                                //ScheduleTO1.BalanceAmountRs = String.Format("{0:n}", InvoiceTO.GrandTotal - TotalAmountToBePaidToParty);
                                Double BasicAmount = Math.Round((InvoiceTO.GrandTotal - TotalAmountToBePaidToParty) + ScheduleSummaryTO.FreightAmount, mathroundFact);

                                //ScheduleTO1["Balance Amount Rs"] = Math.Round((InvoiceTO.GrandTotal + ScheduleSummaryTO.FreightAmount) - TotalAmountToBePaidToParty, 2);
                                gradeNoteOrderPReportTO1.BalanceAmountRs = String.Format("{0:00}", BasicAmount);
                                gradeNoteOrderPReportTO1.BillNoAndDate = InvoiceTO.InvoiceNo + "/" + InvoiceTO.InvoiceDate.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                gradeNoteOrderPReportTO1.EWayBillNo = InvoiceTO.ElectronicRefNo;
                                gradeNoteOrderPReportTO1.EWayBillDate = InvoiceTO.EwayBillDate.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                //ScheduleTO1.Freight = String.Format("{0:n}", InvoiceTO.FreightAmt);


                                gradeNoteOrderPReportTO1.Narration = ScheduleSummaryTO.Narration;
                                gradeNoteOrderPReportTO1.PartyName = ScheduleSummaryTO.SupplierName;
                                /* if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                                 {
                                     ScheduleTO1["Bill Type"] = "Enquiry";
                                 }
                                 else if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                                 {
                                     ScheduleTO1["Bill Type"] = "Order";
                                 }*/


                                gradeNoteOrderPReportTOList.Add(gradeNoteOrderPReportTO1);
                                // dynamic ScheduleTO3 = new JObject();
                                // ScheduleTOList.Add(ScheduleTO3);
                            }

                        }
                    }
                    //GradeNoteOrderPReportTO gradeNoteOrderPReportTO2 = new GradeNoteOrderPReportTO();
                    ////dynamic ScheduleTO2 = new JObject();
                    //gradeNoteOrderPReportTO2.Date = "Grand total";
                    //gradeNoteOrderPReportTO2.TruckNo = "";
                    ////ScheduleTO2.TruckNo = "";
                    //gradeNoteOrderPReportTO2.SupplierName = "";
                    //gradeNoteOrderPReportTO2.Pm = "";
                    //gradeNoteOrderPReportTO2.Location = "";
                    //gradeNoteOrderPReportTO2.Grade = "";
                    //gradeNoteOrderPReportTO2.Qty = Math.Round(grandTotal, mathroundFact);
                    //// grandTotal = +totalQty;
                    //// grandRate = +Math.Round(totalAmount, mathroundFact);
                    //// grandBasicGradeAmount = +Math.Round(totalBasicGradeAmount, mathroundFact);
                    ////ScheduleTO1.Rate = String.Format("{0:n}", totalAmount);
                    //gradeNoteOrderPReportTO2.Rate = Math.Round(grandRate, mathroundFact);
                    ////ScheduleTO1.BasicGradeAmount = String.Format("{0:n}", grandBasicGradeAmount);
                    //gradeNoteOrderPReportTO2.BasicGradeAmount = Math.Round(grandBasicGradeAmount, mathroundFact);
                    ////ScheduleTO1.CGST = String.Format("{0:n}", InvoiceTO.CgstAmt);
                    //gradeNoteOrderPReportTO2.CGST = "";
                    ////ScheduleTO1.SGST = String.Format("{0:n}", InvoiceTO.SgstAmt);
                    //gradeNoteOrderPReportTO2.SGST = "";
                    ////ScheduleTO1.IGST = String.Format("{0:n}", InvoiceTO.IgstAmt);
                    //gradeNoteOrderPReportTO2.IGST = "";

                    ////ScheduleTO1.TotalTaxes = String.Format("{0:n}", InvoiceTO.CgstAmt + InvoiceTO.SgstAmt + InvoiceTO.IgstAmt);
                    //gradeNoteOrderPReportTO2.TotalTax = "";

                    ////ScheduleTO1.TCS = String.Format("{0:n}", InvoiceTO.TcsAmt);
                    //gradeNoteOrderPReportTO2.Tcs = "";

                    ////ScheduleTO1.TotalAmountToBePaidToParty = String.Format("{0:n}", totalBasicGradeAmount + totaltx + InvoiceTO.TcsAmt);
                    //gradeNoteOrderPReportTO2.TotalAmountToBePaidToParty = "";

                    //// double TotalAmountToBePaidToParty = Math.Round(totalBasicGradeAmount + totaltx + InvoiceTO.TcsAmt, mathroundFact);
                    ////ScheduleTO1.InvoiceAmount = String.Format("{0:n}", InvoiceTO.GrandTotal);
                    //gradeNoteOrderPReportTO2.InvoiceAmount = "";
                    //gradeNoteOrderPReportTO2.Freight = "";
                    ////ScheduleTO1.BalanceAmountRs = String.Format("{0:n}", InvoiceTO.GrandTotal - TotalAmountToBePaidToParty);
                    //gradeNoteOrderPReportTO2.BalanceAmountRs = "";

                    //gradeNoteOrderPReportTO2.BillNoAndDate = "";
                    //gradeNoteOrderPReportTO2.EWayBillNo = "";
                    //gradeNoteOrderPReportTO2.EWayBillDate = "";
                    ////ScheduleTO1.Freight = String.Format("{0:n}", InvoiceTO.FreightAmt);


                    //gradeNoteOrderPReportTO2.Narration = "";

                    //gradeNoteOrderPReportTO2.PartyName = "";


                    //gradeNoteOrderPReportTOList.Add(gradeNoteOrderPReportTO2);                    
                }

                if (gradeNoteOrderPReportTOList == null || gradeNoteOrderPReportTOList.Count == 0)
                {
                    return null;
                }

                //crete file and uplod res
                result = CreateTempGradeNoteOrderPExcel(gradeNoteOrderPReportTOList);
                if (result != 1)
                {
                    //tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.DefaultExceptionBehaviour(ex, "GradeNoteOrderPDetailsToDropbox");
                return resultMessage;
            }
            return resultMessage;
        }

        public int CreateTempGradeNoteOrderPExcel(List<GradeNoteOrderPReportTO> gradeNoteOrderPReportTOList)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (gradeNoteOrderPReportTOList == null || gradeNoteOrderPReportTOList.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);

                excelWorksheet.Cells[1, 1].Value = "DATE";
                excelWorksheet.Cells[1, 2].Value = "TRUCKNO";
                excelWorksheet.Cells[1, 3].Value = "SUPPLIER NAME";
                excelWorksheet.Cells[1, 4].Value = "PM";
                excelWorksheet.Cells[1, 5].Value = "LOCATION";
                excelWorksheet.Cells[1, 6].Value = "GRADE";
                excelWorksheet.Cells[1, 7].Value = "QTY";
                excelWorksheet.Cells[1, 8].Value = "RATE";
                excelWorksheet.Cells[1, 9].Value = "BASIC GRADE AMOUNT";
                excelWorksheet.Cells[1, 10].Value = "CGST";
                excelWorksheet.Cells[1, 11].Value = "SGST";
                excelWorksheet.Cells[1, 12].Value = "IGST";
                excelWorksheet.Cells[1, 13].Value = "TOTAL TAXES";
                excelWorksheet.Cells[1, 14].Value = "TCS";
                excelWorksheet.Cells[1, 15].Value = "TOTAL AMOUNT TO BE PAID TO PARTY";
                excelWorksheet.Cells[1, 16].Value = "INVOICE AMOUNT";
                excelWorksheet.Cells[1, 17].Value = "FREIGHT";
                excelWorksheet.Cells[1, 18].Value = "BALANCE AMOUNT RS";
                excelWorksheet.Cells[1, 19].Value = "BILLNO AND DATE";
                excelWorksheet.Cells[1, 20].Value = "E-WAY BILL NO";
                excelWorksheet.Cells[1, 21].Value = "E_WAY BILL DATE";
                excelWorksheet.Cells[1, 22].Value = "NARRATION REMARK";
                excelWorksheet.Cells[1, 23].Value = "Party Name";

                excelWorksheet.Cells[1, 1, 1, 23].Style.Font.Bold = true;

                for (int i = 0; i < gradeNoteOrderPReportTOList.Count; i++)
                {
                    excelWorksheet.Cells[cellRow, 1].Value = gradeNoteOrderPReportTOList[i].Date;
                    excelWorksheet.Cells[cellRow, 2].Value = gradeNoteOrderPReportTOList[i].TruckNo;
                    excelWorksheet.Cells[cellRow, 3].Value = gradeNoteOrderPReportTOList[i].SupplierName;
                    excelWorksheet.Cells[cellRow, 4].Value = gradeNoteOrderPReportTOList[i].Pm;
                    excelWorksheet.Cells[cellRow, 5].Value = gradeNoteOrderPReportTOList[i].Location;
                    excelWorksheet.Cells[cellRow, 6].Value = gradeNoteOrderPReportTOList[i].Grade;
                    excelWorksheet.Cells[cellRow, 7].Value = gradeNoteOrderPReportTOList[i].Qty;
                    excelWorksheet.Cells[cellRow, 8].Value = gradeNoteOrderPReportTOList[i].Rate;
                    excelWorksheet.Cells[cellRow, 9].Value = gradeNoteOrderPReportTOList[i].BasicGradeAmount;
                    excelWorksheet.Cells[cellRow, 10].Value = gradeNoteOrderPReportTOList[i].CGST;
                    excelWorksheet.Cells[cellRow, 11].Value = gradeNoteOrderPReportTOList[i].SGST;
                    excelWorksheet.Cells[cellRow, 12].Value = gradeNoteOrderPReportTOList[i].IGST;
                    excelWorksheet.Cells[cellRow, 13].Value = gradeNoteOrderPReportTOList[i].TotalTax;
                    excelWorksheet.Cells[cellRow, 14].Value = gradeNoteOrderPReportTOList[i].Tcs;
                    excelWorksheet.Cells[cellRow, 15].Value = gradeNoteOrderPReportTOList[i].TotalAmountToBePaidToParty;
                    excelWorksheet.Cells[cellRow, 16].Value = gradeNoteOrderPReportTOList[i].InvoiceAmount;
                    excelWorksheet.Cells[cellRow, 17].Value = gradeNoteOrderPReportTOList[i].Freight;
                    excelWorksheet.Cells[cellRow, 18].Value = gradeNoteOrderPReportTOList[i].BalanceAmountRs;
                    excelWorksheet.Cells[cellRow, 19].Value = gradeNoteOrderPReportTOList[i].BillNoAndDate;
                    excelWorksheet.Cells[cellRow, 20].Value = gradeNoteOrderPReportTOList[i].EWayBillNo;
                    excelWorksheet.Cells[cellRow, 21].Value = gradeNoteOrderPReportTOList[i].EWayBillDate;
                    excelWorksheet.Cells[cellRow, 22].Value = gradeNoteOrderPReportTOList[i].Narration;
                    excelWorksheet.Cells[cellRow, 23].Value = gradeNoteOrderPReportTOList[i].PartyName;

                    cellRow++;

                    if (i == (gradeNoteOrderPReportTOList.Count - 1))
                    {
                        excelWorksheet.Cells[cellRow, 1].Value = "Grand Total";
                        excelWorksheet.Cells[cellRow, 7].Value = Math.Round((gradeNoteOrderPReportTOList.Sum(ele => ele.Qty)), 2);
                        excelWorksheet.Cells[cellRow, 8].Value = Math.Round((gradeNoteOrderPReportTOList.Sum(ele => ele.Rate)), 2);
                        excelWorksheet.Cells[cellRow, 9].Value = Math.Round((gradeNoteOrderPReportTOList.Sum(ele => ele.BasicGradeAmount)), 2);

                        excelWorksheet.Cells[cellRow, 1, cellRow, 23].Style.Font.Bold = true;
                    }

                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 23])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                    }
                }

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion

                #region Upload File to Azure

                // Create azure storage  account connection.
                CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                // Create the blob client.
                CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                // Retrieve reference to a target container.
                CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                String fileName = Constants.ExcelFileNameGradeNoteOrderP + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "-R" + ".xlsx";
                CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                var fileStream = excelPackage.GetAsByteArray();

                Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                excelPackage.Dispose();
                #endregion

                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempGradeNoteOrderPExcel");
                return -1;
            }

        }

        public DataSet GetListOfMasterReportForDropbox(string vehicleIds, int cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;

            Boolean isTakeNonCommercialQty = false;
            Double conversionFact = 1000;
            Int16 mathroundFact = 3;

            //dynamic totalSchTO;
            DataTable totalSchTO;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummaryForMasterReportForDropbox(vehicleIds, cOrNcId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                GetSameProdItemsCombinedListForReportByItemName(tblPurchaseScheduleSummaryTOList);

                //if (masterReportTypeE == (Int32)Constants.MasterReportTypeE.UNLOADING_DATE_REPORT)
                //    GetUnloadingPadtaDtlsForVehSche(tblPurchaseScheduleSummaryTOList);

                ////Prajakta[2020-06-10]Added to add non commercial qty on basis of configuration
                //TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_NONCOMMERCIAL_QTY_FOR_WEIGHTED_RATE);
                //if (tblConfigParamsTO != null)
                //{
                //    if (tblConfigParamsTO.ConfigParamVal == "1")
                //    {
                //        isTakeNonCommercialQty = true;
                //    }
                //    else
                //    {
                //        isTakeNonCommercialQty = false;
                //    }
                //}

                List<TblProductItemTO> prodItemTOList = getListOfGrades(Constants.ItemProdCategoryE.SCRAP_OR_WASTE);
                foreach (var item in prodItemTOList)
                {
                    item.ItemName = item.ItemName.Trim();
                }
                prodItemTOList = prodItemTOList.GroupBy(x => new { x.ItemName }).Select(s => s.FirstOrDefault()).ToList();
                if (prodItemTOList != null && prodItemTOList.Count > 0)
                {
                    //dynamic ScheduleTOList = new List<dynamic>();
                    DataSet ScheduleTOList = new DataSet();

                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.OrderBy(g => g.SupplierName).ToList();

                    String previousSuppName = String.Empty;
                    totalSchTO = new DataTable();

                    foreach (var ScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                    {

                        //List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(ScheduleSummaryTO.RootScheduleId);

                        //if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                        //{
                        //    TblPurchaseInvoiceTO InvoiceTO = InvoiceTOList[0];
                        //    InvoiceTO.TblPurchaseInvoiceAddrTOList = _iTblPurchaseInvoiceAddrDAO.SelectAllTblPurchaseInvoiceAddr(InvoiceTO.IdInvoicePurchase);
                        //    if (InvoiceTO.TblPurchaseInvoiceAddrTOList != null && InvoiceTO.TblPurchaseInvoiceAddrTOList.Count > 0 && ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        //    {
                        //        ScheduleSummaryTO.SupplierName = InvoiceTO.TblPurchaseInvoiceAddrTOList[0].BillingPartyName;
                        //    }
                        //}



                        //if (masterReportTypeE == (Int32)Constants.MasterReportTypeE.UNLOADING_DATE_PADTA_REPORT)
                        //{
                        //    List<DropDownTO> dropDownTOList = GetBaseMetalCostList(ScheduleSummaryTO.RootScheduleId);
                        //    if (dropDownTOList != null && dropDownTOList.Count > 0)
                        //    {
                        //        if (dropDownTOList[0].Tag != null && dropDownTOList[0].Tag.GetType() == typeof(TblBaseItemMetalCostTO))
                        //        {
                        //            TblBaseItemMetalCostTO tblBaseItemMetalCostTO = (TblBaseItemMetalCostTO)dropDownTOList[0].Tag;

                        //            if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                        //                ScheduleSummaryTO.BaseMetalCost = tblBaseItemMetalCostTO.BaseMetalCostForC;
                        //            else if (ScheduleSummaryTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                        //                ScheduleSummaryTO.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForNC;
                        //        }

                        //    }
                        //}

                        if (!String.IsNullOrEmpty(previousSuppName))
                        {
                            if (previousSuppName != ScheduleSummaryTO.SupplierName)
                            {
                                //dynamic totalSchTOTemp = new JObject();
                                DataTable totalSchTOTemp = new DataTable();
                                totalSchTOTemp = totalSchTO;
                                ScheduleTOList.Tables.Add(totalSchTOTemp);
                                //ScheduleTOList.Merge(totalSchTOTemp);
                                previousSuppName = ScheduleSummaryTO.SupplierName;
                                totalSchTO = new DataTable();
                            }
                        }
                        else
                        {
                            previousSuppName = ScheduleSummaryTO.SupplierName;
                        }

                        //dynamic ScheduleTO = new JObject();
                        DataTable ScheduleTO = new DataTable();
                        DataColumnCollection columns = ScheduleTO.Columns;
                        DataRow dr = ScheduleTO.NewRow();
                        String columnNameDate = "Date";
                        if (!columns.Contains(columnNameDate))
                        {
                            ScheduleTO.Columns.Add(columnNameDate, typeof(string));
                        }

                        dr[columnNameDate] = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameTruckNo = "TruckNo";
                        if (!columns.Contains(columnNameTruckNo))
                        {
                            ScheduleTO.Columns.Add(columnNameTruckNo, typeof(string));
                        }

                        dr[columnNameTruckNo] = ScheduleSummaryTO.VehicleNo;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameBroker = "Broker";
                        if (!columns.Contains(columnNameBroker))
                        {
                            ScheduleTO.Columns.Add(columnNameBroker, typeof(string));
                        }

                        dr[columnNameBroker] = ScheduleSummaryTO.SupplierName;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameLocation = "Location";
                        if (!columns.Contains(columnNameLocation))
                        {
                            ScheduleTO.Columns.Add(columnNameLocation, typeof(string));
                        }

                        dr[columnNameLocation] = ScheduleSummaryTO.Location;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameParty = "Party";
                        if (!columns.Contains(columnNameParty))
                        {
                            ScheduleTO.Columns.Add(columnNameParty, typeof(string));
                        }

                        dr[columnNameParty] = ScheduleSummaryTO.SupplierName;
                        //ScheduleTO.Rows.Add(dr);


                        String columnNameVehicleTypeName = "Vehicle Type";
                        if (!columns.Contains(columnNameVehicleTypeName))
                        {
                            ScheduleTO.Columns.Add(columnNameVehicleTypeName, typeof(string));
                        }

                        dr[columnNameVehicleTypeName] = ScheduleSummaryTO.VehicleTypeName;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameRemark = "Remark";
                        if (!columns.Contains(columnNameRemark))
                        {
                            ScheduleTO.Columns.Add(columnNameRemark, typeof(string));
                        }

                        dr[columnNameRemark] = "Qty";
                        //ScheduleTO.Rows.Add(dr);

                        double amount = 0;
                        double Qty = 0;

                        DataColumnCollection columnstotalSchTO = totalSchTO.Columns;
                        DataRow drtotalSchTO = totalSchTO.NewRow();
                        String colNmDate = "Date";
                        if (!columnstotalSchTO.Contains(colNmDate))
                        {
                            totalSchTO.Columns.Add(colNmDate, typeof(string));
                        }

                        drtotalSchTO[colNmDate] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmTruckNo = "TruckNo";
                        if (!columnstotalSchTO.Contains(colNmTruckNo))
                        {
                            totalSchTO.Columns.Add(colNmTruckNo, typeof(string));
                        }

                        drtotalSchTO[colNmTruckNo] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmBroker = "Broker";
                        if (!columnstotalSchTO.Contains(colNmBroker))
                        {
                            totalSchTO.Columns.Add(colNmBroker, typeof(string));
                        }

                        drtotalSchTO[colNmBroker] = ScheduleSummaryTO.SupplierName; ;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmLocation = "Location";
                        if (!columnstotalSchTO.Contains(colNmLocation))
                        {
                            totalSchTO.Columns.Add(colNmLocation, typeof(string));
                        }

                        drtotalSchTO[colNmLocation] = "Total";
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmParty = "Party";
                        if (!columnstotalSchTO.Contains(colNmParty))
                        {
                            totalSchTO.Columns.Add(colNmParty, typeof(string));
                        }

                        drtotalSchTO[colNmParty] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);


                        String colNmVehicleTypeName = "Vehicle Type";
                        if (!columnstotalSchTO.Contains(colNmVehicleTypeName))
                        {
                            totalSchTO.Columns.Add(colNmVehicleTypeName, typeof(string));
                        }

                        drtotalSchTO[colNmVehicleTypeName] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmRemark = "Remark";
                        if (!columnstotalSchTO.Contains(colNmRemark))
                        {
                            totalSchTO.Columns.Add(colNmRemark, typeof(string));
                        }

                        drtotalSchTO[colNmRemark] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        foreach (var prodItemTO in prodItemTOList)
                        {
                            String columnNameprodItemTOItemName = prodItemTO.ItemName;
                            if (!columns.Contains(columnNameprodItemTOItemName))
                            {
                                ScheduleTO.Columns.Add(columnNameprodItemTOItemName, typeof(string));
                            }
                            dr[columnNameprodItemTOItemName] = "";
                            //ScheduleTO.Rows.Add(dr);

                            TblPurchaseVehicleDetailsTO DetailsTO = ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(w => w.ItemName == prodItemTO.ItemName).FirstOrDefault();

                            if (DetailsTO != null)
                            {
                                //ScheduleTO[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = String.Format("{0:0.000}", DetailsTO.Qty);
                                dr[columnNameprodItemTOItemName] = String.Format("{0:0.000}", DetailsTO.Qty);
                                //ScheduleTO.Rows.Add(dr);

                                double ScheduleTOItemQty = 0, totalSchTOItemQty = 0, totalSchTOItemQtyTotal = 0;

                                object val = dr[columnNameprodItemTOItemName];
                                if (val == DBNull.Value)
                                {
                                    ScheduleTOItemQty = 0;
                                }
                                else
                                {
                                    ScheduleTOItemQty = Convert.ToDouble(dr[columnNameprodItemTOItemName]);
                                }

                                if (!columnstotalSchTO.Contains(columnNameprodItemTOItemName))
                                {
                                    totalSchTO.Columns.Add(columnNameprodItemTOItemName, typeof(string));
                                }

                                if (drtotalSchTO[columnNameprodItemTOItemName] == null)
                                {
                                    totalSchTOItemQty = 0;
                                }
                                else
                                {
                                    object val1 = drtotalSchTO[columnNameprodItemTOItemName];
                                    if (val1 == DBNull.Value)
                                    {
                                        totalSchTOItemQty = 0;
                                    }
                                    else
                                    {
                                        totalSchTOItemQty = Convert.ToDouble(drtotalSchTO[columnNameprodItemTOItemName]);
                                    }

                                }

                                totalSchTOItemQtyTotal = ((ScheduleTOItemQty) + (totalSchTOItemQty));
                                drtotalSchTO[columnNameprodItemTOItemName] = String.Format("{0:0.000}", totalSchTOItemQtyTotal);
                                //totalSchTO.Rows.Add(drtotalSchTO);
                            }
                            else
                            {
                                String columnNameprodItemTOItemName1 = prodItemTO.ItemName;
                                if (!columns.Contains(columnNameprodItemTOItemName1))
                                {
                                    ScheduleTO.Columns.Add(columnNameprodItemTOItemName1, typeof(string));
                                }
                                dr[columnNameprodItemTOItemName1] = "";
                                //ScheduleTO.Rows.Add(dr);


                                double totalSchTOElseItemQty = 0;

                                if (!columnstotalSchTO.Contains(columnNameprodItemTOItemName1))
                                {
                                    totalSchTO.Columns.Add(columnNameprodItemTOItemName1, typeof(string));
                                }

                                if (drtotalSchTO[columnNameprodItemTOItemName1] == null)
                                {
                                    totalSchTOElseItemQty = 0;
                                }
                                else
                                {
                                    object val2 = drtotalSchTO[columnNameprodItemTOItemName1];
                                    if (val2 == DBNull.Value)
                                    {
                                        totalSchTOElseItemQty = 0;
                                    }
                                    else
                                    {
                                        totalSchTOElseItemQty = Convert.ToDouble(drtotalSchTO[columnNameprodItemTOItemName1]);
                                    }

                                }

                                drtotalSchTO[columnNameprodItemTOItemName] = String.Format("{0:0.000}", totalSchTOElseItemQty);
                                //totalSchTO.Rows.Add(drtotalSchTO);
                            }
                        }

                        foreach (var detailsTo in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TblProductItemTO prodItemTO = prodItemTOList.Where(w => w.ItemName == detailsTo.ItemName).FirstOrDefault();

                            if (prodItemTO != null)
                            {

                            }
                            else
                            {

                                String columnNameDetailsProdItem = detailsTo.ItemName;
                                if (!columns.Contains(columnNameDetailsProdItem))
                                {
                                    ScheduleTO.Columns.Add(columnNameDetailsProdItem, typeof(string));
                                }

                                dr[columnNameDetailsProdItem] = String.Format("{0:0.000}", detailsTo.Qty);
                                //ScheduleTO.Rows.Add(dr);                                 

                                double ScheduleTODItemQty = 0, totalSchTODItemQty = 0, totalSchTODItemQtyTotal = 0;

                                object val3 = dr[columnNameDetailsProdItem];
                                if (val3 == DBNull.Value)
                                {
                                    ScheduleTODItemQty = 0;
                                }
                                else
                                {
                                    ScheduleTODItemQty = Convert.ToDouble(dr[columnNameDetailsProdItem]);
                                }

                                if (!columnstotalSchTO.Contains(columnNameDetailsProdItem))
                                {
                                    totalSchTO.Columns.Add(columnNameDetailsProdItem, typeof(string));
                                }

                                if (drtotalSchTO[columnNameDetailsProdItem] == null)
                                {
                                    totalSchTODItemQty = 0;
                                }
                                else
                                {
                                    object val4 = drtotalSchTO[columnNameDetailsProdItem];
                                    if (val4 == DBNull.Value)
                                    {
                                        totalSchTODItemQty = 0;
                                    }
                                    else
                                    {
                                        totalSchTODItemQty = Convert.ToDouble(drtotalSchTO[columnNameDetailsProdItem]);
                                    }
                                }

                                totalSchTODItemQtyTotal = ((ScheduleTODItemQty) + (totalSchTODItemQty));
                                drtotalSchTO[columnNameDetailsProdItem] = (String.Format("{0:0.000}", totalSchTODItemQtyTotal));
                                //totalSchTO.Rows.Add(drtotalSchTO);
                            }
                        }

                        double TotalAmount = 0;
                        foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TotalAmount += (item.Qty * item.Rate) / conversionFact;
                        }

                        String columnNameTotalQty = "Total Qty";
                        if (!columns.Contains(columnNameTotalQty))
                        {
                            ScheduleTO.Columns.Add(columnNameTotalQty, typeof(string));
                        }

                        dr[columnNameTotalQty] = String.Format("{0:0.000}", ScheduleSummaryTO.Qty);
                        //ScheduleTO.Rows.Add(dr);                        

                        double ScheduleTOQty = 0, totalSchTOQty = 0, totalSchTOQtyTotal = 0;

                        object val5 = dr[columnNameTotalQty];
                        if (val5 == DBNull.Value)
                        {
                            ScheduleTOQty = 0;
                        }
                        else
                        {
                            ScheduleTOQty = Convert.ToDouble(dr[columnNameTotalQty]);
                        }

                        if (!columnstotalSchTO.Contains(columnNameTotalQty))
                        {
                            totalSchTO.Columns.Add(columnNameTotalQty, typeof(string));
                        }

                        if (drtotalSchTO[columnNameTotalQty] == null)
                        {
                            totalSchTOQty = 0;
                        }
                        else
                        {
                            object val6 = drtotalSchTO[columnNameTotalQty];
                            if (val6 == DBNull.Value)
                            {
                                totalSchTOQty = 0;
                            }
                            else
                            {
                                totalSchTOQty = Convert.ToDouble(drtotalSchTO[columnNameTotalQty]);
                            }
                        }
                        totalSchTOQtyTotal = ((totalSchTOQty) + (ScheduleTOQty));
                        drtotalSchTO[columnNameTotalQty] = String.Format("{0:0.000}", totalSchTOQtyTotal);
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String columnNameAmount = "Amount";
                        if (!columns.Contains(columnNameAmount))
                        {
                            ScheduleTO.Columns.Add(columnNameAmount, typeof(string));
                        }
                        if (TotalAmount > 0)
                            dr[columnNameAmount] = Math.Round(TotalAmount, 3);
                        else
                            dr[columnNameAmount] = "";
                        //ScheduleTO.Rows.Add(dr);

                        double ScheduleTOAmt = 0, totalSchTOAmt = 0;

                        object val7 = dr[columnNameAmount];
                        if (val7 == DBNull.Value)
                        {
                            ScheduleTOAmt = 0;
                        }
                        else
                        {
                            ScheduleTOAmt = Convert.ToDouble(dr[columnNameAmount]);
                        }

                        if (!columnstotalSchTO.Contains(columnNameAmount))
                        {
                            totalSchTO.Columns.Add(columnNameAmount, typeof(string));
                        }
                        if (drtotalSchTO[columnNameAmount] == null)
                        {
                            totalSchTOAmt = 0;
                        }
                        else
                        {
                            object val8 = drtotalSchTO[columnNameAmount];
                            if (val8 == DBNull.Value)
                            {
                                totalSchTOAmt = 0;
                            }
                            else
                            {
                                totalSchTOAmt = Convert.ToDouble(drtotalSchTO[columnNameAmount]);
                            }
                        }

                        drtotalSchTO[columnNameAmount] = ((ScheduleTOAmt) + (totalSchTOAmt));
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String columnNameTodayRate = "Todays Rate";
                        if (!columns.Contains(columnNameTodayRate))
                        {
                            ScheduleTO.Columns.Add(columnNameTodayRate, typeof(string));
                        }
                        dr[columnNameTodayRate] = ScheduleSummaryTO.RateForNC / conversionFact;
                        //ScheduleTO.Rows.Add(dr);                        

                        if (ScheduleSummaryTO.COrNcId > 0)
                        {
                            dr[columnNameTodayRate] = ScheduleSummaryTO.RateForC / conversionFact;
                            //ScheduleTO.Rows.Add(dr);
                        }

                        double ScheduleTOTodaysRate = 0, totalSchTOTodaysRate = 0;

                        object val9 = dr[columnNameTodayRate];
                        if (val9 == DBNull.Value)
                        {
                            ScheduleTOTodaysRate = 0;
                        }
                        else
                        {
                            ScheduleTOTodaysRate = Convert.ToDouble(dr[columnNameTodayRate]);
                        }

                        if (!columnstotalSchTO.Contains(columnNameTodayRate))
                        {
                            totalSchTO.Columns.Add(columnNameTodayRate, typeof(string));
                        }

                        if (drtotalSchTO[columnNameTodayRate] == null)
                        {
                            totalSchTOTodaysRate = 0;
                        }
                        else
                        {
                            object val10 = drtotalSchTO[columnNameTodayRate];
                            if (val10 == DBNull.Value)
                            {
                                totalSchTOTodaysRate = 0;
                            }
                            else
                            {
                                totalSchTOTodaysRate = Convert.ToDouble(drtotalSchTO[columnNameTodayRate]);
                            }
                        }


                        drtotalSchTO[columnNameTodayRate] = ((ScheduleTOTodaysRate) + (totalSchTOTodaysRate));

                        ScheduleTO.Rows.Add(dr);
                        totalSchTO.Rows.Add(drtotalSchTO);

                        ScheduleTOList.Tables.Add(ScheduleTO);

                    }

                    ScheduleTOList.Tables.Add(totalSchTO);
                    return ScheduleTOList;
                }
            }
            return null;
        }


        public ResultMessage GradeNoteEnquiryDetailsToDropox(string vehicleIds, int cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            DataSet ds = new DataSet();
            int result = 0;
            try
            {

                ds = GetListOfMasterReportForDropbox(vehicleIds, cOrNcId);

                if (ds == null || ds.Tables[0].Rows.Count == 0)
                {
                    return null;
                }
                //crete file and uplod res
                result = CreateTempGradeNoteEnquiryExcel(ds.Tables[0]);
                if (result != 1)
                {
                    //tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.DefaultExceptionBehaviour(ex, "SalesChartEnquiryDetailsToDropbox");
                return resultMessage;
            }
            return resultMessage;

        }

        public ResultMessage GradeNoteEnquiryDetailsToDropoxForCopy(DateTime fromdate, DateTime toDate, Int32 cOrNcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;
            String flagDropbox = "dropBox";
            try
            {

                //ds = GetListOfMasterReportForDropboxForCopy(fromdate.ToString(), toDate.ToString());
                String purchaseManagerIds = String.Empty;
                List<JObject> data = GetListOfMasterReport(fromdate.ToString(), toDate.ToString(), 1, flagDropbox, purchaseManagerIds);
                DataTable dt = new DataTable();
                if (data == null)
                {
                    return null;
                }
                if (data.Count == 0)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.Tag = 0;
                    return resultMessage;
                }
                //Create Columns
                foreach (JProperty property in data[0].Properties())
                {
                    dt.Columns.Add(property.Name);
                }

                foreach (JObject obj in data)
                {
                    dt.Rows.Add();
                    foreach (JProperty property in obj.Properties())
                    {
                        dt.Rows[dt.Rows.Count - 1][property.Name] = property.Value;
                    }
                }

                //crete file and uplod res
                result = CreateTempGradeNoteEnquiryExcel(dt);
                if (result != 1)
                {
                    //tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }
                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = 1;
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.DefaultExceptionBehaviour(ex, "SalesChartEnquiryDetailsToDropbox");
                return resultMessage;
            }
            return resultMessage;

        }

        public int CreateTempGradeNoteEnquiryExcel(DataTable dtResult)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (dtResult == null || dtResult.Rows.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);
                int m = 1;
                for (int j = 0; j < dtResult.Columns.Count; j++)
                {
                    //m = 1;
                    excelWorksheet.Cells[1, m].Value = dtResult.Columns[j].ColumnName;
                    m++;
                }

                int count = dtResult.Columns.Count;
                excelWorksheet.Cells[1, 1, 1, count].Style.Font.Bold = true;

                int i = 0;
                foreach (DataRow dr in dtResult.Rows)
                {
                    int l = 1;
                    for (i = 0; i < dtResult.Columns.Count; i++)
                    {
                        //int l = 1;
                        string columnName = dtResult.Columns[i].ColumnName;
                        switch (columnName)
                        {
                            case "Date":
                                break;
                            case "TruckNo":
                                break;
                            case "Broker":
                                break;
                            case "Location":
                                break;
                            case "Party":
                                break;
                            case "Vehicle Type":
                                break;
                            case "Remark":
                                break;
                            case "Todays Rate":
                                excelWorksheet.Cells[cellRow, l].Style.Numberformat.Format = "#,##0.00";
                                break;
                            default:
                                excelWorksheet.Cells[cellRow, l].Style.Numberformat.Format = "#,##0.000";
                                break;
                        }

                        excelWorksheet.Cells[cellRow, l].Value = dr[dtResult.Columns[i].ColumnName].ToString();

                        l++;
                    }

                    cellRow++;

                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, count])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                        range.AutoFitColumns();
                    }

                }

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion
                #region Upload File to Cloud
                TblConfigParamsTO configParamTOForAWS = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.IS_FILE_UPLOAD_TO_AWS);

                String fileName = Constants.ExcelFileNameGradeNoteEnquiry + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "_Recycle_" + ".xlsx";
                var fileStream = excelPackage.GetAsByteArray();

                if (configParamTOForAWS == null || configParamTOForAWS.ConfigParamVal.ToString() == "0")
                {
                    #region Upload File to Azure

                    // Create azure storage  account connection.
                    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                    // Create the blob client.
                    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                    // Retrieve reference to a target container.
                    CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                    CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                    Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                    #endregion
                }
                else
                {
                    #region Upload File to AWS

                    TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
                    if (configParamTOForAWSRecycleBucket == null)
                    {
                        throw new Exception("configParamTOForAWSRecycleBucket == null");
                    }
                    TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
                    if (configParamTOForAWSAccessKey == null)
                    {
                        throw new Exception("configParamTOForAWSAccessKey == null");
                    }
                    TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
                    if (configParamTOForAWSSecretKey == null)
                    {
                        throw new Exception("configParamTOForAWSSecretKey == null");
                    }

                    var result = UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, "");
                    #endregion
                }
                excelPackage.Dispose();

                #endregion

                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempGradeNoteEnquiryExcel");
                return -1;
            }

        }

        public int CreateTempWBReportExcel(List<TblWBRptTO> tblWBRptTOList)
        {
            ResultMessage resultMessage = new ResultMessage();
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            try
            {

                if (tblWBRptTOList == null || tblWBRptTOList.Count == 0)
                {
                    return 0;
                }

                #region Create Excel File
                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);
                excelWorksheet.Cells[1, 1].Value = "Vehicle Number";
                excelWorksheet.Cells[1, 2].Value = "WB ID";
                excelWorksheet.Cells[1, 3].Value = "User ID";
                excelWorksheet.Cells[1, 4].Value = "Date";
                excelWorksheet.Cells[1, 5].Value = "Time";
                excelWorksheet.Cells[1, 6].Value = "Gross Weight";
                excelWorksheet.Cells[1, 7].Value = "1st Weight";
                excelWorksheet.Cells[1, 8].Value = "2nd Weight";
                excelWorksheet.Cells[1, 9].Value = "3rd Weight";
                excelWorksheet.Cells[1, 10].Value = "4th Weight";
                excelWorksheet.Cells[1, 11].Value = "5th Weight";
                excelWorksheet.Cells[1, 12].Value = "6th Weight";
                excelWorksheet.Cells[1, 13].Value = "7th Weight";
                excelWorksheet.Cells[1, 14].Value = "Tare Weight";
                excelWorksheet.Cells[1, 15].Value = "Net Weight";
                excelWorksheet.Cells[1, 16].Value = "Load / Unload";
                excelWorksheet.Cells[1, 17].Value = "Transaction Type";
                excelWorksheet.Cells[1, 18].Value = "Vehicle ID";
                excelWorksheet.Cells[1, 19].Value = "Vehicle Status";
                excelWorksheet.Cells[1, 20].Value = "RST NO";
                excelWorksheet.Cells[1, 21].Value = "Material Type";
                excelWorksheet.Cells[1, 22].Value = "Material SubType";
                excelWorksheet.Cells[1, 23].Value = "From Location";
                excelWorksheet.Cells[1, 24].Value = "To Location";
                excelWorksheet.Cells[1, 25].Value = "Bill Type";
                excelWorksheet.Cells[1, 26].Value = "Rst No";


                excelWorksheet.Cells[1, 1, 1, 26].Style.Font.Bold = true;

                for (int i = 0; i < tblWBRptTOList.Count; i++)
                {
                    excelWorksheet.Cells[cellRow, 1].Value = tblWBRptTOList[i].VehicleNumber;
                    excelWorksheet.Cells[cellRow, 2].Value = tblWBRptTOList[i].WBID;
                    excelWorksheet.Cells[cellRow, 3].Value = tblWBRptTOList[i].UserID;
                    excelWorksheet.Cells[cellRow, 4].Value = tblWBRptTOList[i].Date;
                    excelWorksheet.Cells[cellRow, 5].Value = tblWBRptTOList[i].Time;
                    excelWorksheet.Cells[cellRow, 6].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 6].Value = tblWBRptTOList[i].GrossWeight;
                    excelWorksheet.Cells[cellRow, 7].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 7].Value = tblWBRptTOList[i].FirstWeight;
                    excelWorksheet.Cells[cellRow, 8].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 8].Value = tblWBRptTOList[i].SecondWeight;
                    excelWorksheet.Cells[cellRow, 9].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 9].Value = tblWBRptTOList[i].ThirdWeight;
                    excelWorksheet.Cells[cellRow, 10].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 10].Value = tblWBRptTOList[i].ForthWeight;
                    excelWorksheet.Cells[cellRow, 11].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 11].Value = tblWBRptTOList[i].FifthWeight;
                    excelWorksheet.Cells[cellRow, 12].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 12].Value = tblWBRptTOList[i].SixthWeight;
                    excelWorksheet.Cells[cellRow, 13].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 13].Value = tblWBRptTOList[i].SeventhWeight;
                    excelWorksheet.Cells[cellRow, 14].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 14].Value = tblWBRptTOList[i].TareWeight;
                    excelWorksheet.Cells[cellRow, 15].Style.Numberformat.Format = "#,##0.00";
                    excelWorksheet.Cells[cellRow, 15].Value = tblWBRptTOList[i].NetWeight;
                    excelWorksheet.Cells[cellRow, 16].Value = tblWBRptTOList[i].LoadOrUnload;
                    excelWorksheet.Cells[cellRow, 17].Value = tblWBRptTOList[i].TransactionType;
                    excelWorksheet.Cells[cellRow, 18].Value = tblWBRptTOList[i].VehicleID;
                    excelWorksheet.Cells[cellRow, 19].Value = tblWBRptTOList[i].VehicleStatus;

                    excelWorksheet.Cells[cellRow, 20].Value = "";
                    excelWorksheet.Cells[cellRow, 21].Value = tblWBRptTOList[i].MaterialType;
                    excelWorksheet.Cells[cellRow, 22].Value = tblWBRptTOList[i].MaterialSubType;
                    excelWorksheet.Cells[cellRow, 23].Value = tblWBRptTOList[i].FromLocation;
                    excelWorksheet.Cells[cellRow, 24].Value = tblWBRptTOList[i].ToLocation;
                    excelWorksheet.Cells[cellRow, 25].Value = tblWBRptTOList[i].BillType;
                    excelWorksheet.Cells[cellRow, 26].Value = tblWBRptTOList[i].RstNo;

                    cellRow++;

                    if (i == (tblWBRptTOList.Count - 1))
                    {
                        excelWorksheet.Cells[cellRow, 5].Value = "Total";
                        excelWorksheet.Cells[cellRow, 15].Style.Numberformat.Format = "#,##0.00";
                        excelWorksheet.Cells[cellRow, 15].Value = Math.Round((tblWBRptTOList.Sum(ele => ele.NetWeight)), 2);
                        excelWorksheet.Cells[cellRow, 1, cellRow, 19].Style.Font.Bold = true;
                    }


                    using (ExcelRange range = excelWorksheet.Cells[1, 1, cellRow, 25])
                    {
                        range.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        range.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Medium);
                        range.Style.Font.Name = "Times New Roman";
                        range.Style.Font.Size = 10;
                        range.AutoFitColumns();
                    }
                }

                excelWorksheet.Protection.IsProtected = true;
                excelPackage.Workbook.Protection.LockStructure = true;

                #endregion

                #region Upload File to Cloud
                TblConfigParamsTO configParamTOForAWS = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.IS_FILE_UPLOAD_TO_AWS);

                String fileName = Constants.ExcelFileNameWBReport + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "_Recycle_" + ".xlsx";
                var fileStream = excelPackage.GetAsByteArray();

                if (configParamTOForAWS == null || configParamTOForAWS.ConfigParamVal.ToString() == "0")
                {
                    #region Upload File to Azure

                    // Create azure storage  account connection.
                    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                    // Create the blob client.
                    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                    // Retrieve reference to a target container.
                    CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                    CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                    Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                    #endregion
                }
                else
                {
                    #region Upload File to AWS

                    TblConfigParamsTO configParamTOForAWSRecycleBucket = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_RECYCLE_BUCKET_NAME);
                    if (configParamTOForAWSRecycleBucket == null)
                    {
                        throw new Exception("configParamTOForAWSRecycleBucket == null");
                    }
                    TblConfigParamsTO configParamTOForAWSAccessKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_KEY);
                    if (configParamTOForAWSAccessKey == null)
                    {
                        throw new Exception("configParamTOForAWSAccessKey == null");
                    }
                    TblConfigParamsTO configParamTOForAWSSecretKey = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.AWS_ACCESS_SECRET_KEY);
                    if (configParamTOForAWSSecretKey == null)
                    {
                        throw new Exception("configParamTOForAWSSecretKey == null");
                    }

                    var result = UploadFileToAWS(configParamTOForAWSAccessKey.ConfigParamVal, configParamTOForAWSSecretKey.ConfigParamVal, configParamTOForAWSRecycleBucket.ConfigParamVal, fileName, fileStream, "");
                    #endregion
                }
                excelPackage.Dispose();

                #endregion

                resultMessage.DefaultSuccessBehaviour();
                return 1;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "CreateTempWBReportExcel");
                return -1;
            }

        }
        //Added by minal 26 May 2021 For Dropbox
        public ResultMessage WriteIotDataTODB()
        {

            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            try
            {

                DateTime serveDate = _iCommonDAO.ServerDateTime;
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == (Int32)Constants.WeighingDataSourceE.DB)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = "Data write process not start : IoT Setting not active ";
                    return resultMessage;
                }
                //    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_EXTRACTION_DAYS);
                //if (tblConfigParamsTO != null)
                //{
                //    Int32 days = Convert.ToInt32(tblConfigParamsTO.ConfigParamVal);
                //    serveDate.AddDays(-days);
                //}
                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectVehicleScheduleDBBackUp(Convert.ToInt32(Constants.TranStatusE.New), 1);
                if (tblPurchaseScheduleSummaryTOList == null || tblPurchaseScheduleSummaryTOList.Count == 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "No vehicles found to write data.";
                    return resultMessage;
                }

                tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.Where(w => w.IsDBup == 1 && w.ModbusRefId > 0).ToList();

                for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                {
                    try
                    {
                        conn.Open();
                        tran = conn.BeginTransaction();
                        List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList = new List<TblAddonsFunDtlsTO>();

                        TblPurchaseScheduleSummaryTO scheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];

                        // TblPurchaseScheduleSummaryTO tempTO = _iIotCommunication.GetItemDataFromIotAndMerge(scheduleSummaryTO);
                        //if IsDBup = 1 means all process completed @ Added By kiran 
                        if (scheduleSummaryTO.IsDBup == 0)
                        {
                            continue;
                        }

                        resultMessage = WriteIotDataTODBForVehicle(scheduleSummaryTO, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            //throw new Exception("Error in WriteIotDataTODBForVehicle(scheduleSummaryTO,conn,tran); ");
                            continue;
                        }

                        int deleteResult = RemoveDateFromGateAndWeightIOT(scheduleSummaryTO);
                        if (deleteResult != 1)
                        {
                            continue;
                        }

                        tran.Commit();
                    }
                    catch (System.Exception ex)
                    {
                        throw new Exception("Error in WriteIotDataTODB()");
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Data write to DB process successfully.";
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in DataExtractionForCorrectionCompleVehiles()");
                return resultMessage;

            }
            finally
            {
                conn.Close();
            }
        }
        public int PostTallyReportListForExcel(List<TallyReportTO> tallyReportList)
        {
            loggerObj.LogError("IN PostTallyReportListForExcel BL " + tallyReportList);
            ResultMessage resultMessage = new ResultMessage();
            // SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            // SqlTransaction tran = null;
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            int invoiceId = 0;
            int isFromTemplate = 0;
            TblConfigParamsTO isFromTemplatePrintTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(Constants.CP_SCRAP_PRINT_NC_VEHICAL_REPORT_TEMPLATE_BASIS);
            if (isFromTemplatePrintTO != null)
                isFromTemplate = Convert.ToInt32(isFromTemplatePrintTO.ConfigParamVal);
            try
            {
                string minDate = tallyReportList[0].Date;
                string maxDate = tallyReportList[tallyReportList.Count - 1].Date;

                //string minDate = tallyReportList.Min(ele => Convert.ToDateTime(ele.Date)).ToString("ddMMyy");
                //string maxDate = tallyReportList.Max(ele => Convert.ToDateTime(ele.Date)).ToString("ddMMyy");
                byte[] fileStream = { };
                if (isFromTemplate == 1)
                {
                    resultMessage = _iCircularDependancyBL.PrintNCVehicalReport(tallyReportList);
                    if (resultMessage.MessageType == ResultMessageE.Information)
                    {
                        if (resultMessage.Tag != null)
                        {
                            fileStream = (byte[])resultMessage.Tag;
                        }
                    }
                }
                else
                {
                    ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);
                    excelWorksheet.Cells[1, 1].Value = "DATE";
                    excelWorksheet.Cells[1, 2].Value = "TRUCK NO";
                    excelWorksheet.Cells[1, 3].Value = "SUPPLIER NAME";
                    excelWorksheet.Cells[1, 4].Value = "PM";
                    excelWorksheet.Cells[1, 5].Value = "LOCATION";
                    excelWorksheet.Cells[1, 6].Value = "GRADE";
                    excelWorksheet.Cells[1, 7].Value = "GRADE QTY";
                    excelWorksheet.Cells[1, 8].Value = "GRADE RATE";
                    excelWorksheet.Cells[1, 9].Value = "TOTAL";
                    excelWorksheet.Cells[1, 10].Value = "BILL TYPE";
                    excelWorksheet.Cells[1, 11].Value = "MATERIAL TYPE";
                    excelWorksheet.Cells[1, 12].Value = "CONTAINER NO";


                    excelWorksheet.Cells[1, 1, 1, 12].Style.Font.Bold = true;
                    //excelWorksheet.Protection.IsProtected = true;
                    //excelPackage.Workbook.Protection.LockStructure = true;

                    for (int i = 0; i < tallyReportList.Count; i++)
                    {
                        excelWorksheet.Cells[cellRow, 1].Value = tallyReportList[i].Date;
                        excelWorksheet.Cells[cellRow, 2].Value = tallyReportList[i].TruckNo;
                        excelWorksheet.Cells[cellRow, 3].Value = tallyReportList[i].SupplierName;
                        excelWorksheet.Cells[cellRow, 4].Value = tallyReportList[i].PM;
                        excelWorksheet.Cells[cellRow, 5].Value = tallyReportList[i].Location;
                        excelWorksheet.Cells[cellRow, 6].Value = tallyReportList[i].Grade;
                        excelWorksheet.Cells[cellRow, 7].Value = tallyReportList[i].GradeQty;
                        excelWorksheet.Cells[cellRow, 8].Value = tallyReportList[i].GradeRate;
                        excelWorksheet.Cells[cellRow, 9].Value = tallyReportList[i].Total;
                        excelWorksheet.Cells[cellRow, 10].Value = tallyReportList[i].BillType;
                        excelWorksheet.Cells[cellRow, 11].Value = tallyReportList[i].MaterialType;
                        excelWorksheet.Cells[cellRow, 12].Value = tallyReportList[i].ContainerNo;
                        cellRow++;
                        //tallyReportList
                    }
                    fileStream = excelPackage.GetAsByteArray();

                }

                #region Upload File to Azure

                // Create azure storage  account connection.
                CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                // Create the blob client.
                CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                // Retrieve reference to a target container.
                CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                String fileName = Constants.ExcelFileName + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "-" + minDate + "-" + maxDate + "_Recycle_" + ".xlsx";
                CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                // var fileStream = excelPackage.GetAsByteArray();

                Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                excelPackage.Dispose();
                return 1;
                #endregion
            }
            catch (Exception ex)
            {
                loggerObj.LogError("Error******************************" + ex.Message);
                loggerObj.LogError(ex.StackTrace);
                throw ex;
            }
            finally
            {
                //conn.Close();
            }
        }
        public int PostTallyReportListForExcelOld(List<TallyReportTO> tallyReportList)
        {
            loggerObj.LogError("IN PostTallyReportListForExcel BL " + tallyReportList);
            ResultMessage resultMessage = new ResultMessage();
            // SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            // SqlTransaction tran = null;
            ExcelPackage excelPackage = new ExcelPackage();
            int cellRow = 2;
            int invoiceId = 0;
            try
            {

                string minDate = tallyReportList[0].Date;
                string maxDate = tallyReportList[tallyReportList.Count - 1].Date;

                //string minDate = tallyReportList.Min(ele => Convert.ToDateTime(ele.Date)).ToString("ddMMyy");
                //string maxDate = tallyReportList.Max(ele => Convert.ToDateTime(ele.Date)).ToString("ddMMyy");

                ExcelWorksheet excelWorksheet = excelPackage.Workbook.Worksheets.Add(Constants.ExcelSheetName);

                excelWorksheet.Cells[1, 1].Value = "DATE";
                excelWorksheet.Cells[1, 2].Value = "TRUCK NO";
                excelWorksheet.Cells[1, 3].Value = "SUPPLIER NAME";
                excelWorksheet.Cells[1, 4].Value = "PM";
                excelWorksheet.Cells[1, 5].Value = "LOCATION";
                excelWorksheet.Cells[1, 6].Value = "GRADE";
                excelWorksheet.Cells[1, 7].Value = "GRADE QTY";
                excelWorksheet.Cells[1, 8].Value = "GRADE RATE";
                excelWorksheet.Cells[1, 9].Value = "TOTAL";
                excelWorksheet.Cells[1, 10].Value = "BILL TYPE";
                excelWorksheet.Cells[1, 11].Value = "MATERIAL TYPE";
                excelWorksheet.Cells[1, 12].Value = "CONTAINER NO";


                excelWorksheet.Cells[1, 1, 1, 12].Style.Font.Bold = true;
                //excelWorksheet.Protection.IsProtected = true;
                //excelPackage.Workbook.Protection.LockStructure = true;

                for (int i = 0; i < tallyReportList.Count; i++)
                {
                    excelWorksheet.Cells[cellRow, 1].Value = tallyReportList[i].Date;
                    excelWorksheet.Cells[cellRow, 2].Value = tallyReportList[i].TruckNo;
                    excelWorksheet.Cells[cellRow, 3].Value = tallyReportList[i].SupplierName;
                    excelWorksheet.Cells[cellRow, 4].Value = tallyReportList[i].PM;
                    excelWorksheet.Cells[cellRow, 5].Value = tallyReportList[i].Location;
                    excelWorksheet.Cells[cellRow, 6].Value = tallyReportList[i].Grade;
                    excelWorksheet.Cells[cellRow, 7].Value = tallyReportList[i].GradeQty;
                    excelWorksheet.Cells[cellRow, 8].Value = tallyReportList[i].GradeRate;
                    excelWorksheet.Cells[cellRow, 9].Value = tallyReportList[i].Total;
                    excelWorksheet.Cells[cellRow, 10].Value = tallyReportList[i].BillType;
                    excelWorksheet.Cells[cellRow, 11].Value = tallyReportList[i].MaterialType;
                    excelWorksheet.Cells[cellRow, 12].Value = tallyReportList[i].ContainerNo;
                    cellRow++;
                    //tallyReportList
                }


                #region Upload File to Azure

                // Create azure storage  account connection.
                CloudStorageAccount storageAccount = CloudStorageAccount.Parse(_iConnectionString.GetConnectionString(Constants.AZURE_CONNECTION_STRING));

                // Create the blob client.
                CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                // Retrieve reference to a target container.
                CloudBlobContainer container = blobClient.GetContainerReference(Constants.AzureSourceContainerName);

                String fileName = Constants.ExcelFileName + _iCommonDAO.ServerDateTime.ToString("ddMMyyyyHHmmss") + "-" + minDate + "-" + maxDate + "_Recycle_" + ".xlsx";
                CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);

                var fileStream = excelPackage.GetAsByteArray();

                Task t1 = blockBlob.UploadFromByteArrayAsync(fileStream, 0, fileStream.Length);

                excelPackage.Dispose();
                return 1;
                #endregion
            }
            catch (Exception ex)
            {
                loggerObj.LogError("Error******************************" + ex.Message);
                loggerObj.LogError(ex.StackTrace);
                throw ex;
            }
            finally
            {
                //conn.Close();
            }
        }
        public ResultMessage WriteIotDataTODBForVehicle(TblPurchaseScheduleSummaryTO scheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {

            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {

                if (scheduleSummaryTO.ActualRootScheduleId <= 0)
                {
                    throw new Exception("rootScheduleId is not valid - " + scheduleSummaryTO.ActualRootScheduleId);
                }

                List<TblPurchaseScheduleSummaryTO> allScheduleList = SelectAllEnquiryScheduleSummaryTOByRootId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (allScheduleList == null || allScheduleList.Count == 0)
                {
                    throw new Exception("allScheduleList == NULL against rootScheduleId = " + scheduleSummaryTO.ActualRootScheduleId);
                }

                List<TblPurchaseScheduleSummaryTO> isDataWrite = allScheduleList.Where(a => String.IsNullOrEmpty(a.VehicleNo)).ToList();
                if (isDataWrite != null && isDataWrite.Count > 0)
                {
                    throw new Exception("IOT data not found for vehicle Id = " + scheduleSummaryTO.ActualRootScheduleId);
                }

                int modbusref = allScheduleList[0].ModbusRefId;
                for (int i = 0; i < allScheduleList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tempScheduleTO = allScheduleList[i];
                    tempScheduleTO.ModbusRefId = 0;
                    result = UpdateTblPurchaseScheduleSummary(tempScheduleTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in UpdateTblPurchaseScheduleSummary(tempScheduleTO, conn, tran);");
                    }
                }

                List<TblPurchaseWeighingStageSummaryTO> weighingList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeighingDetailsBySchduleId(scheduleSummaryTO.ActualRootScheduleId, false);
                if (weighingList != null && weighingList.Count > 0)
                {
                    weighingList.ForEach(v => { v.VehicleNo = allScheduleList[0].VehicleNo; });
                    for (int k = 0; k < weighingList.Count; k++)
                    {
                        result = _iTblPurchaseWeighingStageSummaryBL.UpdateTblPurchaseWeighingStageSummary(weighingList[k], conn, tran);
                        if (result == -1)
                        {
                            throw new Exception("Error in UpdateTblPurchaseWeighingStageSummary(weighingList[k],conn,tran);");
                        }
                    }
                }
                scheduleSummaryTO.ModbusRefId = modbusref;
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in WriteIotDataTODBForVehicle(TblPurchaseScheduleSummaryTO scheduleSummaryTO,SqlConnection conn,SqlTransaction tran )");
                return resultMessage;

            }
        }

        public ResultMessage DeleteAllDtlsAgainstVeh(TblPurchaseScheduleSummaryTO scheduleSummaryTO, List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                if (scheduleSummaryTO == null)
                {
                    throw new Exception("scheduleSummaryTO == null");
                }

                resultMessage = DeleteAllDataAgainstRootScheduleId(scheduleSummaryTO.RootScheduleId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("DeleteAllDataAgainstRootScheduleId(scheduleSummaryTO,conn,tran);");
                }

                resultMessage = DeleteVehiclePhotoDtls(scheduleSummaryTO.RootScheduleId, tblAddonsFunDtlsTOList, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in DeleteVehiclePhotoDtls(scheduleSummaryTO.RootScheduleId,ref tblAddonsFunDtlsTOList, conn, tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in DeleteAllDtlsAgainstVeh(TblPurchaseScheduleSummaryTO scheduleSummaryTO, ref List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }
        public ResultMessage DeleteAllDataAgainstRootScheduleId(Int32 rootScheduleId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Boolean isInsertNcSchedule = true; //Prajakta[2019-04-15] Added and get value from configuration
            try
            {
                if (rootScheduleId <= 0)
                {
                    throw new Exception("rootScheduleId is not valid - " + rootScheduleId);
                }

                List<TblPurchaseScheduleSummaryTO> allScheduleList = SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
                if (allScheduleList == null || allScheduleList.Count == 0)
                {
                    throw new Exception("allScheduleList == NULL against rootScheduleId = " + rootScheduleId);
                }

                 allScheduleList = allScheduleList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
                //allScheduleList = allScheduleList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).ToList();

                //allScheduleList = allScheduleList.OrderBy(a => a.StatusId).ToList();
                TblPurchaseScheduleSummaryTO insertScheduleTOForNC = null;
                Boolean isExeNew = false;

                for (int i = 0; i < allScheduleList.Count; i++)
                {
                    //Prajakta [2019-04-15] Added to insert one dummy record of NC schedule
                    // insertScheduleTOForNC = new TblPurchaseScheduleSummaryTO();
                    //if (allScheduleList[i].StatusId == (Int32)Constants.TranStatusE.New)
                    if (!isExeNew)
                    {
                        //TblPurchaseScheduleSummaryTO newScheTO = allScheduleList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.New).FirstOrDefault();
                        TblPurchaseScheduleSummaryTO newScheTO = allScheduleList.Where(a => a.IdPurchaseScheduleSummary == a.ActualRootScheduleId).FirstOrDefault();
                        if (newScheTO != null)
                        {
                            isExeNew = true;
                            insertScheduleTOForNC = newScheTO.DeepCopy();

                            TblPurchaseScheduleSummaryTO correctionTO = allScheduleList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED
                            && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
                            && a.IsCorrectionCompleted == 1).FirstOrDefault();

                            if (correctionTO != null)
                            {
                                insertScheduleTOForNC.Qty = correctionTO.Qty;
                            }

                            //if (allScheduleList[i].RootScheduleId == 0)
                            //if (allScheduleList[i].StatusId == (Int32)Constants.TranStatusE.New)
                            {
                                resultMessage = DeleteAllVehicleDtlsAgainstRootScheduleId(allScheduleList[i], conn, tran);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    throw new Exception("Error in DeleteAllVehicleDtlsAgainstRootScheduleId(allScheduleList[i],conn,tran);");
                                }
                                //continue;
                            }
                        }
                    }


                    resultMessage = DeleteAllDataAgainstVehicleSchedule(allScheduleList[i], conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error in DeleteAllDataAgainstVehicleSchedule(allScheduleList[i],conn,tran);");
                    }
                }

                //Prajakta [2019-04-15] Added to insert one dummy record of NC schedule
                if (isInsertNcSchedule)
                {
                    if (insertScheduleTOForNC != null)
                    {
                        resultMessage = InsertNCScheduleAfterDataExtraction(insertScheduleTOForNC, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            throw new Exception("Error in InsertNCScheduleAfterDataExtraction(insertScheduleTOForNC,conn,tran);");
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in DeleteAllDataAgainstRootScheduleId(Int32 rootScheduleId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;

            }
        }

        public ResultMessage DeleteVehiclePhotoDtls(Int32 rootScheduleId, List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;

            try
            {
                if (rootScheduleId <= 0)
                {
                    throw new Exception("rootScheduleId == 0");
                }

                List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOTempList = new List<TblAddonsFunDtlsTO>();

                List<TblAddonsFunDtlsTO> schedulePhotosList = _iTblAddonsFunDtlsBL.SelectTblAddonsFunDtlsByRootScheduleId(rootScheduleId, conn, tran);
                if (schedulePhotosList != null && schedulePhotosList.Count > 0)
                {
                    tblAddonsFunDtlsTOTempList.AddRange(schedulePhotosList);
                }

                //get spot entry vehicle photo details
                TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(rootScheduleId, conn, tran);
                if (spotVehicleTO != null)
                {
                    List<TblAddonsFunDtlsTO> spotVehPhotosList = _iTblAddonsFunDtlsBL.SelectTblAddonsFunDtlsBySpotVehicleId(spotVehicleTO.IdVehicleSpotEntry, conn, tran);
                    if (spotVehPhotosList != null && spotVehPhotosList.Count > 0)
                    {
                        tblAddonsFunDtlsTOTempList.AddRange(spotVehPhotosList);
                    }
                }

                tblAddonsFunDtlsTOList.AddRange(tblAddonsFunDtlsTOTempList);

                // if (tblAddonsFunDtlsTOList != null && tblAddonsFunDtlsTOList.Count > 0)
                // {
                //     resultMessage = DeleteFileFromAzure(tblAddonsFunDtlsTOList, conn, tran);
                //     if (resultMessage.MessageType != ResultMessageE.Information)
                //     {
                //         throw new Exception("Error in DeleteFileFromAzure(tblAddonsFunDtlsTOList,conn,tran);");
                //     }
                // }

                result = _iTblAddonsFunDtlsBL.DeleteAllPhotoAgainstVehScheduleId(rootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in DeleteAllPhotoAgainstVehScheduleId(scheduleTO.ActualRootScheduleId,conn,tran);");
                }

                if (spotVehicleTO != null)
                {
                    result = _iTblAddonsFunDtlsBL.DeleteAllPhotoAgainstSpotVehId(spotVehicleTO.IdVehicleSpotEntry, conn, tran);
                    if (result < 0)
                    {
                        throw new Exception("Error in DeleteAllPhotoAgainstSpotVehId(scheduleTO.ActualRootScheduleId,conn,tran);");
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "DeleteVehiclePhotoDtls(Int32 rootScheduleId, ref List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;

            }
        }


        public ResultMessage DeleteFileFromAzure(List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {

                if (tblAddonsFunDtlsTOList == null || tblAddonsFunDtlsTOList.Count == 0)
                {
                    throw new Exception("tblAddonsFunDtlsTOList == null");
                }

                string AzureConnectionStr = "";
                TblConfigParamsTO configParamTOForAzureConnStr = _iTblConfigParamsBL.SelectTblConfigParamsValByName(StaticStuff.Constants.CP_AZURE_CONNECTIONSTRING_FOR_DOCUMENTATION, conn, tran);
                if (configParamTOForAzureConnStr == null)
                {
                    throw new Exception("configParamTOForAzureConnStr == null");
                }

                AzureConnectionStr = configParamTOForAzureConnStr.ConfigParamVal;
                if (string.IsNullOrEmpty(AzureConnectionStr))
                {
                    throw new Exception("AzureConnectionStr == null");
                }

                string AzureSourceContainerName = "";

                Int32 moduleId = 5;

                TblModuleTO tblModuleTO = _iTblModuleBL.SelectTblModuleTO(moduleId);
                if (tblModuleTO == null)
                {
                    throw new Exception("tblModuleTO == null");
                }

                AzureSourceContainerName = tblModuleTO.ContainerName;
                if (string.IsNullOrEmpty(AzureSourceContainerName))
                {
                    throw new Exception("AzureSourceContainerName == null");
                }

                // Create azure storage  account connection.
                CloudStorageAccount storageAccount = CloudStorageAccount.Parse(AzureConnectionStr);

                // Create the blob client.
                CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

                // Retrieve reference to a source container.
                CloudBlobContainer sourceContainer = blobClient.GetContainerReference(AzureSourceContainerName);

                for (int i = 0; i < tblAddonsFunDtlsTOList.Count; i++)
                {
                    Task<int> result = DeleteAzureFiles(tblAddonsFunDtlsTOList[i], sourceContainer);
                    // if(result < 0)
                    // {
                    //     throw new Exception("Error in DeleteAzureFiles(tblAddonsFunDtlsTOList[i],sourceContainer);");
                    // }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in DeleteFileFromAzure(List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn,SqlTransaction tran)");
                return resultMessage;

            }
        }

        public async Task<int> DeleteAzureFiles(TblAddonsFunDtlsTO tblAddonsFunDtlsTO, CloudBlobContainer sourceContainer)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {

                string path = tblAddonsFunDtlsTO.FunRefVal;

                string fileName = Path.GetFileName(path);

                CloudBlockBlob sourceBlob = sourceContainer.GetBlockBlobReference(fileName);

                await sourceBlob.DeleteIfExistsAsync();

                return 1;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "DeleteAzureFiles(TblAddonsFunDtlsTO tblAddonsFunDtlsTO)");
                return -1;
            }

        }

        public ResultMessage InsertNCScheduleAfterDataExtraction(TblPurchaseScheduleSummaryTO insertScheduleTOForNC, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;

            try
            {
                // if (insertScheduleTOForNC == null)
                // {
                //     throw new Exception("insertScheduleTOForNC == NULL");
                // }

                if (insertScheduleTOForNC.PurchaseScheduleSummaryDetailsTOList != null && insertScheduleTOForNC.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                {
                    insertScheduleTOForNC.PurchaseScheduleSummaryDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                }

                insertScheduleTOForNC.StatusId = (Int32)Constants.TranStatusE.VEHICLE_CANCELED;
                insertScheduleTOForNC.IsActive = 1;
                insertScheduleTOForNC.RootScheduleId = 0;
                result = InsertTblPurchaseScheduleSummary(insertScheduleTOForNC, conn, tran);
                if (result != 1)
                {
                    throw new Exception("Error in InsertTblPurchaseScheduleSummary(insertScheduleTOForNC, conn,tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in InsertNCScheduleAfterDataExtraction(TblPurchaseScheduleSummaryTO insertScheduleTOForNC,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }


        public ResultMessage DeleteAllVehicleDtlsAgainstRootScheduleId(TblPurchaseScheduleSummaryTO scheduleTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {
                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO == NULL");
                }

                if (scheduleTO.IdPurchaseScheduleSummary == 2840)
                {

                }
                //Delete all quality phase related details
                result = _iTblQualityPhaseDtlsBL.DeleteAllQualityPhaseDtlsAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblQualityPhaseDtlsBL.DeleteAllQualityPhaseDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                result = _iTblQualityPhaseBL.DeleteAllQualityPhaseAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblQualityPhaseBL.DeleteAllQualityPhaseAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }


                //Delete all spot vehicle details
                TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(scheduleTO.ActualRootScheduleId, conn, tran);
                if (spotVehicleTO != null)
                {
                    result = _iTblSpotVehicleMaterialDtlsBL.DeleteSpotVehMaterialDtls(spotVehicleTO.IdVehicleSpotEntry, conn, tran);
                    if (result < 0)
                    {
                        throw new Exception("Error in TblSpotVehicleMaterialDtlsBL.DeleteSpotVehMaterialDtls(spotVehicleTO.IdVehicleSpotEntry,conn,tran);");
                    }

                    result = _iTblPurchaseVehicleSpotEntryBL.DeleteTblPurchaseVehicleSpotEntry(spotVehicleTO.IdVehicleSpotEntry, conn, tran);
                    if (result < 0)
                    {
                        throw new Exception("Error in TblPurchaseVehicleSpotEntryBL.DeleteTblPurchaseVehicleSpotEntry(spotVehicleTO.IdVehicleSpotEntry,conn,tran);");
                    }
                }

                //Delete all unloading stage details against vehicle schedule
                result = _iTblPurchaseUnloadingDtlBL.DeleteAllUnloadingDtlsAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseUnloadingDtlBL.DeleteAllUnloadingDtlsAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all grading stage details against vehicle schedule
                result = _iTblPurchaseGradingDtlsBL.DeleteAllGradingDtlsAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseGradingDtlsBL.DeleteAllGradingDtlsAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all weighing,unloading,grading count details
                result = _iTblPurchaseVehicleStageCntBL.DeleteAllStageCntAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseVehicleStageCntBL.DeleteAllStageCntAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all purchase item desc details
                result = _iTblPurchaseItemDescBL.DeleteAllPurchaseItemDescAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in _iTblPurchaseItemDescBL.DeleteAllPurchaseItemDescAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary, conn, tran);");
                }

                //Delete all weighing details against vehicle schedule
                result = _iTblPurchaseWeighingStageSummaryBL.DeleteAllWeighingStageAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseWeighingStageSummaryBL.DeleteAllWeighingStageAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all status history details against vehicle schedule
                result = _iTblPurchaseScheduleStatusHistoryBL.DeleteAllStatusHistoryAgainstVehSchedule(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleStatusHistoryBL.DeleteAllStatusHistoryAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all party weighing measure details
                result = _iTblPartyWeighingMeasuresBL.DeleteAllPartyWeighingDtls(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseWeighingStageSummaryBL.DeleteAllWeighingStageAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all vehicle freight details
                result = _iTblPurchaseVehFreightDtlsBL.DeletePurchaseVehFreightDtls(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseWeighingStageSummaryBL.DeleteAllWeighingStageAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all vehicle history details
                result = _iTblPurchaseSchStatusHistoryBL.DeletePurchaseVehHistoryDtls(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseWeighingStageSummaryBL.DeleteAllWeighingStageAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete all vehicle density details
                result = _iTblScheduleDensityBL.DeletePurchaseVehDensityDtls(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseWeighingStageSummaryBL.DeleteAllWeighingStageAgainstVehSchedule(scheduleTO.RootScheduleId,conn,tran);");
                }

                //Delete against purchase vehicle link sauda 
                result = _iTblPurchaseVehLinkSaudaDAO.DeletePurchaseVehLinkSaudaDtls(scheduleTO.ActualRootScheduleId, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in _iTblPurchaseVehLinkSaudaDAO.DeletePurchaseVehLinkSaudaDtls(scheduleTO.RootScheduleId,conn,tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in DeleteAllVehicleDtlsAgainstRootScheduleId(TblPurchaseScheduleSummaryTO scheduleTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;

            }

        }
        public ResultMessage DeleteAllDataAgainstVehicleSchedule(TblPurchaseScheduleSummaryTO scheduleTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {
                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO == NULL");
                }


                //Delete quality phase related schedule details


                //Delete all grade exp details against schedule
                result = _iTblGradeExpressionDtlsBL.DeleteAllGradeExpDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblGradeExpressionDtlsBL.DeleteAllGradeExpDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                //Delete all vehicle item details against vehicle schedule
                result = _iTblPurchaseVehicleDetailsBL.DeleteAllVehicleItemDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseVehicleDetailsBL.DeleteAllVehicleItemDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                //Update purchaseScheduleSummaryId null to avoid ref conflict error
                result = _iTblPurchaseScheduleSummaryDAO.UpdateParentScheduleIdToNUll(scheduleTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("UpdateParentScheduleIdToNUll(scheduleTO, conn, tran)");
                }

                //Delete vehicle schedule
                result = DeleteTblPurchaseScheduleSummary(scheduleTO.IdPurchaseScheduleSummary, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseScheduleSummary(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "DeleteAllDataAgainstVehicleSchedule(TblPurchaseScheduleSummaryTO scheduleTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }



        public ResultMessage DeleteAllDataAgainstVehicleScheduleCandNC(TblPurchaseScheduleSummaryTO scheduleTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {
                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO == NULL");
                }


                //Delete quality phase related schedule details


                //Delete all grade exp details against schedule
                result = _iTblGradeExpressionDtlsBL.DeleteAllGradeExpDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblGradeExpressionDtlsBL.DeleteAllGradeExpDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                //Delete all vehicle item details against vehicle schedule
                result = _iTblPurchaseVehicleDetailsBL.DeleteAllVehicleItemDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseVehicleDetailsBL.DeleteAllVehicleItemDtlsAgainstVehSchedule(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                //Update purchaseScheduleSummaryId null to avoid ref conflict error
                result = _iTblPurchaseScheduleSummaryDAO.UpdateParentScheduleIdToNUll(scheduleTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("UpdateParentScheduleIdToNUll(scheduleTO, conn, tran)");
                }

                Int32 idInvoice = 0;
                idInvoice = SelectPurchaseInvoiceAgainstScheduleSummary(scheduleTO.IdPurchaseScheduleSummary, conn, tran);

                //Delete PurchaseInvoiceInterfacingDtl
                result = DeleteTblPurchaseInvoiceInterfacingDtl(idInvoice, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseInvoiceInterfacingDtl(idInvoice,conn,tran);");
                }

                //Delete PurchaseInvoiceAddr
                result = DeleteTblPurchaseInvoiceAddr(idInvoice, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseInvoiceAddr(idInvoice,conn,tran);");
                }

                //Delete PurchaseInvoiceHistory
                result = DeleteTblPurchaseInvoiceHistory(idInvoice, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseInvoiceHistory(idInvoice,conn,tran);");
                }

                //Delete PurchaseInvoiceDocuments
                result = DeleteTblPurchaseInvoiceDocuments(idInvoice, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseInvoiceDocuments(idInvoice,conn,tran);");
                }

                //Delete PurchaseInvoiceItemTaxDetails
                result = DeleteTblPurchaseInvoiceItemTaxDetails(idInvoice, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseInvoiceItemTaxDetails(idInvoice,conn,tran);");
                }

                //Delete PurchaseInvoiceItemDetails
                result = DeleteTblPurchaseInvoiceItemDetails(idInvoice, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseInvoiceItemDetails(idInvoice,conn,tran);");
                }

                //Delete Purchase Invoice
                result = DeleteTblPurchaseInvoice(scheduleTO.IdPurchaseScheduleSummary, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseInvoice(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                //Delete vehicle schedule
                result = DeleteTblPurchaseScheduleSummary(scheduleTO.IdPurchaseScheduleSummary, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in TblPurchaseScheduleSummaryBL.DeleteTblPurchaseScheduleSummary(scheduleTO.IdPurchaseScheduleSummary,conn,tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "DeleteAllDataAgainstVehicleSchedule(TblPurchaseScheduleSummaryTO scheduleTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }



        public ResultMessage MarkVehicleRejected(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 loginUserId, bool fromApprovalScreen)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            double conversionFact = 1000;
            Boolean isUpdateBookingQty = false;
            Int32 result = 0;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                DateTime serveDate = _iCommonDAO.ServerDateTime;

                if (scheduleSummaryTO == null)
                {
                    throw new Exception("scheduleSummaryTO == NULL");
                }

                TblPurchaseScheduleSummaryTO latestScheduleTO = SelectAllEnquiryScheduleSummaryTO(scheduleSummaryTO.IdPurchaseScheduleSummary, false, conn, tran);
                if (latestScheduleTO == null)
                {
                    throw new Exception("latestScheduleTO == NULL");
                }



                latestScheduleTO.StatusId = scheduleSummaryTO.StatusId;
                latestScheduleTO.IsApproved = scheduleSummaryTO.IsApproved;
                latestScheduleTO.VehiclePhaseId = scheduleSummaryTO.VehiclePhaseId;
                //Get new schedule TO
                Boolean isActive = false;
                TblPurchaseScheduleSummaryTO newScheduleTO = SelectAllEnquiryScheduleSummaryTO(latestScheduleTO.ActualRootScheduleId, isActive, conn, tran);
                if (newScheduleTO == null)
                {
                    throw new Exception("newScheduleTO == NULL");
                }

                //Check if vehicle is already rejeted
                if (newScheduleTO.RejectedBy > 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Vehicle No : " + newScheduleTO.VehicleNo + " is already rejected.";
                    return resultMessage;
                }
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                var vehicleNo = latestScheduleTO.VehicleNo;
                //Check if unloading is completed or not
                List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(latestScheduleTO.ActualRootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
                int rejectionFlag = 0;
                if (tblPurchaseWeighingStageSummaryTOList != null && tblPurchaseWeighingStageSummaryTOList.Count > 0)
                {
                    double totalNetWt = tblPurchaseWeighingStageSummaryTOList.Sum(a => a.NetWeightMT);
                    totalNetWt = totalNetWt / conversionFact;
                    latestScheduleTO.RejectedQty = newScheduleTO.Qty - totalNetWt;

                    //Prajakta[2019-06-11] Added to validate if vehicle is rejected after unloading completed
                    if (!fromApprovalScreen)
                    {
                        if (scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED || scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.UNLOADING_IS_IN_PROCESS
                            || scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.WEIGHING_COMPLETED)
                        {
                            if (totalNetWt >= newScheduleTO.Qty)
                            {
                                resultMessage.DefaultBehaviour();
                                if (totalNetWt > newScheduleTO.Qty)
                                    resultMessage.DisplayMessage = "Nothing to reject as vehicle unloading qty : " + totalNetWt + " is greater than vehicle schedule qty : " + newScheduleTO.Qty;
                                else if (totalNetWt == newScheduleTO.Qty)
                                    resultMessage.DisplayMessage = "Nothing to reject as vehicle unloading qty : " + totalNetWt + " is equal to vehicle schedule qty : " + newScheduleTO.Qty;

                                return resultMessage;
                            }
                        }
                    }


                    if (latestScheduleTO.RejectedQty <= 0)
                        latestScheduleTO.RejectedQty = 0;

                    latestScheduleTO.RejectedQty = Math.Round(latestScheduleTO.RejectedQty, 3);
                    //prajakta[2019-06-11] Commented
                    //latestScheduleTO.IsWeighing = 1;
                    isUpdateBookingQty = true;

                    //@Added by KKM for Avoid data
                    if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                    {
                        latestScheduleTO.VehicleNo = string.Empty;
                        latestScheduleTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                    }
                }
                else
                {
                    List<TblPurchaseWeighingStageSummaryTO> purchaseWeighingGrossWtDtls = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(latestScheduleTO.ActualRootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.GROSS_WEIGHT).ToString(), conn, tran);
                    if (purchaseWeighingGrossWtDtls == null || purchaseWeighingGrossWtDtls.Count == 0)
                    {
                        latestScheduleTO.IsWeighing = 1;
                        latestScheduleTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_REJECTED_BEFORE_WEIGHING;
                    }
                    else
                    {
                        // latestScheduleTO.IsRecovery = 1;
                        // latestScheduleTO.IsGradingCompleted = 1;
                        //@Added by KKM for updte status on gate IoT
                        rejectionFlag = 1;
                        latestScheduleTO.IsWeighing = 0;
                        //if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                        //{
                        //    latestScheduleTO.VehicleNo = string.Empty;
                        //    latestScheduleTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                        //}
                        //else
                        {
                            latestScheduleTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING;
                        }
                    }


                    latestScheduleTO.RejectedQty = latestScheduleTO.Qty;
                }

                latestScheduleTO.RejectedBy = loginUserId;
                latestScheduleTO.RejectedOn = serveDate;
                latestScheduleTO.VehRejectReasonId = scheduleSummaryTO.VehRejectReasonId;
                latestScheduleTO.VehRejectReasonDesc = scheduleSummaryTO.VehRejectReasonDesc;



                //if (isUpdateBookingQty)

                //Get Enquiry TO and update pending qty
                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(latestScheduleTO.PurchaseEnquiryId, conn, tran);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == NULL");
                }
                int configVal = 0;
                TblConfigParamsTO actualQtyConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.CP_SCRAP_IS_TAKE_ACTUAL_PENDING_BOOKING_QTY);
                if (actualQtyConfigTO != null)
                {
                    configVal = Convert.ToInt32(actualQtyConfigTO.ConfigParamVal);
                }
                if (configVal == 0 && (latestScheduleTO.VehiclePhaseId != (int)Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED
                    || latestScheduleTO.VehiclePhaseId != (int)Constants.PurchaseVehiclePhasesE.RECOVERY || latestScheduleTO.VehiclePhaseId != (int)Constants.PurchaseVehiclePhasesE.CORRECTIONS))
                {
                    enquiryTO.PendingBookingQty = enquiryTO.PendingBookingQty + latestScheduleTO.RejectedQty;
                }
                //else if (configVal == 1 && latestScheduleTO.VehiclePhaseId == 0)
                else if (configVal == 1)
                {
                    enquiryTO.PendingBookingQty = enquiryTO.PendingBookingQty + latestScheduleTO.RejectedQty;
                }

                Int32 pendingQtyLimit = 0;

                TblConfigParamsTO pendingQtyLimitConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.CP_SCRAP_SUADA_PENDING_QTY_LIMIT);
                if (pendingQtyLimitConfigTO != null)
                {
                    pendingQtyLimit = Convert.ToInt32(pendingQtyLimitConfigTO.ConfigParamVal);
                }

                if (enquiryTO.PendingBookingQty < pendingQtyLimit)
                    enquiryTO.PendingBookingQty = 0;

                enquiryTO.IsEnqTransfered = 0;
                result = _iTblPurchaseEnquiryBL.UpdateTblBookingsForPurchase(enquiryTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in UpdateTblBookingsForPurchase(enquiryTO, conn, tran);");
                }


                //Prajakta[2019-05-30] Added to update item wise pending qty
                ResultMessage resultMessageTemp = _iTblPurchaseEnquiryDetailsBL.UpdateEnquiryItemsPendingQty(latestScheduleTO, conn, tran);
                if (resultMessageTemp.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in UpdateEnquiryItemsPendingQty(tblPurchaseScheduleSummaryTO, conn, tran);");
                }

                //latestScheduleTO.VehicleNo = vehicleNo;
                var statusId = latestScheduleTO.StatusId;
                //Update for status
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    if (latestScheduleTO.StatusId == (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING)
                    {
                        latestScheduleTO.VehicleNo = string.Empty;
                        latestScheduleTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                    }

                }

                result = UpdateTblPurchaseScheduleSummary(latestScheduleTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in UpdateTblPurchaseScheduleSummary(scheduleSummaryTO,conn,tran);");
                }

                //Update againast root
                result = UpdateRejectedQtyDtlsAgainstVehicle(latestScheduleTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in UpdateRejectedQtyDtlsAgainstVehicle(scheduleSummaryTO,conn,tran);");
                }
                if (fromApprovalScreen)
                {
                    List<TblPurchaseScheduleStatusHistoryTO> HistoryTOListOld = new List<TblPurchaseScheduleStatusHistoryTO>();
                    if (scheduleSummaryTO.StatusId == (int)Constants.TranStatusE.SEND_FOR_INSPECTION)
                    {
                        HistoryTOListOld = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(latestScheduleTO.RootScheduleId, false, true, (int)Constants.TranStatusE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL, conn, tran);
                    }
                    else
                    {
                        HistoryTOListOld = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(latestScheduleTO.RootScheduleId, false, true, (int)Constants.TranStatusE.UNLOADING_IS_IN_PROCESS, conn, tran);

                    }
                    foreach (var item in HistoryTOListOld)
                    {
                        item.IsApproved = latestScheduleTO.IsApproved;
                        item.IsActive = 0;
                        item.IsLatest = 0;
                        item.UpdatedBy = loginUserId;
                        item.UpdatedOn = serveDate;
                        result = _iTblPurchaseScheduleStatusHistoryBL.UpdateTblPurchaseScheduleStatusHistory(item, conn, tran);
                    }
                    if (result <= 0)
                    {
                        throw new Exception("Error in UpdateRejectedQtyDtlsAgainstVehicle(scheduleSummaryTO,conn,tran);");
                    }

                    // Deepali [16-07-2019] as per requirement last stage is also included for further opertions
                    // result = _iTblPurchaseVehicleStageCntBL.UpdateTblPurchaseVehicleStageCntForWeighing(latestScheduleTO.RootScheduleId, conn, tran);
                    // if (result <= 0)
                    // {
                    //     throw new Exception("Error in UpdateRejectedQtyDtlsAgainstVehicle(scheduleSummaryTO,conn,tran);");
                    // }
                    if (scheduleSummaryTO.StatusId != (int)Constants.TranStatusE.SEND_FOR_INSPECTION)
                    {
                        result = _iTblPurchaseWeighingStageSummaryBL.UpdateTblPurchaseWeighingStageSummaryForIsValid(latestScheduleTO.RootScheduleId, conn, tran);
                        if (result <= 0)
                        {
                            throw new Exception("Error in UpdateTblPurchaseWeighingStageSummaryForIsValid(scheduleSummaryTO.RootScheduleId,conn,tran);");
                        }
                    }
                    if (latestScheduleTO.IsApproved == 2)
                    {
                        TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                        List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                        //get purchase manager of supplier
                        tblAlertUsersTOList = new List<TblAlertUsersTO>();
                        string sourceEntityId = null;

                        if (sourceEntityId == null)
                        {
                            sourceEntityId = latestScheduleTO.ActualRootScheduleId.ToString();
                        }
                        List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                        //_iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL, sourceEntityId);
                        _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.VEH_APPROVAL_PENDING_FOR_SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY, sourceEntityId);

                        //If PM assistant is doing corrections then send notification to respective PM
                        if (enquiryTO != null && enquiryTO.UserId > 0)
                        {
                            if (enquiryTO.UserId != latestScheduleTO.CreatedBy)
                            {
                                TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                                tblAlertUsersTO.UserId = enquiryTO.UserId;
                                tblAlertUsersTO.RaisedOn = serveDate;
                                tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY_REJECTED;
                                tblAlertUsersTOList.Add(tblAlertUsersTO);
                            }

                        }

                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY_REJECTED;
                        tblAlertInstanceTO.AlertAction = "Vehicle Schedule Rejected";
                        tblAlertInstanceTO.AlertComment = "Vehicle no: " + vehicleNo + " is rejected. As Schedule qty = " + latestScheduleTO.Qty + " is greater than sauda pending qty = " + enquiryTO.PendingBookingQty;
                        tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.EffectiveFromDate = _iCommonDAO.ServerDateTime;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceDisplayId = "SPOT_VEH_SCH_REJECTED";
                        tblAlertInstanceTO.SourceEntityId = latestScheduleTO.ActualRootScheduleId;
                        tblAlertInstanceTO.RaisedBy = latestScheduleTO.CreatedBy;
                        tblAlertInstanceTO.RaisedOn = _iCommonDAO.ServerDateTime;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        //Reset Prev alert of Vehicle pending approval
                        AlertsToReset alertsToReset = new AlertsToReset();
                        alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                        ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                        resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEH_APPROVAL_PENDING_FOR_SPOT_VEH_QTY_GREATER_THAN_PEND_SAUDA_QTY;
                        resetAlertInstanceTO.SourceEntityTxnId = latestScheduleTO.RootScheduleId;
                        alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                        tblAlertInstanceTO.AlertsToReset = alertsToReset;


                        notification.SendNotificationToUsers(tblAlertInstanceTO);

                    }
                }
                //@Added by KKM for updte status on gate IoT
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    if (rejectionFlag == 1)
                    {
                        DimStatusTO statusTO = _iDimStatusDAO.SelectDimStatus(Convert.ToInt32(Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING), conn, tran);
                        if (statusTO == null || statusTO.IotStatusId == 0)
                        {
                            throw new Exception("iot status id not found for latestScheduleTO to pass at gate iot");
                            // resultMessage.DefaultBehaviour("iot status id not found for loading to pass at gate iot");
                            // return resultMessage;
                        }
                        object[] statusframeTO = new object[2] { latestScheduleTO.ModbusRefId, statusTO.IotStatusId };
                        result = _iIotCommunication.UpdateLoadingStatusOnGateAPIToModbusTcpApi(latestScheduleTO, statusframeTO);
                        if (result != 1)
                        {
                            resultMessage.DefaultBehaviour("Error while UpdateLoadingStatusOnGateAPIToModbusTcpApi");
                            return resultMessage;
                        }
                    }
                    if (latestScheduleTO.IsWeighing == 1 && tblPurchaseWeighingStageSummaryTOList.Count == 0)
                    {
                        int deleteResult = RemoveDateFromGateAndWeightIOT(latestScheduleTO);
                        if (deleteResult != 1)
                        {
                            throw new Exception("Error While RemoveDateFromGateAndWeightIOT ");
                        }
                        //List<int> list = _iDimensiondao.GeModRefMaxData();
                        //if (list == null)
                        //    throw new Exception("Failed to get ModbusRefList");
                        // _iModbusRefConfig.setModbusRefList(list);
                        latestScheduleTO.ModbusRefId = 0;
                        result = UpdateModbusRefPurchaseSchedule(latestScheduleTO.ActualRootScheduleId, conn, tran);
                        if (result == -1)
                        {
                            throw new Exception("Error in UpdateTblPurchaseScheduleSummary(tempScheduleTO, conn, tran);");
                        }

                    }
                }


                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Vehicle No : " + vehicleNo + " rejected successfully.";
                return resultMessage;

            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in MarkVehicleRejected(TblPurchaseScheduleSummaryTO scheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }

        }

        public ResultMessage InsertWeighingDetails(TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryTO)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;
            DateTime createdDate = _iCommonDAO.ServerDateTime;
            int confiqId = _iTblConfigParamsDAO.IoTSetting();
            Int32 displayMsgResult = 1;
            string displayMsg = string.Empty;
            string vehicalNo = tblPurchaseWeighingStageSummaryTO.VehicleNo;
            try
            {

                conn.Open();
                tran = conn.BeginTransaction();


                //check if tare weight is taken 
                if (tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT))
                {
                    List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, Convert.ToInt32(Constants.TransMeasureTypeE.TARE_WEIGHT).ToString(), conn, tran);
                    if (tblPurchaseWeighingStageSummaryTOList != null && tblPurchaseWeighingStageSummaryTOList.Count > 0)
                    {
                        tran.Rollback();
                        resultMessage.Result = 0;
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.Text = "Already Tare Weight Is Taken";
                        return resultMessage;
                    }

                }
                //If gross weight is taken then update vehicle status as Unloading Is In Process

                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, true, conn, tran);
                //TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = SelectAllEnquiryScheduleSummaryTO(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, true, conn, tran);
                if (tblPurchaseScheduleSummaryTO != null)
                {
                    //tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                }

                #region Check if all flags are completed

                int idSummary = tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId;
                resultMessage = CheckIfAllQualityFlagsAreCompleted(idSummary, tblPurchaseWeighingStageSummaryTO.VehiclePhaseId);
                if (resultMessage.Result > 0)
                {
                    resultMessage.Result = 0;
                    return resultMessage;
                }
                #endregion

                if (tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == Convert.ToInt32(Constants.TransMeasureTypeE.GROSS_WEIGHT))
                {

                    if (tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == Convert.ToInt32(Constants.TransMeasureTypeE.GROSS_WEIGHT))
                    {
                        TblConfigParamsTO partyWtDtlsConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_PARTY_WT_MANDATORY_WHILE_WEIGHING_COMPLETE, conn, tran);
                        if (partyWtDtlsConfigTO != null && partyWtDtlsConfigTO.ConfigParamVal == "1")
                        {
                            TblPartyWeighingMeasuresTO tblPartyWeighingMeasuresTO = _iTblPartyWeighingMeasuresBL.SelectTblPartyWeighingMeasuresTOByPurSchedSummaryId(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, conn, tran);
                            if (tblPartyWeighingMeasuresTO == null)
                            {
                                resultMessage.DefaultBehaviour();
                                resultMessage.DisplayMessage = "Please fill party weighing details before proceding.";
                                return resultMessage;
                            }

                        }
                    }

                    if (tblPurchaseScheduleSummaryTO != null)
                    {
                        tblPurchaseScheduleSummaryTO.LatestWtTakenOn = createdDate;
                        tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_IS_IN_PROCESS);
                        tblPurchaseScheduleSummaryTO.UpdatedBy = tblPurchaseWeighingStageSummaryTO.CreatedBy;
                        tblPurchaseScheduleSummaryTO.UpdatedOn = createdDate;
                        //@Added by KKM for updte status on gate IoT
                        if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                        {
                            tblPurchaseScheduleSummaryTO.VehicleNo = string.Empty;
                            tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                            DimStatusTO statusTO = _iDimStatusDAO.SelectDimStatus(Convert.ToInt32(Constants.TranStatusE.UNLOADING_IS_IN_PROCESS), conn, tran);
                            if (statusTO == null || statusTO.IotStatusId == 0)
                            {
                                resultMessage.DefaultBehaviour("iot status id not found for loading to pass at gate iot");
                                return resultMessage;
                            }
                            object[] statusframeTO = new object[2] { tblPurchaseScheduleSummaryTO.ModbusRefId, statusTO.IotStatusId };
                            result = _iIotCommunication.UpdateLoadingStatusOnGateAPIToModbusTcpApi(tblPurchaseScheduleSummaryTO, statusframeTO);
                            if (result != 1)
                            {
                                resultMessage.DefaultBehaviour("Error while UpdateLoadingStatusOnGateAPIToModbusTcpApi");
                                return resultMessage;
                            }
                        }
                        else
                        {
                            tblPurchaseScheduleSummaryTO.VehicleNo = tblPurchaseWeighingStageSummaryTO.VehicleNo;
                            tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_IS_IN_PROCESS);
                        }

                        result = UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result <= 0)
                        {
                            tran.Rollback();
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error While Updating Schedule Status";
                            return resultMessage;
                        }
                        tblPurchaseScheduleSummaryTO.VehicleNo = tblPurchaseWeighingStageSummaryTO.VehicleNo;
                        tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.UNLOADING_IS_IN_PROCESS);
                        tblPurchaseScheduleSummaryTO.IsStatusUpdate = 1;
                        //save vehicle history details
                        resultMessage = _iTblPurchaseSchStatusHistoryBL.SavePurVehStatusHistory(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            return resultMessage;
                        }
                    }
                }

                if (tblPurchaseWeighingStageSummaryTO.IsSaveWtStage)
                {
                    List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
                    if (tblPurchaseWeighingStageSummaryTOList == null || tblPurchaseWeighingStageSummaryTOList.Count == 0)
                    {
                        tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, Convert.ToInt32(Constants.TransMeasureTypeE.GROSS_WEIGHT).ToString(), conn, tran);
                        if (tblPurchaseWeighingStageSummaryTOList == null || tblPurchaseWeighingStageSummaryTOList.Count == 0)
                        {
                            throw new Exception("tblPurchaseWeighingStageSummaryTOList == null");
                        }
                    }

                    TblPurchaseWeighingStageSummaryTO lastTO = tblPurchaseWeighingStageSummaryTOList[tblPurchaseWeighingStageSummaryTOList.Count - 1];

                    TblPurchaseWeighingStageSummaryTO tempInterMediateWtTO = tblPurchaseWeighingStageSummaryTO.DeepCopy();
                    tempInterMediateWtTO.WeightMeasurTypeId = (Int32)Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT;
                    tempInterMediateWtTO.GrossWeightMT = lastTO.ActualWeightMT;
                    tempInterMediateWtTO.ActualWeightMT = tblPurchaseWeighingStageSummaryTO.ActualWeightMT;
                    tempInterMediateWtTO.NetWeightMT = lastTO.ActualWeightMT - tblPurchaseWeighingStageSummaryTO.ActualWeightMT;

                    result = _iTblPurchaseWeighingStageSummaryBL.InsertTblPurchaseWeighingStageSummary(tempInterMediateWtTO, conn, tran);
                    if (result <= 0)
                    {
                        throw new Exception("Erorr in  InsertTblPurchaseWeighingStageSummary(tempInterMediateWtTO, conn, tran);");
                    }
                    else
                    {
                        resultMessage = _iTblPurchaseVehicleStageCntBL.InsertOrUpdateVehicleWtStageCount(tblPurchaseScheduleSummaryTO, tempInterMediateWtTO, null, null, null, conn, tran);
                        if (resultMessage.Result <= 0)
                        {
                            throw new Exception("Error in InsertOrUpdateVehicleWtStageCount(tblPurchaseScheduleSummaryTO, tblPurchaseWeighingStageSummaryTO, null, null, conn, tran);");
                        }



                        tblPurchaseWeighingStageSummaryTO.WeightStageId = tempInterMediateWtTO.WeightStageId + 1;
                    }
                }

                TblPurchaseWeighingStageSummaryTO tblPurchaseWeighingStageSummaryIoT = tblPurchaseWeighingStageSummaryTO.DeepCopy();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    tblPurchaseWeighingStageSummaryIoT.ActualWeightMT = 0;
                    tblPurchaseWeighingStageSummaryIoT.NetWeightMT = 0;
                    tblPurchaseWeighingStageSummaryIoT.GrossWeightMT = 0;
                    tblPurchaseWeighingStageSummaryIoT.WeightMeasurTypeId = 0;
                    tblPurchaseWeighingStageSummaryIoT.VehicleNo = string.Empty;
                }
                result = _iTblPurchaseWeighingStageSummaryBL.InsertTblPurchaseWeighingStageSummary(tblPurchaseWeighingStageSummaryIoT, conn, tran);


                //if (result > 0 && tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT))
                {
                    resultMessage = _iTblPurchaseVehicleStageCntBL.InsertOrUpdateVehicleWtStageCount(tblPurchaseScheduleSummaryTO, tblPurchaseWeighingStageSummaryTO, null, null, null, conn, tran);
                    result = resultMessage.Result;
                }
                if (result <= 0)
                {
                    tran.Rollback();
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.Text = "Error While Saving Weighing Details";
                    return resultMessage;
                }
                tblPurchaseWeighingStageSummaryTO.IdPurchaseWeighingStage = tblPurchaseWeighingStageSummaryIoT.IdPurchaseWeighingStage;
                ////@Added by KKM for write weghing data on weight IoT 
                //if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                //{
                //    List<int[]> frameList = _iIotCommunication.GenerateFrameData(tblPurchaseScheduleSummaryTO, tblPurchaseWeighingStageSummaryTO);
                //    if (frameList != null && frameList.Count > 0)
                //    {
                //        for (int f = 0; f < frameList.Count; f++)
                //        {
                //            TblWeighingMachineTO machineTO = _iTblWeighingMachineDAO.SelectTblWeighingMachine(tblPurchaseWeighingStageSummaryTO.WeighingMachineId);
                //            if (machineTO == null)
                //            {
                //                tran.Rollback();
                //                resultMessage.DefaultBehaviour("MachineTo or IoT not found ");
                //                return resultMessage;
                //            }
                //            result = _iWeighingCommunication.PostDataFrommodbusTcpApi(tblPurchaseScheduleSummaryTO, frameList[f], machineTO);
                //            if (result != 1)
                //            {
                //                tran.Rollback();
                //                resultMessage.Text = "Error in PostDataFrommodbusTcpApi";
                //                resultMessage.MessageType = ResultMessageE.Error;
                //                resultMessage.DisplayMessage = "Failed due to network error, Please try one more time";
                //                resultMessage.Result = 0;
                //                return resultMessage;
                //            }
                //        }
                //    }
                //}
                TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_UNLD_COMPLETE_WHILE_WEIGHING_COMPLETE, conn, tran);
                if (tblConfigParamsTO != null && tblConfigParamsTO.ConfigParamVal == "1")
                {
                    if (result > 0 && tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT))
                    {
                        resultMessage = InsertPurchaseUnloadingDtls(tblPurchaseWeighingStageSummaryTO, createdDate, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            return resultMessage;
                        }
                        if (resultMessage.Result == 2)
                        {
                            displayMsgResult = resultMessage.Result;
                            displayMsg = resultMessage.DisplayMessage;
                        }

                    }

                }

                if (tblPurchaseScheduleSummaryTO.RejectedBy > 0 && tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == (Int32)Constants.TransMeasureTypeE.TARE_WEIGHT)
                {
                    List<TblPurchaseWeighingStageSummaryTO> intermediateWtDtlsList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
                    if (intermediateWtDtlsList == null || intermediateWtDtlsList.Count == 0)
                    {
                        tblPurchaseWeighingStageSummaryTO.IsUpdateIsWeigingFlag = false;
                        tblPurchaseScheduleSummaryTO.IsRecovery = 1;
                        tblPurchaseScheduleSummaryTO.IsGradingCompleted = 1;
                        tblPurchaseScheduleSummaryTO.IsUnloadingCompleted = 1;
                        //tblPurchaseScheduleSummaryTO.IsCorrectionCompleted = 1;

                        // result = UpdateCorrectionCompletedFlag(tblPurchaseScheduleSummaryTO, conn, tran);
                        // if (result == -1)
                        // {
                        //     throw new Exception("Error in UpdateCorrectionCompletedFlag(tblPurchaseScheduleSummaryTO,conn,tran)");
                        // }                        
                        //tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_GROSS_WEIGHT;

                        //@Added by KKM for updte status on gate IoT
                        if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                        {
                            tblPurchaseScheduleSummaryTO.VehicleNo = string.Empty;
                            tblPurchaseScheduleSummaryTO.StatusId = Convert.ToInt32(Constants.TranStatusE.New);
                            DimStatusTO statusTO = _iDimStatusDAO.SelectDimStatus(Convert.ToInt32(Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING), conn, tran);
                            if (statusTO == null || statusTO.IotStatusId == 0)
                            {
                                resultMessage.DefaultBehaviour("iot status id not found for tblPurchaseScheduleSummaryTO to pass at gate iot");
                                return resultMessage;
                            }
                            object[] statusframeTO = new object[2] { tblPurchaseScheduleSummaryTO.ModbusRefId, statusTO.IotStatusId };
                            result = _iIotCommunication.UpdateLoadingStatusOnGateAPIToModbusTcpApi(tblPurchaseScheduleSummaryTO, statusframeTO);
                            if (result != 1)
                            {
                                resultMessage.DefaultBehaviour("Error while UpdateLoadingStatusOnGateAPIToModbusTcpApi");
                                return resultMessage;
                            }
                        }
                        else
                        {
                            tblPurchaseScheduleSummaryTO.VehicleNo = tblPurchaseWeighingStageSummaryTO.VehicleNo;
                            tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING;
                        }

                        tblPurchaseScheduleSummaryTO.CreatedBy = tblPurchaseWeighingStageSummaryTO.CreatedBy;
                        tblPurchaseScheduleSummaryTO.CreatedOn = createdDate;
                        tblPurchaseScheduleSummaryTO.UpdatedBy = tblPurchaseWeighingStageSummaryTO.CreatedBy;
                        tblPurchaseScheduleSummaryTO.UpdatedOn = createdDate;

                        // result = _iTblPurchaseScheduleSummaryDAO.UpdateStatusWeighingCompletedAgainstVehicle(tblPurchaseScheduleSummaryTO, conn, tran);
                        // if (result <= 0)
                        // {
                        //     tran.Rollback();
                        //     resultMessage.MessageType = ResultMessageE.Error;
                        //     resultMessage.Text = "Error While Updateing Weighing Status Details";
                        //     return resultMessage;
                        // }


                        result = _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummary(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result <= 0)
                        {
                            tran.Rollback();
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error While Updateing Weighing Status Details";
                            return resultMessage;
                        }

                        result = InsertTareWt(tblPurchaseScheduleSummaryTO, conn, tran);
                        if (result <= 0)
                        {
                            tran.Rollback();
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error While Saving Weighing Details";
                            return resultMessage;
                        }
                    }
                }


                //Prajakta[2019-06-12] Added to mark isWeighing completed for vehicle rejected
                if (tblPurchaseWeighingStageSummaryTO.IsUpdateIsWeigingFlag)
                {
                    tblPurchaseScheduleSummaryTO.IsWeighing = 1;
                    resultMessage = UpdateWeighingCompletedAgainstVehicle(tblPurchaseScheduleSummaryTO, tblPurchaseWeighingStageSummaryTO.CreatedBy, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        tran.Rollback();
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.Text = "Error While Saving Weighing Details";
                        return resultMessage;
                    }
                }

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId);
                if (enquiryTO == null)
                {
                    tran.Rollback();
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.Text = "Error While Saving Weighing Details";
                    return resultMessage;
                }



                int result1 = 0;
                bool skipCheck = false;
                List<TblPurchaseScheduleStatusHistoryTO> HistoryTOListOld = new List<TblPurchaseScheduleStatusHistoryTO>();

                HistoryTOListOld = _iTblPurchaseScheduleStatusHistoryBL.SelectTblPurchaseScheduleStatusHistoryTO(tblPurchaseScheduleSummaryTO.RootScheduleId > 0 ? tblPurchaseScheduleSummaryTO.RootScheduleId : tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary, true, true, (int)Constants.TranStatusE.UNLOADING_IS_IN_PROCESS, conn, tran);
                if (HistoryTOListOld != null && HistoryTOListOld.Count > 0)
                {
                    foreach (var item in HistoryTOListOld)
                    {
                        if (item.IsApproved == 1)
                        {
                            skipCheck = true;
                        }
                    }
                }
                //Add && confiqId condition add to avoid checkIfQtyGoesOutofBand method when db 
                if (skipCheck == false && confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.DB))
                {
                    resultMessage = checkIfQtyGoesOutofBand(tblPurchaseScheduleSummaryTO, enquiryTO, conn, tran);
                    if (resultMessage.Result == 0)
                    {
                        tblPurchaseWeighingStageSummaryTO.IsValid = 1;
                        result1 = _iTblPurchaseWeighingStageSummaryDAO.updateIsValidFlagToInvalid(tblPurchaseWeighingStageSummaryTO, conn, tran);
                        if (result1 == 0)
                        {
                            tran.Rollback();
                            resultMessage.MessageType = ResultMessageE.Error;
                            resultMessage.Text = "Error While Saving Weighing Details";
                            return resultMessage;
                        }
                    }
                }

                if (resultMessage.Result == 0 && tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == (int)Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT)
                {
                    TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                    List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    Int32 conversionFact = 1000;
                    //get purchase manager of supplier
                    tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    string sourceEntityId = null;

                    if (sourceEntityId == null)
                    {
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId.ToString();
                        }
                        else
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary.ToString();
                        }
                    }
                    List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.WEIGHING_STAGE_COMPLETED, sourceEntityId);

                    if (enquiryTO != null)
                    {
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = enquiryTO.UserId;
                        tblAlertUsersTO.RaisedOn = createdDate;
                        tblAlertUsersTOList.Add(tblAlertUsersTO);
                    }

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL;
                    tblAlertInstanceTO.AlertAction = "Vehicle Schedule Pending For Approval";
                    tblAlertInstanceTO.AlertComment = "Vehicle no: " + vehicalNo + " of booking No :" + enquiryTO.EnqDisplayNo + " is pending for  approval On weighing as weighing qty is greater than total sauda qty";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = createdDate;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceDisplayId = "VEHICLE_SCHEDULE_PENDING_FOR_APPROVAL";
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    }
                    else
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary;
                    }
                    tblAlertInstanceTO.RaisedBy = tblPurchaseWeighingStageSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = createdDate;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    //Reset Prev alert of Vehicle Send In
                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.WEIGHING_STAGE_COMPLETED;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.RootScheduleId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;


                    notification.SendNotificationToUsers(tblAlertInstanceTO);

                }

                if (resultMessage.Result == 1 && tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == (int)Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT)
                {
                    TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                    List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    Int32 conversionFact = 1000;
                    //get purchase manager of supplier
                    tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO1 = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, true, conn, tran);
                    string sourceEntityId = null;

                    if (sourceEntityId == null)
                    {
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO.RootScheduleId.ToString();
                        }
                        else
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO.IdPurchaseScheduleSummary.ToString();
                        }
                    }
                    List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.WEIGHING_STAGE_COMPLETED, sourceEntityId);

                    if (tblPurchaseScheduleSummaryTO1 != null)
                    {
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO1.SupervisorId;
                        tblAlertUsersTO.RaisedOn = createdDate;
                        tblAlertUsersTOList.Add(tblAlertUsersTO);
                    }

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.WEIGHING_STAGE_COMPLETED;
                    tblAlertInstanceTO.AlertAction = "WEIGHING_STAGE_COMPLETED";
                    // tblAlertInstanceTO.AlertComment = "Weighing Stage " + tblPurchaseWeighingStageSummaryTO.WeightStageId  + " Completed For Scrap Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " With Net Weight- " + tblPurchaseWeighingStageSummaryTO.NetWeightMT;
                    tblAlertInstanceTO.AlertComment = "Weighing Stage " + tblPurchaseWeighingStageSummaryTO.WeightStageId + " completed for Vehicle No:" + tblPurchaseWeighingStageSummaryTO.VehicleNo + " with nt. wt-" + tblPurchaseWeighingStageSummaryTO.NetWeightMT / conversionFact + "(MT)";
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = createdDate;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceDisplayId = "WEIGHING_STAGE_COMPLETED";
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO1.RootScheduleId;
                    }
                    else
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO1.IdPurchaseScheduleSummary;
                    }
                    tblAlertInstanceTO.RaisedBy = tblPurchaseWeighingStageSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = createdDate;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    //Reset Prev alert of Vehicle Send In
                    AlertsToReset alertsToReset = new AlertsToReset();
                    alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                    ResetAlertInstanceTO resetAlertInstanceTO = new ResetAlertInstanceTO();
                    resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SEND_IN;
                    resetAlertInstanceTO.SourceEntityTxnId = tblPurchaseScheduleSummaryTO.ParentPurchaseScheduleSummaryId;
                    alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                    tblAlertInstanceTO.AlertsToReset = alertsToReset;


                    notification.SendNotificationToUsers(tblAlertInstanceTO);

                }

                if (tblPurchaseWeighingStageSummaryTO.WeightMeasurTypeId == (int)Constants.TransMeasureTypeE.GROSS_WEIGHT)
                {
                    TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                    List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    Int32 conversionFact = 1000;
                    //get supervisor
                    tblAlertUsersTOList = new List<TblAlertUsersTO>();
                    TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO1 = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseWeighingStageSummaryTO.PurchaseScheduleSummaryId, true, conn, tran);
                    string sourceEntityId = null;
                    if (sourceEntityId == null)
                    {
                        if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO1.RootScheduleId.ToString();
                        }
                        else
                        {
                            sourceEntityId = tblPurchaseScheduleSummaryTO1.IdPurchaseScheduleSummary.ToString();
                        }
                    }
                    List<TblAlertUsersTO> AlertUsersTOList = new List<TblAlertUsersTO>();
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.SEND_IN, sourceEntityId);


                    if (tblPurchaseScheduleSummaryTO1 != null)
                    {
                        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                        tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO1.SupervisorId;
                        tblAlertUsersTO.RaisedOn = createdDate;
                        tblAlertUsersTOList.Add(tblAlertUsersTO);
                    }

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.WEIGHING_STAGE_COMPLETED;
                    tblAlertInstanceTO.AlertAction = "WEIGHING_STAGE_COMPLETED";
                    // tblAlertInstanceTO.AlertComment = "Weighing Stage " + tblPurchaseWeighingStageSummaryTO.WeightStageId  + " Completed For Scrap Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " With Net Weight- " + tblPurchaseWeighingStageSummaryTO.NetWeightMT;
                    tblAlertInstanceTO.AlertComment = "Gross weight is taken for vehicle no. " + tblPurchaseWeighingStageSummaryTO.VehicleNo;
                    tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                    tblAlertInstanceTO.EffectiveFromDate = createdDate;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceDisplayId = "WEIGHING_STAGE_COMPLETED";
                    if (tblPurchaseScheduleSummaryTO.RootScheduleId > 0)
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO1.RootScheduleId;
                    }
                    else
                    {
                        tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO1.IdPurchaseScheduleSummary;
                    }
                    tblAlertInstanceTO.RaisedBy = tblPurchaseWeighingStageSummaryTO.CreatedBy;
                    tblAlertInstanceTO.RaisedOn = createdDate;
                    tblAlertInstanceTO.IsAutoReset = 1;


                    notification.SendNotificationToUsers(tblAlertInstanceTO);

                }
                //@Added by KKM for write weghing data on weight IoT 
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    List<int[]> frameList = _iIotCommunication.GenerateFrameData(tblPurchaseScheduleSummaryTO, tblPurchaseWeighingStageSummaryTO);
                    if (frameList != null && frameList.Count > 0)
                    {
                        for (int f = 0; f < frameList.Count; f++)
                        {
                            TblWeighingMachineTO machineTO = _iTblWeighingMachineDAO.SelectTblWeighingMachine(tblPurchaseWeighingStageSummaryTO.WeighingMachineId);
                            if (machineTO == null)
                            {
                                tran.Rollback();
                                resultMessage.DefaultBehaviour("MachineTo or IoT not found ");
                                return resultMessage;
                            }
                            result = _iWeighingCommunication.PostDataFrommodbusTcpApi(tblPurchaseScheduleSummaryTO, frameList[f], machineTO);
                            if (result != 1)
                            {
                                tran.Rollback();
                                resultMessage.Text = "Error in PostDataFrommodbusTcpApi";
                                resultMessage.MessageType = ResultMessageE.Error;
                                resultMessage.DisplayMessage = "Failed due to network error, Please try one more time";
                                resultMessage.Result = 0;
                                return resultMessage;
                            }
                        }
                    }
                }
                tran.Commit();
                if (resultMessage.Result == 1)
                {
                    resultMessage.MessageType = ResultMessageE.Information;
                    resultMessage.Text = "Record Saved Successfully.";
                    resultMessage.DisplayMessage = "Record Saved Successfully.";

                }
                resultMessage.Result = 1;
                if (!String.IsNullOrEmpty(displayMsg) && displayMsgResult == 2)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = displayMsg;
                    resultMessage.Result = displayMsgResult;
                }
                // resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "InsertWeighingDetails At BL");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }


        public List<DropDownTO> GetBaseMetalCostList(Int32 rootScheduleId)
        {
            List<DropDownTO> list = new List<DropDownTO>();
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            List<TblBaseItemMetalCostTO> baseMetalCostList = new List<TblBaseItemMetalCostTO>();

            Int32 statusId = Convert.ToInt32(Constants.TranStatusE.SEND_FOR_INSPECTION);
            //Int32 vehiclePhaseId = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED);
            Int32 vehiclePhaseId = 0;

            //Get Current date base metal cost details
            currentDate = Constants.GetEndDateTime(currentDate);
            // List<TblGlobalRatePurchaseTO> currentGlobalRatePurchaseDtlsList = _iTblGlobalRatePurchaseDAO.SelectLatestRateOfPurchaseDCT(currentDate);
            // if (currentGlobalRatePurchaseDtlsList != null && currentGlobalRatePurchaseDtlsList.Count == 1)
            // {
            //     Int32 globalRatePurchaseId = currentGlobalRatePurchaseDtlsList[0].IdGlobalRatePurchase;
            //     List<TblBaseItemMetalCostTO> currentDateBaseMetalCostList = _iTblBaseItemMetalCostBL.SelectLatestBaseItemMetalCost(globalRatePurchaseId);
            //     if (currentDateBaseMetalCostList != null && currentDateBaseMetalCostList.Count > 0)
            //     {
            //         TblBaseItemMetalCostTO tempTO = new TblBaseItemMetalCostTO();
            //         GetBaseItemCostAsPerCOrNC(currentDateBaseMetalCostList, tempTO);
            //         tempTO.DeclaredRate = currentGlobalRatePurchaseDtlsList[0].Rate;
            //         tempTO.BaseMetalCostDate = currentDate;
            //         baseMetalCostList.Add(tempTO);
            //         FillDropDownForBaseMetalCostList(list, baseMetalCostList, (Int32)Constants.BaseMetalCostE.CURRENT_DATE);
            //     }
            // }

            List<TblPurchaseScheduleSummaryTO> unloadingCompletedList = SelectVehicleScheduleByRootAndStatusId(rootScheduleId, statusId, vehiclePhaseId);
            if (unloadingCompletedList != null && unloadingCompletedList.Count > 0)
            {
                DateTime unloadingCompletedDate = unloadingCompletedList[0].CreatedOn;

                List<TblGlobalRatePurchaseTO> unloadingCompleGlobalRatePurchaseDtlsList = _iTblGlobalRatePurchaseDAO.SelectLatestRateOfPurchaseDCT((unloadingCompletedDate), false);

                if (unloadingCompleGlobalRatePurchaseDtlsList != null && unloadingCompleGlobalRatePurchaseDtlsList.Count == 1)
                {
                    baseMetalCostList = new List<TblBaseItemMetalCostTO>();
                    Int32 globalRatePurchaseId = unloadingCompleGlobalRatePurchaseDtlsList[0].IdGlobalRatePurchase;
                    List<TblBaseItemMetalCostTO> unloadingCompleBaseMetalCostList = _iTblBaseItemMetalCostBL.SelectLatestBaseItemMetalCost(globalRatePurchaseId);
                    if (unloadingCompleBaseMetalCostList != null && unloadingCompleBaseMetalCostList.Count > 0)
                    {
                        TblBaseItemMetalCostTO tempTO = new TblBaseItemMetalCostTO();
                        GetBaseItemCostAsPerCOrNC(unloadingCompleBaseMetalCostList, tempTO);
                        tempTO.DeclaredRate = unloadingCompleGlobalRatePurchaseDtlsList[0].Rate;
                        tempTO.BaseMetalCostDate = unloadingCompletedDate;
                        baseMetalCostList.Add(tempTO);
                        FillDropDownForBaseMetalCostList(list, baseMetalCostList, (Int32)Constants.BaseMetalCostE.UNLOADING_DATE);
                    }
                }

            }

            return list;
        }

        public List<TblBaseItemMetalCostTO> GetBaseMetalCostListTo(Int32 rootScheduleId)
        {
            List<DropDownTO> list = new List<DropDownTO>();
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            List<TblBaseItemMetalCostTO> baseMetalCostList = new List<TblBaseItemMetalCostTO>();

            Int32 statusId = Convert.ToInt32(Constants.TranStatusE.SEND_FOR_INSPECTION);
            Int32 vehiclePhaseId = 0;

            //Get Current date base metal cost details
            currentDate = Constants.GetEndDateTime(currentDate);

            List<TblPurchaseScheduleSummaryTO> unloadingCompletedList = SelectVehicleScheduleByRootAndStatusId(rootScheduleId, statusId, vehiclePhaseId);
            if (unloadingCompletedList != null && unloadingCompletedList.Count > 0)
            {
                int confiqId = _iTblConfigParamsDAO.IoTSetting();
                if (confiqId == Convert.ToInt32(Constants.WeighingDataSourceE.IoT))
                {
                    unloadingCompletedList = unloadingCompletedList.Where(a => a.StatusId == statusId).ToList();
                }
            }

            if (unloadingCompletedList != null && unloadingCompletedList.Count > 0)
            {
                DateTime unloadingCompletedDate = unloadingCompletedList[0].CreatedOn;

                List<TblGlobalRatePurchaseTO> unloadingCompleGlobalRatePurchaseDtlsList = _iTblGlobalRatePurchaseDAO.SelectLatestRateOfPurchaseDCT((unloadingCompletedDate), false);

                if (unloadingCompleGlobalRatePurchaseDtlsList != null && unloadingCompleGlobalRatePurchaseDtlsList.Count == 1)
                {
                    baseMetalCostList = new List<TblBaseItemMetalCostTO>();
                    Int32 globalRatePurchaseId = unloadingCompleGlobalRatePurchaseDtlsList[0].IdGlobalRatePurchase;
                    List<TblBaseItemMetalCostTO> unloadingCompleBaseMetalCostList = _iTblBaseItemMetalCostBL.SelectLatestBaseItemMetalCost(globalRatePurchaseId);
                    if (unloadingCompleBaseMetalCostList != null && unloadingCompleBaseMetalCostList.Count > 0)
                    {
                        TblBaseItemMetalCostTO tempTO = new TblBaseItemMetalCostTO();
                        GetBaseItemCostAsPerCOrNC(unloadingCompleBaseMetalCostList, tempTO);
                        tempTO.DeclaredRate = unloadingCompleGlobalRatePurchaseDtlsList[0].Rate;
                        tempTO.BaseMetalCostDate = unloadingCompletedDate;
                        baseMetalCostList.Add(tempTO);
                        FillDropDownForBaseMetalCostList(list, baseMetalCostList, (Int32)Constants.BaseMetalCostE.UNLOADING_DATE);
                    }
                }

            }

            return baseMetalCostList;
        }

        public void FillDropDownForBaseMetalCostList(List<DropDownTO> list, List<TblBaseItemMetalCostTO> baseMetalCostList, Int32 baseMetalCostE)
        {
            if (baseMetalCostList != null && baseMetalCostList.Count > 0)
            {
                for (int i = 0; i < baseMetalCostList.Count; i++)
                {
                    DropDownTO dropDownTO = new DropDownTO();

                    // if (baseMetalCostE == (Int32)Constants.BaseMetalCostE.CURRENT_DATE)
                    // {
                    //     dropDownTO.Text = "Current Date";
                    //     dropDownTO.Value = (Int32)Constants.BaseMetalCostE.CURRENT_DATE;
                    //     dropDownTO.Tag = baseMetalCostList[i];
                    // }
                    //else 
                    if (baseMetalCostE == (Int32)Constants.BaseMetalCostE.UNLOADING_DATE)
                    {
                        dropDownTO.Text = "Unloading Date";
                        dropDownTO.Value = (Int32)Constants.BaseMetalCostE.UNLOADING_DATE;
                        dropDownTO.Tag = baseMetalCostList[i];
                    }

                    list.Add(dropDownTO);
                }
            }
        }

        public List<TblPurchaseScheduleSummaryTO> CompareVehItemDtlsWithCurrentOrUnloladingDate(List<TblPurchaseScheduleSummaryTO> scheduleToList, DropDownTO dropDownTO)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;

            List<TblPurchaseScheduleSummaryTO> scheduleToReturnList = new List<TblPurchaseScheduleSummaryTO>();

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                TblBaseItemMetalCostTO tblBaseItemMetalCostTO = JsonConvert.DeserializeObject<TblBaseItemMetalCostTO>(dropDownTO.Tag.ToString());

                resultMessage = CalculateVehItemDtlsWithCurrentOrUnloladingDate(scheduleToList, dropDownTO, tblBaseItemMetalCostTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in CalculateVehItemDtlsWithCurrentOrUnloladingDate(scheduleToList,dropDownTO,conn,tran);");
                }

                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseScheduleSummaryTO>))
                {
                    scheduleToReturnList = (List<TblPurchaseScheduleSummaryTO>)resultMessage.Tag;
                }

                CombineSameVehPhaseIdRecord(scheduleToReturnList);
                resultMessage.DefaultSuccessBehaviour();
                return scheduleToReturnList;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CompareVehItemDtlsWithCurrentOrUnloladingDate(List<TblPurchaseScheduleSummaryTO> scheduleToList,Int32 baseItemCostE)");
                scheduleToReturnList = null;
                return scheduleToReturnList;
            }
            finally
            {
                conn.Close();
            }
        }


        public ResultMessage CalculateVehItemDtlsWithCurrentOrUnloladingDate(List<TblPurchaseScheduleSummaryTO> scheduleToList, DropDownTO dropDownTO, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;
            List<TblPurchaseScheduleSummaryTO> scheduleToReturnList = new List<TblPurchaseScheduleSummaryTO>();

            try
            {
                if (scheduleToList == null || scheduleToList.Count == 0)
                {
                    throw new Exception("scheduleToList == null");
                }

                if (dropDownTO == null)
                {
                    throw new Exception("dropDownTO == null");
                }

                TblPurchaseScheduleSummaryTO scheduleTO = scheduleToList[0];

                if (tblBaseItemMetalCostTO == null)
                {
                    throw new Exception("tblBaseItemMetalCostTO == null");
                }

                List<TblProductItemTO> parityDtlsList = null;

                parityDtlsList = _iTblProductItemBL.GetGradeBookingParityDtls(tblBaseItemMetalCostTO.BaseMetalCostDate, scheduleTO.ProdClassId, scheduleTO.StateId);

                if (parityDtlsList == null || parityDtlsList.Count == 0)
                {
                    throw new Exception("parityDtlsList == null");
                }

                for (int i = 0; i < scheduleToList.Count; i++)
                {
                    TblPurchaseScheduleSummaryTO tempScheduleTO = scheduleToList[i];

                    resultMessage = GetBaseMetalCalCompareDtls(tempScheduleTO, parityDtlsList, tblBaseItemMetalCostTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("GetBaseMetalCalCompareDtls(tempScheduleTO,parityDtlsList,tblBaseItemMetalCostTO,conn,tran);");
                    }

                    scheduleToReturnList.Add(tempScheduleTO);

                    TblPurchaseScheduleSummaryTO tempScheduleTOForCompare = null;

                    if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(TblPurchaseScheduleSummaryTO))
                    {
                        tempScheduleTOForCompare = (TblPurchaseScheduleSummaryTO)resultMessage.Tag;
                        scheduleToReturnList.Add(tempScheduleTOForCompare);
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = scheduleToReturnList;
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CalculateVehItemDtlsWithCurrentOrUnloladingDate(List<TblPurchaseScheduleSummaryTO> scheduleToList, DropDownTO dropDownTO, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage GetBaseMetalCalCompareDtls(TblPurchaseScheduleSummaryTO tempScheduleTO, List<TblProductItemTO> parityDtlsList, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {

                if (tempScheduleTO == null)
                {
                    throw new Exception("tempScheduleTO == null");
                }

                if (parityDtlsList == null || parityDtlsList.Count == 0)
                {
                    throw new Exception("parityDtlsList == null");
                }

                if (tblBaseItemMetalCostTO == null)
                {
                    throw new Exception("tblBaseItemMetalCostTO == null");
                }

                List<Int32> vehiclePhaseIds = GetVehiclePhaseList();

                TblPurchaseScheduleSummaryTO tempScheduleTOForCompare = tempScheduleTO.DeepCopy();
                tempScheduleTOForCompare.VehiclePhaseName = "Unld Padta " + tempScheduleTOForCompare.VehiclePhaseName;
                List<TblPurchaseVehicleDetailsTO> tempList = PurchaseVehicleDetailsTOList(tempScheduleTO.PurchaseScheduleSummaryDetailsTOList);

                tempScheduleTOForCompare.PurchaseScheduleSummaryDetailsTOList = new List<TblPurchaseVehicleDetailsTO>();
                tempScheduleTOForCompare.PurchaseScheduleSummaryDetailsTOList.AddRange(tempList);


                if (tempScheduleTOForCompare.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                {
                    tempScheduleTOForCompare.BaseMetalCostForNC = 0;
                    tempScheduleTOForCompare.BaseMetalCost = tblBaseItemMetalCostTO.BaseMetalCostForC;
                }
                else if (tempScheduleTOForCompare.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                {
                    tempScheduleTOForCompare.BaseMetalCost = 0;
                    tempScheduleTOForCompare.BaseMetalCostForNC = tblBaseItemMetalCostTO.BaseMetalCostForC;
                }

                GetItemRateAsPerParity(tempScheduleTOForCompare.COrNcId, tempScheduleTOForCompare.VehiclePhaseId, parityDtlsList, tempScheduleTOForCompare.PurchaseScheduleSummaryDetailsTOList, tblBaseItemMetalCostTO, vehiclePhaseIds);

                resultMessage = CalculateItemDetails(tempScheduleTOForCompare.PurchaseScheduleSummaryDetailsTOList, tempScheduleTOForCompare, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error while calculation of item details");
                }

                double baseMetalCost = CalculateItemsMetalCost(tempScheduleTOForCompare.PurchaseScheduleSummaryDetailsTOList, tempScheduleTOForCompare);
                AsignSignleGradePadtaVal(baseMetalCost, tempScheduleTOForCompare.PurchaseScheduleSummaryDetailsTOList);
                tempScheduleTOForCompare.IsForCompare = 1;


                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = tempScheduleTOForCompare;
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in GetBaseMetalCalCompareDtls()");
                return resultMessage;
            }
        }

        public void GetItemRateAsPerParity(Int32 cOrNcId, Int32 vehiclePhaseId, List<TblProductItemTO> parityDtlsList, List<TblPurchaseVehicleDetailsTO> tblPurchaseVehicleDetailsTOList, TblBaseItemMetalCostTO tblBaseItemMetalCostTO, List<Int32> vehiclePhaseIds)
        {
            if (tblPurchaseVehicleDetailsTOList != null && tblPurchaseVehicleDetailsTOList.Count > 0)
            {
                if (parityDtlsList != null && parityDtlsList.Count > 0)
                {
                    for (int i = 0; i < tblPurchaseVehicleDetailsTOList.Count; i++)
                    {
                        TblPurchaseVehicleDetailsTO tempTO = tblPurchaseVehicleDetailsTOList[i];
                        var res = parityDtlsList.Where(a => a.IdProdItem == tempTO.ProdItemId).FirstOrDefault();
                        if (res != null)
                        {
                            if (cOrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                            {
                                tempTO.ItemBookingRate = tblBaseItemMetalCostTO.DeclaredRate;
                                tempTO.Rate = tblBaseItemMetalCostTO.DeclaredRate + res.ParityAmt;
                            }
                            else if (cOrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                            {
                                tempTO.ItemBookingRate = tblBaseItemMetalCostTO.DeclaredRate;
                                tempTO.Rate = tblBaseItemMetalCostTO.DeclaredRate + res.ParityAmt + res.NonConfParityAmt;
                            }

                            if (!vehiclePhaseIds.Contains(vehiclePhaseId))
                            {
                                tempTO.Recovery = res.Recovery;
                                tempTO.IsNonCommercialItem = res.IsNonCommercialItem;
                            }




                        }
                    }

                }
            }
        }

        public List<Int32> GetVehiclePhaseList()
        {
            List<Int32> vehiclePhaseIds = new List<int>();

            vehiclePhaseIds.Add((Int32)Constants.PurchaseVehiclePhasesE.RECOVERY);
            vehiclePhaseIds.Add((Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS);
            vehiclePhaseIds.Add((Int32)Constants.PurchaseVehiclePhasesE.RECOVERY_FOR_NC);
            vehiclePhaseIds.Add((Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS_FOR_NC);
            vehiclePhaseIds.Add((Int32)Constants.PurchaseVehiclePhasesE.CORRECTION_BASE_METAL_COMPARE_DTLS);

            return vehiclePhaseIds;
        }

        public List<TblPurchaseVehicleDetailsTO> PurchaseVehicleDetailsTOList(List<TblPurchaseVehicleDetailsTO> fromList)
        {
            List<TblPurchaseVehicleDetailsTO> toList = new List<TblPurchaseVehicleDetailsTO>();

            if (fromList != null && fromList.Count > 0)
            {
                for (int i = 0; i < fromList.Count; i++)
                {
                    TblPurchaseVehicleDetailsTO tempTO = fromList[i].DeepCopy();
                    toList.Add(tempTO);
                }
            }
            return toList;
        }


        public void CombineSameVehPhaseIdRecord(List<TblPurchaseScheduleSummaryTO> scheduleTOList)
        {
            if (scheduleTOList != null && scheduleTOList.Count > 0)
            {

                for (int i = 0; i < scheduleTOList.Count; i++)
                {
                    if (i == 0)
                    {
                        scheduleTOList[i].GroupByVehPhaseId = 1;
                    }
                    else
                    {
                        if (scheduleTOList[i - 1].GroupByVehPhaseId == scheduleTOList[i].GroupByVehPhaseId)
                        {
                            scheduleTOList[i].GroupByVehPhaseId = scheduleTOList[i - 1].GroupByVehPhaseId;
                        }
                        else
                        {
                            scheduleTOList[i].GroupByVehPhaseId = scheduleTOList[i - 1].GroupByVehPhaseId + 1;
                        }
                    }

                }
            }

        }

        public ResultMessage MigrateBaseMetalCostDtls()
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;

            try
            {
                //Get All base metal cost details
                conn.Open();
                tran = conn.BeginTransaction();

                List<TblBaseItemMetalCostTO> tblBaseItemMetalCostTOList = _iTblBaseItemMetalCostBL.SelectAllTblBaseItemMetalCostList();
                if (tblBaseItemMetalCostTOList == null || tblBaseItemMetalCostTOList.Count == 0)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    return resultMessage;
                }

                for (int i = 0; i < tblBaseItemMetalCostTOList.Count; i++)
                {
                    TblBaseItemMetalCostTO baseItemMetalCostTOUpdate = tblBaseItemMetalCostTOList[i];

                    TblBaseItemMetalCostTO baseItemMetalCostTOInsert = baseItemMetalCostTOUpdate.DeepCopy();


                    List<TblGradeExpressionDtlsTO> gradeExpDtlsList = _iTblGradeExpressionDtlsBL.SelectAllTblGradeExpDtlsByGlobalRateId(baseItemMetalCostTOUpdate.GlobalRatePurchaseId.ToString(), conn, tran);
                    if (gradeExpDtlsList == null || gradeExpDtlsList.Count == 0)
                    {
                        //throw new Exception("gradeExpDtlsList == null");
                        continue;
                    }

                    gradeExpDtlsList = gradeExpDtlsList.OrderBy(a => a.IdGradeExpressionDtls).ToList();
                    Int32 count = gradeExpDtlsList.Count;
                    count = count / 2;

                    List<TblGradeExpressionDtlsTO> gradeExpDtlsListToUpdate = new List<TblGradeExpressionDtlsTO>();
                    List<TblGradeExpressionDtlsTO> gradeExpDtlsListToInsert = new List<TblGradeExpressionDtlsTO>();

                    gradeExpDtlsListToUpdate = gradeExpDtlsList.Take(count).ToList();
                    gradeExpDtlsListToInsert = gradeExpDtlsList.TakeLast(count).ToList();



                    baseItemMetalCostTOUpdate.COrNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                    GetBaseRate(baseItemMetalCostTOUpdate, gradeExpDtlsListToUpdate);
                    baseItemMetalCostTOUpdate.GradeExpressionDtlsTOList = gradeExpDtlsListToUpdate;


                    baseItemMetalCostTOInsert.COrNcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;
                    GetBaseRate(baseItemMetalCostTOInsert, gradeExpDtlsListToInsert);
                    baseItemMetalCostTOInsert.GradeExpressionDtlsTOList = gradeExpDtlsListToInsert;


                    resultMessage = UpdateBaseMetalCostDtls(baseItemMetalCostTOUpdate, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Erorr in UpdateBaseMetalCostDtls(baseItemMetalCostTOUpdate,conn,tran);");
                    }

                    resultMessage = InsertBaseMetalCostDtls(baseItemMetalCostTOInsert, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Erorr in UpdateBaseMetalCostDtls(baseItemMetalCostTOUpdate,conn,tran);");
                    }

                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in MigrateBaseMetalCostDtls()");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public void GetBaseRate(TblBaseItemMetalCostTO tblBaseItemMetalCostTO, List<TblGradeExpressionDtlsTO> gradeExpList)
        {
            double baseRate = 0;
            if (gradeExpList != null && gradeExpList.Count > 0)
            {
                double total = gradeExpList.Sum(a => a.GradeValue);
                double metalCost = 0;

                if (tblBaseItemMetalCostTO.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM)
                {
                    metalCost = tblBaseItemMetalCostTO.BaseMetalCostForC - total;
                    tblBaseItemMetalCostTO.BaseMetalCostForNC = 0;
                }
                else if (tblBaseItemMetalCostTO.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
                {
                    metalCost = tblBaseItemMetalCostTO.BaseMetalCostForNC - total;
                    tblBaseItemMetalCostTO.BaseMetalCostForC = 0;
                }

                baseRate = (metalCost * tblBaseItemMetalCostTO.BaseRecovery) / 100;

                tblBaseItemMetalCostTO.BaseRate = baseRate;
                tblBaseItemMetalCostTO.BaseRate = Math.Round(tblBaseItemMetalCostTO.BaseRate, 3);
            }
        }

        public ResultMessage UpdateBaseMetalCostDtls(TblBaseItemMetalCostTO tblBaseItemMetalCostTO, SqlConnection conn, SqlTransaction tran)
        {

            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {

                if (tblBaseItemMetalCostTO == null)
                {
                    throw new Exception("tblBaseItemMetalCostTO == null");
                }

                if (tblBaseItemMetalCostTO.GradeExpressionDtlsTOList == null || tblBaseItemMetalCostTO.GradeExpressionDtlsTOList.Count == 0)
                {
                    throw new Exception("tblBaseItemMetalCostTO.GradeExpressionDtlsTOList == null");
                }

                result = _iTblBaseItemMetalCostBL.UpdateTblBaseItemMetalCost(tblBaseItemMetalCostTO, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in _iTblBaseItemMetalCostBL.UpdateTblBaseItemMetalCost(tblBaseItemMetalCostTO,conn,tran);");
                }

                for (int i = 0; i < tblBaseItemMetalCostTO.GradeExpressionDtlsTOList.Count; i++)
                {
                    TblGradeExpressionDtlsTO tblGradeExpressionDtlsTO = tblBaseItemMetalCostTO.GradeExpressionDtlsTOList[i];
                    tblGradeExpressionDtlsTO.BaseItemMetalCostId = tblBaseItemMetalCostTO.IdBaseItemMetalCost;

                    result = _iTblGradeExpressionDtlsBL.UpdateTblGradeExpressionDtls(tblGradeExpressionDtlsTO, conn, tran);
                    if (result < 0)
                    {
                        throw new Exception("Error in _iTblGradeExpressionDtlsBL.UpdateTblGradeExpressionDtls(tblGradeExpressionDtlsTO, conn, tran);");
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateBaseMetalCostDtls(TblBaseItemMetalCostTO tblBaseItemMetalCostTO)");
                return resultMessage;

            }

        }

        public ResultMessage InsertBaseMetalCostDtls(TblBaseItemMetalCostTO tblBaseItemMetalCostTO, SqlConnection conn, SqlTransaction tran)
        {

            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {

                if (tblBaseItemMetalCostTO == null)
                {
                    throw new Exception("tblBaseItemMetalCostTO == null");
                }

                if (tblBaseItemMetalCostTO.GradeExpressionDtlsTOList == null || tblBaseItemMetalCostTO.GradeExpressionDtlsTOList.Count == 0)
                {
                    throw new Exception("tblBaseItemMetalCostTO.GradeExpressionDtlsTOList == null");
                }

                result = _iTblBaseItemMetalCostBL.InsertTblBaseItemMetalCost(tblBaseItemMetalCostTO, conn, tran);
                if (result <= 0)
                {
                    throw new Exception("Error in _iTblBaseItemMetalCostBL.InsertTblBaseItemMetalCost(tblBaseItemMetalCostTO,conn,tran);");
                }

                for (int i = 0; i < tblBaseItemMetalCostTO.GradeExpressionDtlsTOList.Count; i++)
                {
                    TblGradeExpressionDtlsTO tblGradeExpressionDtlsTO = tblBaseItemMetalCostTO.GradeExpressionDtlsTOList[i];
                    tblGradeExpressionDtlsTO.BaseItemMetalCostId = tblBaseItemMetalCostTO.IdBaseItemMetalCost;

                    result = _iTblGradeExpressionDtlsBL.UpdateTblGradeExpressionDtls(tblGradeExpressionDtlsTO, conn, tran);
                    if (result <= 0)
                    {
                        throw new Exception("Error in _iTblGradeExpressionDtlsBL.InsertTblGradeExpressionDtls(tblGradeExpressionDtlsTO, conn, tran);");
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in InsertBaseMetalCostDtls(TblBaseItemMetalCostTO tblBaseItemMetalCostTO)");
                return resultMessage;

            }

        }

        public Boolean CheckIfPendingBookingQtyIsInTole(TblPurchaseEnquiryTO enquiryTO, ref double diff, Int32 isAuto)
        {
            Boolean result = false;
            if (enquiryTO != null)
            {
                TblConfigParamsTO tblConfigParamsTO = null;
                if (isAuto == 1)
                {
                    tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_TOLERANCE_VAL_IN_MT_TO_CLOSE_SAUDA);
                }
                else
                {
                    tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_TOLERANCE_VAL_IN_MT_TO_FOR_MANUAL_CLOSE_SAUDA);
                }


                if (tblConfigParamsTO == null || tblConfigParamsTO.ConfigParamVal == "0")
                {
                    result = false;
                    if (enquiryTO.PendingBookingQty <= 0)
                    {
                        result = true;
                    }
                    return result;
                }

                //if (tblConfigParamsTO == null)
                //{
                //    result = false;
                //    return result;
                //}

                //if (tblConfigParamsTO.ConfigParamVal == "0")
                //{
                //    result = false;
                //    return result;
                //}

                double toleVal = Convert.ToDouble(tblConfigParamsTO.ConfigParamVal.ToString());
                diff = enquiryTO.PendingBookingQty;

                result = CheckIfSaudaPendingQtyIsInTol(diff, toleVal);
            }
            return result;
        }

        public Boolean CheckIfSaudaPendingQtyIsInTol(double saudapendingQty, double toleVal)
        {
            Boolean result = false;
            if (saudapendingQty <= toleVal)
            {
                result = true;
            }
            return result;
        }

        public ResultMessage UpdateBookingPendingQtyAsPerActualOrScheduleQty(TblPurchaseScheduleSummaryTO scheduleTO, TblPurchaseEnquiryTO enquiryTO, SqlConnection conn, SqlTransaction tran)
        {

            ResultMessage resultMessage = new ResultMessage();
            Int32 conversionFact = 1000;

            try
            {

                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO == null");
                }

                if (enquiryTO == null)
                {
                    enquiryTO = new TblPurchaseEnquiryTO();
                    enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(scheduleTO.PurchaseEnquiryId, conn, tran);
                    if (enquiryTO == null)
                    {
                        throw new Exception("enquiryTO == null");
                    }
                }

                List<TblPurchaseWeighingStageSummaryTO> tblPurchaseWeighingStageSummaryTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(scheduleTO.ActualRootScheduleId, Convert.ToInt32(Constants.TransMeasureTypeE.INTERMEDIATE_WEIGHT).ToString(), conn, tran);
                if (tblPurchaseWeighingStageSummaryTOList == null || tblPurchaseWeighingStageSummaryTOList.Count == 0)
                {
                    throw new Exception("tblPurchaseWeighingStageSummaryTOList == null");
                }

                double totalNetWt = tblPurchaseWeighingStageSummaryTOList.Sum(a => a.NetWeightMT);
                totalNetWt = totalNetWt / conversionFact;

                double diff = 0;

                double actualPendingQty = 0;

                //Get new schedule TO
                Boolean isActive = false;
                TblPurchaseScheduleSummaryTO newScheduleTO = SelectAllEnquiryScheduleSummaryTO(scheduleTO.ActualRootScheduleId, isActive, conn, tran);
                if (newScheduleTO == null)
                {
                    throw new Exception("newScheduleTO == NULL");
                }


                Boolean isTakeActual = false;

                TblConfigParamsTO isTakeActualPendingQtyconfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_ACTUAL_PENDING_BOOKING_QTY, conn, tran);
                if (isTakeActualPendingQtyconfigTO != null)
                {
                    if (isTakeActualPendingQtyconfigTO.ConfigParamVal == "1")
                        isTakeActual = true;
                }


                diff = newScheduleTO.Qty - totalNetWt;

                if (isTakeActual)
                {
                    actualPendingQty = enquiryTO.PendingBookingQty + diff;

                    // if (diff > 0)
                    // {
                    //     actualPendingQty = enquiryTO.PendingBookingQty - diff;
                    // }
                    // else if (diff < 0)
                    // {
                    //     actualPendingQty = enquiryTO.PendingBookingQty + diff;
                    // }

                    enquiryTO.OptionalPendingQty = enquiryTO.OptionalPendingQty;
                    enquiryTO.PendingBookingQty = actualPendingQty;

                }
                else
                {
                    actualPendingQty = enquiryTO.OptionalPendingQty + diff;

                    // if (diff > 0)
                    // {
                    //     actualPendingQty = enquiryTO.OptionalPendingQty + diff;
                    // }
                    // else if (diff < 0)
                    // {
                    //     actualPendingQty = enquiryTO.OptionalPendingQty + diff;
                    // }

                    enquiryTO.PendingBookingQty = enquiryTO.PendingBookingQty;
                    enquiryTO.OptionalPendingQty = actualPendingQty;
                }

                enquiryTO.IsEnqTransfered = 0;
                Int32 result = _iTblPurchaseEnquiryBL.UpdateTblBookingsForPurchase(enquiryTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in UpdateTblBookingsForPurchase(enquiryTO, conn, tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateBookingPendingQtyAsPerActualOrScheduleQty(TblPurchaseScheduleSummaryTO scheduleTO,TblPurchaseEnquiryTO enquiryTO,SqlConnection connection,SqlTransaction tran)");
                return resultMessage;

            }

        }

        public List<TblPurchaseScheduleSummaryTO> GetSudharSaudaReportDtls(int idPurchaseScheduleSummary)
        {
            string statusIds = Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED).ToString();
            string vehiclePhaseIds = Convert.ToInt32(Constants.PurchaseVehiclePhasesE.CORRECTIONS).ToString();
            Boolean isGetGradeExpDtls = false;
            Boolean isForBRM = false;

            TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.CP_SCRAP_IS_FOR_BHAGYALAXMI);
            if (tblConfigParamsTO != null)
            {
                if (tblConfigParamsTO.ConfigParamVal == "1")
                {
                    isForBRM = true;
                }

            }

            if (isForBRM)
                vehiclePhaseIds += "," + Convert.ToInt32(Constants.PurchaseVehiclePhasesE.RECOVERY).ToString();
            else
                vehiclePhaseIds += "," + Convert.ToInt32(Constants.PurchaseVehiclePhasesE.GRADING).ToString();

            List<TblPurchaseScheduleSummaryTO> recAndCorrectionDtlsList = _iTblPurchaseScheduleSummaryDAO.SelectVehicleScheduleByRootAndStatusId(idPurchaseScheduleSummary, statusIds, vehiclePhaseIds);
            if (recAndCorrectionDtlsList == null || recAndCorrectionDtlsList.Count == 0)
                return null;

            _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(recAndCorrectionDtlsList, isGetGradeExpDtls);

            GetSameProdItemsCombinedList(recAndCorrectionDtlsList, false);

            return recAndCorrectionDtlsList;

        }

        public ResultMessage CalAndSaveBaseMetalComparisonDtls(TblPurchaseScheduleSummaryTO correctionScheduleTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            List<TblPurchaseScheduleSummaryTO> scheduleToList = new List<TblPurchaseScheduleSummaryTO>();
            List<TblPurchaseScheduleSummaryTO> scheduleToReturnList = new List<TblPurchaseScheduleSummaryTO>();

            try
            {
                if (correctionScheduleTO == null)
                {
                    throw new Exception("correctionScheduleTO == null");
                }

                scheduleToList.Add(correctionScheduleTO);

                List<DropDownTO> dropDownTOList = GetBaseMetalCostList(correctionScheduleTO.ActualRootScheduleId);
                if (dropDownTOList == null || dropDownTOList.Count == 0)
                {
                    throw new Exception("dropDownTOList == null");
                }
                DropDownTO dropDownTO = dropDownTOList[0];
                TblBaseItemMetalCostTO tblBaseItemMetalCostTO = null;
                if (dropDownTO.Tag != null && dropDownTO.Tag.GetType() == typeof(TblBaseItemMetalCostTO))
                {
                    tblBaseItemMetalCostTO = (TblBaseItemMetalCostTO)dropDownTO.Tag;
                }

                resultMessage = CalculateVehItemDtlsWithCurrentOrUnloladingDate(scheduleToList, dropDownTO, tblBaseItemMetalCostTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in CalculateVehItemDtlsWithCurrentOrUnloladingDate(scheduleToList,dropDownTO,conn,tran);");
                }

                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseScheduleSummaryTO>))
                {
                    scheduleToReturnList = (List<TblPurchaseScheduleSummaryTO>)resultMessage.Tag;
                }

                if (scheduleToReturnList != null && scheduleToReturnList.Count > 0)
                {
                    scheduleToReturnList = scheduleToReturnList.Where(a => a.IsForCompare == 1).ToList();

                    if (scheduleToReturnList != null && scheduleToReturnList.Count == 1)
                    {
                        scheduleToReturnList[0].VehiclePhaseId = (Int32)Constants.PurchaseVehiclePhasesE.CORRECTION_BASE_METAL_COMPARE_DTLS;
                        scheduleToReturnList[0].IsActive = 0;

                        resultMessage = InsertScheduleDtls(scheduleToReturnList, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            throw new Exception("Error in InsertScheduleDtls(scheduleToReturnList,conn,tran);");
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CalAndSaveBaseMetalComparisonDtls(TblPurchaseScheduleSummaryTO correctionScheduleTO, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;

            }
        }


        public ResultMessage CheckVehScheQtyMatchWithVehGradesQty(TblPurchaseScheduleSummaryTO scheduleTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO == null");
                }

                if (scheduleTO.PurchaseScheduleSummaryDetailsTOList == null || scheduleTO.PurchaseScheduleSummaryDetailsTOList.Count == 0)
                {
                    //throw new Exception("scheduleTO.PurchaseScheduleSummaryDetailsTOList == null");
                    resultMessage.DefaultSuccessBehaviour();
                    return resultMessage;
                }

                double scheduleQty = scheduleTO.Qty;

                double detailsQty = scheduleTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.Qty);

                if (scheduleQty != detailsQty)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CheckVehScheQtyMatchWithVehGradesQty(TblPurchaseScheduleSummaryTO scheduleTO)");
                return resultMessage;
            }
        }

        /////////////////////////////////////new functions////////////////////////////////////////////////////////
        public ResultMessage SaveVehicleSchedule(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 loginUserId, Boolean isSaveHistory, Boolean isUpdateItemDtls, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            Int32 result = 0;

            try
            {

                if (isSaveHistory)
                {
                    //Insert New record
                    scheduleSummaryTO.CreatedBy = loginUserId;
                    scheduleSummaryTO.CreatedOn = currentDate;
                    scheduleSummaryTO.IsActive = 1;
                    result = InsertTblPurchaseScheduleSummary(scheduleSummaryTO, conn, tran);
                    if (result != 1)
                    {
                        throw new Exception("Error in InsertTblPurchaseScheduleSummary(scheduleSummaryTO, conn, tran);");
                    }

                }
                else
                {
                    //update schedule
                    scheduleSummaryTO.UpdatedBy = loginUserId;
                    scheduleSummaryTO.UpdatedOn = currentDate;
                    scheduleSummaryTO.CreatedBy = loginUserId;
                    scheduleSummaryTO.CreatedOn = currentDate;

                    result = _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummary(scheduleSummaryTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Erron in _iTblPurchaseScheduleSummaryDAO.UpdateTblPurchaseScheduleSummary(scheduleSummaryTO,conn,tran);");
                    }
                }


                if (isUpdateItemDtls)
                {

                }


                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SaveVehicleSchedule(TblPurchaseScheduleSummaryTO scheduleSummaryTO)");
                return resultMessage;

            }
        }

        public ResultMessage UpdateScheduleItemDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Boolean isUpdateItemDtls, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {
                if (isUpdateItemDtls)
                {
                    //delete first then insert
                }
                else
                {
                    //direct insert
                    List<TblPurchaseScheduleSummaryTO> tempInsertList = new List<TblPurchaseScheduleSummaryTO>();
                    tempInsertList.Add(scheduleSummaryTO);

                    resultMessage = InsertScheduleDtls(tempInsertList, conn, tran);
                }




                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateScheduleItemDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage SendNotificationsForSaudaCloseApproval(TblPurchaseEnquiryTO enquiryTO, Boolean isForPendForApproval, Int32 isApprove, Int32 loginUserId)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime serverDate = _iCommonDAO.ServerDateTime;

            try
            {

                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();

                if (isForPendForApproval)
                {

                    int sourceEntityId = 0;
                    sourceEntityId = enquiryTO.IdPurchaseEnquiry;
                    _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_PENDING_FOR_APPROVAL, sourceEntityId.ToString());

                    tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_PENDING_FOR_APPROVAL;
                    tblAlertInstanceTO.AlertAction = "SAUDA_CLOSURE_REQ_PENDING_FOR_APPROVAL";
                    tblAlertInstanceTO.AlertComment = "Booking No : " + enquiryTO.EnqDisplayNo + " is pending for sauda closure approval.";
                    tblAlertInstanceTO.EffectiveFromDate = serverDate;
                    tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                    tblAlertInstanceTO.IsActive = 1;
                    tblAlertInstanceTO.SourceEntityId = enquiryTO.IdPurchaseEnquiry;
                    tblAlertInstanceTO.SourceDisplayId = "SAUDA_CLOSURE_REQ_PENDING_FOR_APPROVAL";
                    tblAlertInstanceTO.RaisedBy = loginUserId;
                    tblAlertInstanceTO.RaisedOn = serverDate;
                    tblAlertInstanceTO.IsAutoReset = 1;

                    //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                    notify.SendNotificationToUsers(tblAlertInstanceTO);
                }
                else
                {
                    if (isApprove == 1)
                    {

                        int sourceEntityId = 0;
                        sourceEntityId = enquiryTO.IdPurchaseEnquiry;
                        _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_PENDING_FOR_APPROVAL, sourceEntityId.ToString());

                        if (enquiryTO != null && enquiryTO.UserId > 0)
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDate;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_APPROVED;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }

                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_APPROVED;
                        tblAlertInstanceTO.AlertAction = "SAUDA_CLOSURE_REQ_APPROVED";
                        tblAlertInstanceTO.AlertComment = "Booking No : " + enquiryTO.EnqDisplayNo + " closed successfully.";
                        tblAlertInstanceTO.EffectiveFromDate = serverDate;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceEntityId = enquiryTO.IdPurchaseEnquiry;
                        tblAlertInstanceTO.SourceDisplayId = "SAUDA_CLOSURE_REQ_APPROVED";
                        tblAlertInstanceTO.RaisedBy = loginUserId;
                        tblAlertInstanceTO.RaisedOn = serverDate;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                        notify.SendNotificationToUsers(tblAlertInstanceTO);

                    }
                    else
                    {
                        int sourceEntityId = 0;
                        sourceEntityId = enquiryTO.IdPurchaseEnquiry;
                        _iTblQualityPhaseBL.ResetAllPreviousNotification((int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_PENDING_FOR_APPROVAL, sourceEntityId.ToString());

                        if (enquiryTO != null && enquiryTO.UserId > 0)
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = enquiryTO.UserId;
                            tblAlertUsersTO.RaisedOn = serverDate;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_REJECTED;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);

                        }

                        tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SAUDA_CLOSURE_REQ_REJECTED;
                        tblAlertInstanceTO.AlertAction = "SAUDA_CLOSURE_REQ_REJECTED";
                        tblAlertInstanceTO.AlertComment = "Booking No : " + enquiryTO.EnqDisplayNo + " closure request rejected.";
                        tblAlertInstanceTO.EffectiveFromDate = serverDate;
                        tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                        tblAlertInstanceTO.IsActive = 1;
                        tblAlertInstanceTO.SourceEntityId = enquiryTO.IdPurchaseEnquiry;
                        tblAlertInstanceTO.SourceDisplayId = "SAUDA_CLOSURE_REQ_REJECTED";
                        tblAlertInstanceTO.RaisedBy = loginUserId;
                        tblAlertInstanceTO.RaisedOn = serverDate;
                        tblAlertInstanceTO.IsAutoReset = 1;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                        notify.SendNotificationToUsers(tblAlertInstanceTO);
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in SendNotificationsForSaudaCloseApproval(TblPurchaseEnquiryTO enquiryTO) ");
                return resultMessage;
            }

        }

        public double CheckValIsNaN(double val)
        {
            if (double.IsNaN(val))
                val = 0;

            return val;
        }


        public ResultMessage MarkVehicleRequested(List<TblPurchaseScheduleSummaryTO> scheduleList, Int32 loginUserId)
        {

            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Boolean isItemChange = false;
            Boolean isSendNotification = true;
            DateTime currentDate = _iCommonDAO.ServerDateTime;

            try
            {

                if (scheduleList == null || scheduleList.Count == 0)
                {
                    throw new Exception("scheduleList == null");
                }

                for (int i = 0; i < scheduleList.Count; i++)
                {

                    try
                    {

                        TblPurchaseScheduleSummaryTO scheduleTO = scheduleList[i];
                        scheduleTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_REQUESTED;
                        scheduleTO.UpdatedBy = loginUserId;
                        scheduleTO.UpdatedOn = currentDate;
                        scheduleTO.CreatedOn = currentDate;
                        scheduleTO.CreatedBy = loginUserId;
                        scheduleTO.ParentPurchaseScheduleSummaryId = scheduleTO.IdPurchaseScheduleSummary;
                        if (scheduleTO.RootScheduleId == 0)
                            scheduleTO.RootScheduleId = scheduleTO.ActualRootScheduleId;

                        resultMessage = InsertMaterailItemDetails(scheduleTO, isItemChange, isSendNotification, currentDate);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            break;
                        }

                    }
                    catch (System.Exception ex)
                    {
                        throw new Exception("Error in  MarkVehicleRequested(List<TblPurchaseScheduleSummaryTO> scheduleList)");
                    }

                }
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in MarkVehicleRequested(List<TblPurchaseScheduleSummaryTO> scheduleList)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }

        }

        /// <summary>
        /// Prajakta [21 Sept 2018] To Save Spot entry Vehicles
        /// </summary>
        /// <param name="tblPurchaseVehicleSpotEntryTO"></param>
        /// <returns></returns>
        public ResultMessage SaveVehicleSpotEntry(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, Int32 loginUserId)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            int result = 0;
            int vehicleSpotEntryId;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            Boolean isCreateAutoSauda = false;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                #region Priyanka [14-03-2019] Added to check whether the same vehicle number is already present in premises.
                tblPurchaseVehicleSpotEntryTO.VehicleNo = tblPurchaseVehicleSpotEntryTO.VehicleNo.Trim();
                List<TblPurchaseVehicleSpotEntryTO> tblPurchaseVehicleSpotEntryTOList = _iTblPurchaseVehicleSpotEntryBL.SelectAllSpotEntryVehiclesPending(tblPurchaseVehicleSpotEntryTO.VehicleNo);
                if (tblPurchaseVehicleSpotEntryTOList != null && tblPurchaseVehicleSpotEntryTOList.Count > 0)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DisplayMessage = "Vehicle No. - " + tblPurchaseVehicleSpotEntryTOList[0].VehicleNo + " is already spotted with VehicleId  #" + tblPurchaseVehicleSpotEntryTOList[0].IdVehicleSpotEntry;
                    return resultMessage;
                }
                #endregion

                #region Priyanka [04-03-2019] Added to check whether the vehicle is already in process.
                //List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();
                //tblPurchaseScheduleSummaryTOList = _iCircularDependancyBL.GetPurchaseScheduleSummaryTOByVehicleNo(tblPurchaseVehicleSpotEntryTO.VehicleNo, 0);
                //if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                //{
                //    resultMessage.MessageType = ResultMessageE.Error;
                //    resultMessage.DisplayMessage = "Vehicle is already entered in premises.";
                //    return resultMessage;
                //}

                //resultMessage = IsVehicleAlreadyInPremises( null, tblPurchaseVehicleSpotEntryTO.VehicleNo);
                resultMessage = IsVehicleAlreadyInPremisesForDBAndIOT(null, tblPurchaseVehicleSpotEntryTO.VehicleNo, true);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                #endregion

                #region 1. Insert Spot Entry Data in Table

                tblPurchaseVehicleSpotEntryTO.CreatedOn = currentDate;
                tblPurchaseVehicleSpotEntryTO.StatusDate = currentDate;
                tblPurchaseVehicleSpotEntryTO.CreatedBy = Convert.ToInt32(loginUserId);
                result = _iTblPurchaseVehicleSpotEntryBL.InsertTblPurchaseVehicleSpotEntry(tblPurchaseVehicleSpotEntryTO, conn, tran);
                vehicleSpotEntryId = result;
                if (result == 0)
                {
                    tran.Rollback();
                    resultMessage.Text = "Error While InsertTblPurchaseVehicleSpotEntry : SaveVehicleSpotEntry";
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.Result = 0;
                    return resultMessage;
                }
                else
                {

                    TblSpotVehMatDtlsTO tblSpotVehMatDtlsTO = new TblSpotVehMatDtlsTO();
                    if (tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList != null && tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList.Count > 0)
                    {
                        for (int i = 0; i < tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList.Count; i++)
                        {
                            tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList[i].VehSpotEntryId = tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry;
                            tblSpotVehMatDtlsTO = tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList[i];
                            result = _iTblSpotVehicleMaterialDtlsBL.InsertTblSpotVehicleMaterialDtls(tblSpotVehMatDtlsTO, conn, tran);
                            if (result != 1)
                            {
                                tran.Rollback();
                                throw new Exception("Error while inserting in - InsertTblSpotVehicleMaterialDtls");
                            }

                        }
                    }

                }


                #endregion

                //Prajakta[2018-12-30] Added to save uploaded image list

                if (result >= 1)
                {
                    if (tblPurchaseVehicleSpotEntryTO.RecycleDocumentsTOList != null && tblPurchaseVehicleSpotEntryTO.RecycleDocumentsTOList.Count > 0)
                    {
                        for (int p = 0; p < tblPurchaseVehicleSpotEntryTO.RecycleDocumentsTOList.Count; p++)
                        {
                            tblPurchaseVehicleSpotEntryTO.RecycleDocumentsTOList[p].TxnId = tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry;
                            tblPurchaseVehicleSpotEntryTO.RecycleDocumentsTOList[p].CreatedBy = loginUserId;
                            tblPurchaseVehicleSpotEntryTO.RecycleDocumentsTOList[p].CreatedOn = currentDate;
                            result = _iTblRecycleDocumentBL.InsertTblRecycleDocument(tblPurchaseVehicleSpotEntryTO.RecycleDocumentsTOList[p], conn, tran);
                            if (result != 1)
                            {
                                throw new Exception("Error while inserting in - InsertTblRecycleDocument");
                            }
                        }
                    }

                }
                if (tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList != null && tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList.Count > 0)
                {
                    for (int p = 0; p < tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList.Count; p++)
                    {
                        tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList[p].VehicleSpotEntryId = tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry;
                        result = _iTblSpotEntryContainerDtlsBL.InsertTblSpotEntryContainerDtls(tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList[p], conn, tran);
                        if (result != 1)
                        {
                            throw new Exception("Error while inserting in - InsertTblRecycleDocument");
                        }
                    }
                }

                TblConfigParamsTO configParamTOForAutoCreateSauda = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_CREATE_AUTO_SAUDA_FOR_SPOT_VEHICLE, conn, tran);
                if (configParamTOForAutoCreateSauda != null && configParamTOForAutoCreateSauda.ConfigParamVal == "1")
                {
                    isCreateAutoSauda = true;
                }
                if (tblPurchaseVehicleSpotEntryTO.SupplierId > 0)
                {
                    List<DropDownTO> purchaseManagerList = _iTblPurchaseManagerSupplierBL.GetPurchaseManagerListOfSupplierForDropDown(tblPurchaseVehicleSpotEntryTO.SupplierId, conn, tran);

                    if (isCreateAutoSauda)
                    {
                        if (purchaseManagerList == null || purchaseManagerList.Count == 0)
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "Failed to save spot vehicle. Kindly attach supplier to Purchase Manager";
                            return resultMessage;
                        }
                    }
                }

                #region 2. Send Notifications & SMSs to Purchase Managers Defined or undefined
                //TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                //List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();

                ////get purchase manager of supplier
                //List<DropDownTO> PurchaseManagerList = new List<DropDownTO>();

                //if (tblPurchaseVehicleSpotEntryTO.SupplierId > 0)
                //{
                //    PurchaseManagerList = _iTblPurchaseManagerSupplierBL.GetPurchaseManagerListOfSupplierForDropDown(tblPurchaseVehicleSpotEntryTO.SupplierId, conn, tran);

                //    if (isCreateAutoSauda)
                //    {
                //        if (PurchaseManagerList == null || PurchaseManagerList.Count == 0)
                //        {
                //            resultMessage.DefaultBehaviour();
                //            resultMessage.DisplayMessage = "Failed to save spot vehicle. Kindly attach supplier to Purchase Manager";
                //            return resultMessage;
                //        }
                //    }

                //    if (PurchaseManagerList == null || PurchaseManagerList.Count == 0)  //if supplier don't have any PM bring all PM list.
                //    {
                //        PurchaseManagerList = _iTblPurchaseManagerSupplierBL.SelectPurchaseFromRoleForDropDown(conn, tran);
                //    }

                //}
                //else
                //{
                //    PurchaseManagerList = _iTblPurchaseManagerSupplierBL.SelectPurchaseFromRoleForDropDown(conn, tran);
                //}


                //if (PurchaseManagerList != null && PurchaseManagerList.Count > 0)
                //{
                //    for (int k = 0; k < PurchaseManagerList.Count; k++)
                //    {
                //        TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                //        tblAlertUsersTO.UserId = PurchaseManagerList[k].Value;
                //        tblAlertUsersTO.RaisedOn = tblPurchaseVehicleSpotEntryTO.CreatedOn;
                //        tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_ENTRY_VEHICLE_REPORTED;
                //        tblAlertUsersTOList.Add(tblAlertUsersTO);
                //    }
                //}

                //tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_ENTRY_VEHICLE_REPORTED;
                //tblAlertInstanceTO.AlertAction = "SPOT_ENTRY_VEHICLE_REPORTED";
                //tblAlertInstanceTO.AlertComment = "SPOT Entry vehicle is reported. Vehicle No: " + tblPurchaseVehicleSpotEntryTO.VehicleNo;
                //tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                //tblAlertInstanceTO.EffectiveFromDate = tblPurchaseVehicleSpotEntryTO.CreatedOn;
                //tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                //tblAlertInstanceTO.IsActive = 1;
                //tblAlertInstanceTO.SourceDisplayId = "SPOT_ENTRY_VEHICLE_REPORTED";
                //tblAlertInstanceTO.SourceEntityId = tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry;
                //tblAlertInstanceTO.RaisedBy = tblPurchaseVehicleSpotEntryTO.CreatedBy;
                //tblAlertInstanceTO.RaisedOn = tblPurchaseVehicleSpotEntryTO.CreatedOn;
                //tblAlertInstanceTO.IsAutoReset = 1;

                ////Sanjay [21 sept 2018] Below code is commented and common notification API is called
                //notify.SendNotificationToUsers(tblAlertInstanceTO);
                #endregion

                #region 3. Create new sauda of spot vehicle or attach to existing sauda for SRJ

                if (isCreateAutoSauda)
                {
                    #region Link to existing sauda
                    resultMessage = LinkToExistingSaudaSpotVehicle(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }
                    #endregion
                }
                else
                {
                    //Added By Gokul
                    if (tblPurchaseVehicleSpotEntryTO.PartyWeighingMeasureTO != null)
                    {
                        result = SavePartyWeightDtls(tblPurchaseVehicleSpotEntryTO, vehicleSpotEntryId, loginUserId, conn, tran);
                        if (result != 1)
                        {
                            tran.Rollback();
                            throw new Exception("Error while inserting in - InsertTblSpotVehicleMaterialDtls");
                        }
                    }

                    tran.Commit();
                    resultMessage = SendSpotEntryReportedNotification(tblPurchaseVehicleSpotEntryTO, null, isCreateAutoSauda);
                }

                #endregion

                resultMessage.DefaultSuccessBehaviour("Vehicle Details Saved Successfully. Vehicle Id - " + tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry + " ");
                resultMessage.Tag = tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry;
                return resultMessage;
            }
            catch (Exception ex)
            {
                tran.Rollback();
                resultMessage.DefaultExceptionBehaviour(ex, "SaveVehicleSpotEntry");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }

        }

        public int SavePartyWeightDtls(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, int vehicleSpotEntryId, int loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            int result = 0;
            if (tblPurchaseVehicleSpotEntryTO.PartyWeighingMeasureTO != null)
            {
                var tempPurchaseVehicleSpotEntryTo = _iTblPurchaseVehicleSpotEntryBL.SelectTblPurchaseVehicleSpotEntryTO(vehicleSpotEntryId, conn, tran);

                TblPartyWeighingMeasuresTO tempPartyWeighingMeasuresTo = tblPurchaseVehicleSpotEntryTO.PartyWeighingMeasureTO;
                tempPartyWeighingMeasuresTo = tblPurchaseVehicleSpotEntryTO.PartyWeighingMeasureTO;
                tempPartyWeighingMeasuresTo.CreatedOn = tblPurchaseVehicleSpotEntryTO.CreatedOn;
                tempPartyWeighingMeasuresTo.CreatedBy = Convert.ToInt32(loginUserId);
                tempPartyWeighingMeasuresTo.VehicleNo = tblPurchaseVehicleSpotEntryTO.VehicleNo;
                tempPartyWeighingMeasuresTo.PurchaseScheduleSummaryId = tempPurchaseVehicleSpotEntryTo.PurchaseScheduleSummaryId;
                if (tblPurchaseVehicleSpotEntryTO.ProdClassId > 0)
                {
                    tempPartyWeighingMeasuresTo.ProdClassId = tblPurchaseVehicleSpotEntryTO.ProdClassId;
                }
                result = _iTblPartyWeighingMeasuresDAO.InsertTblPartyWeighingMeasures(tempPartyWeighingMeasuresTo, conn, tran);
            }
            return result;
        }

        public ResultMessage SendSpotEntryReportedNotification(TblPurchaseVehicleSpotEntryTO spotVehicleTO, TblPurchaseEnquiryTO enquiryTO, Boolean isCreateAutoSauda)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                List<TblAlertUsersTO> tblAlertUsersTOList = new List<TblAlertUsersTO>();

                if (isCreateAutoSauda)
                {
                    //Send the notification of newly created sauda to respective PM

                    TblAlertInstanceTO tblAlertInstanceTOForAutoSauda = new TblAlertInstanceTO();
                    List<TblAlertUsersTO> tblAlertUsersTOListForAutoSauda = new List<TblAlertUsersTO>();

                    //Send the vehicle reported notification
                    TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                    tblAlertUsersTO.UserId = enquiryTO.UserId;
                    tblAlertUsersTO.RaisedOn = spotVehicleTO.CreatedOn;
                    tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_ENTRY_VEHICLE_REPORTED;
                    tblAlertUsersTOList.Add(tblAlertUsersTO);

                    TblAlertUsersTO tblAlertUsersTOForAutoSauda = new TblAlertUsersTO();
                    tblAlertUsersTOForAutoSauda.UserId = enquiryTO.UserId;
                    tblAlertUsersTOForAutoSauda.RaisedOn = spotVehicleTO.CreatedOn;
                    tblAlertUsersTOForAutoSauda.AlertDefinitionId = (int)NotificationConstants.NotificationsE.AUTO_CREATED_SAUDA_FOR_SPOT_VEHICLE;
                    tblAlertUsersTOListForAutoSauda.Add(tblAlertUsersTOForAutoSauda);


                    if (enquiryTO.IsAutoSpotVehSauda == 1)
                    {
                        tblAlertInstanceTOForAutoSauda.AlertDefinitionId = (int)NotificationConstants.NotificationsE.AUTO_CREATED_SAUDA_FOR_SPOT_VEHICLE;
                        tblAlertInstanceTOForAutoSauda.AlertAction = "AUTO_CREATED_SAUDA_FOR_SPOT_VEHICLE";
                        tblAlertInstanceTOForAutoSauda.AlertComment = "Sauda No : " + enquiryTO.EnqDisplayNo + " is auto created from spot vehicle No :" + spotVehicleTO.VehicleNo;
                        tblAlertInstanceTOForAutoSauda.AlertUsersTOList = tblAlertUsersTOListForAutoSauda;
                        tblAlertInstanceTOForAutoSauda.EffectiveFromDate = spotVehicleTO.CreatedOn;
                        tblAlertInstanceTOForAutoSauda.EffectiveToDate = tblAlertInstanceTOForAutoSauda.EffectiveFromDate.AddHours(10);
                        tblAlertInstanceTOForAutoSauda.IsActive = 1;
                        tblAlertInstanceTOForAutoSauda.SourceDisplayId = "AUTO_CREATED_SAUDA_FOR_SPOT_VEHICLE";
                        tblAlertInstanceTOForAutoSauda.SourceEntityId = enquiryTO.IdPurchaseEnquiry;
                        tblAlertInstanceTOForAutoSauda.RaisedBy = spotVehicleTO.CreatedBy;
                        tblAlertInstanceTOForAutoSauda.RaisedOn = spotVehicleTO.CreatedOn;
                        tblAlertInstanceTOForAutoSauda.IsAutoReset = 1;

                        //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                        notify.SendNotificationToUsers(tblAlertInstanceTOForAutoSauda);
                    }
                }
                else
                {
                    //get purchase manager of supplier
                    List<DropDownTO> PurchaseManagerList = new List<DropDownTO>();

                    if (spotVehicleTO.SupplierId > 0)
                    {
                        PurchaseManagerList = _iTblPurchaseManagerSupplierBL.GetPurchaseManagerListOfSupplierForDropDown(spotVehicleTO.SupplierId, conn, tran);
                        if (PurchaseManagerList == null || PurchaseManagerList.Count == 0)  //if supplier don't have any PM bring all PM list.
                        {
                            PurchaseManagerList = _iTblPurchaseManagerSupplierBL.SelectPurchaseFromRoleForDropDown(conn, tran);
                        }
                    }
                    else
                    {
                        PurchaseManagerList = _iTblPurchaseManagerSupplierBL.SelectPurchaseFromRoleForDropDown(conn, tran);
                    }

                    if (PurchaseManagerList != null && PurchaseManagerList.Count > 0)
                    {
                        for (int k = 0; k < PurchaseManagerList.Count; k++)
                        {
                            TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                            tblAlertUsersTO.UserId = PurchaseManagerList[k].Value;
                            tblAlertUsersTO.RaisedOn = spotVehicleTO.CreatedOn;
                            tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_ENTRY_VEHICLE_REPORTED;
                            tblAlertUsersTOList.Add(tblAlertUsersTO);
                        }
                    }

                }

                tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.SPOT_ENTRY_VEHICLE_REPORTED;
                tblAlertInstanceTO.AlertAction = "SPOT_ENTRY_VEHICLE_REPORTED";
                tblAlertInstanceTO.AlertComment = "SPOT Entry vehicle is reported. Vehicle No: " + spotVehicleTO.VehicleNo;
                tblAlertInstanceTO.AlertUsersTOList = tblAlertUsersTOList;
                tblAlertInstanceTO.EffectiveFromDate = spotVehicleTO.CreatedOn;
                tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                tblAlertInstanceTO.IsActive = 1;
                tblAlertInstanceTO.SourceDisplayId = "SPOT_ENTRY_VEHICLE_REPORTED";
                tblAlertInstanceTO.SourceEntityId = spotVehicleTO.IdVehicleSpotEntry;
                tblAlertInstanceTO.RaisedBy = spotVehicleTO.CreatedBy;
                tblAlertInstanceTO.RaisedOn = spotVehicleTO.CreatedOn;
                tblAlertInstanceTO.IsAutoReset = 1;

                //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                notify.SendNotificationToUsers(tblAlertInstanceTO);

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SendSpotEntryReportedNotification(TblPurchaseVehicleSpotEntryTO spotVehicleTO, TblPurchaseEnquiryTO enquiryTO,Boolean isCreateAutoSauda)");
                return resultMessage;
            }
        }


        public ResultMessage CreateNewSaudaForSpotVehicle(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, DateTime currentDate, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                TblPurchaseEnquiryTO enquiryTO = null;
                resultMessage = GetPurchaseEnquiryTO(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(TblPurchaseEnquiryTO))
                {
                    enquiryTO = (TblPurchaseEnquiryTO)resultMessage.Tag;
                }

                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == null");
                }

                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = GetScheduleSummaryTO(enquiryTO, tblPurchaseVehicleSpotEntryTO, loginUserId, currentDate);
                if (tblPurchaseScheduleSummaryTO == null)
                {
                    throw new Exception("tblPurchaseScheduleSummaryTO == null");
                }

                enquiryTO.BookingScheduleTOList.Add(tblPurchaseScheduleSummaryTO);

                resultMessage = SaveEnquiryDtls(enquiryTO, tblPurchaseVehicleSpotEntryTO, currentDate, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in SaveEnquiryDtls(enquiryTO,tblPurchaseVehicleSpotEntryTO,currentDate,conn,tran);");

                }

                tran.Commit();
                List<TblPurchaseScheduleSummaryTO> res = enquiryTO.BookingScheduleTOList.Where(a => a.SpotEntryVehicleId == tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry).ToList();
                if (res != null && res.Count == 1)
                {
                    resultMessage = AddReportedScheduleForSpotVehicle(res[0], currentDate);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error in AddReportedScheduleForSpotVehicle(tblPurchaseScheduleSummaryTO, currentDate);");

                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CreateNewSaudaForSpotVehicle(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, DateTime currentDate, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage LinkToExistingSaudaSpotVehicle(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, DateTime currentDate, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Boolean isCreateNewSauda = false;
            int count = 0;

            try
            {
                string statusIds = (Int32)Constants.TranStatusE.BOOKING_APPROVED + "," + (Int32)Constants.TranStatusE.BOOKING_ACCEPTED_BY_DIRECTOR;

                if (tblPurchaseVehicleSpotEntryTO == null)
                {
                    throw new Exception("tblPurchaseVehicleSpotEntryTO == null");
                }

                if (tblPurchaseVehicleSpotEntryTO.SupplierId <= 0)
                {
                    throw new Exception("tblPurchaseVehicleSpotEntryTO.SupplierId == 0");
                }

                int materialTypeForContainer = 0;
                List<int> materialTypeForContainerList = new List<int>(); ;

                int isCheckContainerWhileLinking = 0;
                TblConfigParamsTO configParamTOForMaterialTypeForContainer = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_MATERIAL_TYPE_FOR_ADDING_SHIPMENT, conn, tran);
                TblConfigParamsTO configParamTOForCheckingContainer = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_IS_CHECK_CONTAINER_DETAILS_WHILE_SAUDA_LINKING, conn, tran);

                if (configParamTOForMaterialTypeForContainer != null)
                {
                    String materialTypeForContainerStr = configParamTOForMaterialTypeForContainer.ConfigParamVal;//Reshma Chnages
                    materialTypeForContainerList = materialTypeForContainerStr.Split(',').Select(s => int.Parse(s)).ToList();
                    if (materialTypeForContainerList != null && materialTypeForContainerList.Count > 0)
                    {
                        if (materialTypeForContainerList.Contains(tblPurchaseVehicleSpotEntryTO.ProdClassId) == true)
                            materialTypeForContainer = tblPurchaseVehicleSpotEntryTO.ProdClassId;
                    }
                }
                if (configParamTOForCheckingContainer != null)
                {
                    isCheckContainerWhileLinking = Convert.ToInt32(configParamTOForCheckingContainer.ConfigParamVal);
                }

                List<TblPurchaseEnquiryTO> enquiryTOList = new List<TblPurchaseEnquiryTO>();
                //tblPurchaseVehicleSpotEntryTO.IsLinkToExistingSauda = 1;
                int alwaysCreateNewSauda = 0;
                TblConfigParamsTO configParamTOAlwaysCreateNewSauda = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_ALWAYS_CREATE_NEW_SAUDA_FOR_EVERY_SPOT_ENTRY, conn, tran);//Dhananjay[23-Nov-2021]

                if (configParamTOAlwaysCreateNewSauda != null)
                {
                    alwaysCreateNewSauda = Convert.ToInt32(configParamTOAlwaysCreateNewSauda.ConfigParamVal);
                }
                if (alwaysCreateNewSauda == 1)
                {
                    //Create New Sauda
                    //isCreateNewSauda = true;
                    resultMessage = CreateNewSauda(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseEnquiryTO>))
                    {
                        List<TblPurchaseEnquiryTO> tempList = (List<TblPurchaseEnquiryTO>)resultMessage.Tag;
                        enquiryTOList.AddRange(tempList);
                    }
                }
                else
                {
                    enquiryTOList = _iTblPurchaseEnquiryBL.GetSupplierWiseSaudaDetails(tblPurchaseVehicleSpotEntryTO.SupplierId, statusIds, conn, tran);
                    if ((enquiryTOList == null || enquiryTOList.Count == 0) && materialTypeForContainer != tblPurchaseVehicleSpotEntryTO.ProdClassId)
                    {
                        //Create New Sauda
                        isCreateNewSauda = true;
                        resultMessage = CreateNewSauda(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            return resultMessage;
                        }

                        if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseEnquiryTO>))
                        {
                            List<TblPurchaseEnquiryTO> tempList = (List<TblPurchaseEnquiryTO>)resultMessage.Tag;
                            enquiryTOList.AddRange(tempList);
                        }

                    }
                }
                //Attach spot vehicle to tonnatge qty sauda only
                enquiryTOList = enquiryTOList.Where(a => a.SaudaTypeId == Convert.ToInt32(Constants.SaudaTypeE.TONNAGE_QTY)).ToList();
                if ((enquiryTOList == null || enquiryTOList.Count == 0) && materialTypeForContainer != tblPurchaseVehicleSpotEntryTO.ProdClassId)
                {
                    //Create New Sauda
                    isCreateNewSauda = true;
                    resultMessage = CreateNewSauda(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseEnquiryTO>))
                    {
                        List<TblPurchaseEnquiryTO> tempList = (List<TblPurchaseEnquiryTO>)resultMessage.Tag;
                        enquiryTOList.AddRange(tempList);
                    }

                }


                //No need of materil type condition
                if (tblPurchaseVehicleSpotEntryTO.ProdClassId > 0)
                {
                    enquiryTOList = enquiryTOList.Where(a => a.ProdClassId == tblPurchaseVehicleSpotEntryTO.ProdClassId).ToList();
                    if (enquiryTOList == null || enquiryTOList.Count == 0 && materialTypeForContainer != tblPurchaseVehicleSpotEntryTO.ProdClassId)
                    {
                        isCreateNewSauda = true;
                        resultMessage = CreateNewSauda(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            return resultMessage;
                        }

                        if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseEnquiryTO>))
                        {
                            List<TblPurchaseEnquiryTO> tempList = (List<TblPurchaseEnquiryTO>)resultMessage.Tag;
                            enquiryTOList.AddRange(tempList);
                        }
                        //tblPurchaseVehicleSpotEntryTO.IsLinkToExistingSauda = 0;
                    }
                }

                if (tblPurchaseVehicleSpotEntryTO.SpotVehicleQty > 0)
                {
                    List<TblPurchaseEnquiryTO> tempEnquiryList = null;
                    tempEnquiryList = enquiryTOList.Where(a => a.PendingBookingQty >= tblPurchaseVehicleSpotEntryTO.SpotVehicleQty).ToList();
                    if (tempEnquiryList != null && tempEnquiryList.Count > 0)
                    {
                        enquiryTOList = tempEnquiryList;
                    }
                    else if (materialTypeForContainer == tblPurchaseVehicleSpotEntryTO.ProdClassId && isCheckContainerWhileLinking == 1)
                    {
                        enquiryTOList = tempEnquiryList;
                    }


                }

                TblPurchaseEnquiryTO enquiryTO = null;

                if (materialTypeForContainer == tblPurchaseVehicleSpotEntryTO.ProdClassId && isCheckContainerWhileLinking == 1)
                {
                    if (enquiryTOList != null && enquiryTOList.Count > 0)
                    {
                        int cntenq = 0;
                        List<TblpurchaseEnqShipmemtDtlsExtTO> tblpurchaseEnqShipmemtDtlsExtListTemp = new List<TblpurchaseEnqShipmemtDtlsExtTO>();
                        for (int e = 0; e < enquiryTOList.Count; e++)
                        {
                            int cntContainer = 0;
                            TblPurchaseEnquiryTO tempEnqTO = enquiryTOList[e];
                            for (int c = 0; c < tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList.Count; c++)
                            {
                                if (tempEnqTO.TblpurchaseEnqShipmemtDtlsExtTOList != null && tempEnqTO.TblpurchaseEnqShipmemtDtlsExtTOList.Count > 0)
                                {
                                    TblpurchaseEnqShipmemtDtlsExtTO tblpurchaseEnqShipmemtDtlsExt = tempEnqTO.TblpurchaseEnqShipmemtDtlsExtTOList.Where(w => w.ContainerNo == tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList[c].ContainerNo).FirstOrDefault();
                                    if (tblpurchaseEnqShipmemtDtlsExt != null)
                                    {
                                        tblpurchaseEnqShipmemtDtlsExt.PurchaseEnqId = tempEnqTO.IdPurchaseEnquiry;
                                        tblpurchaseEnqShipmemtDtlsExtListTemp.Add(tblpurchaseEnqShipmemtDtlsExt);
                                        cntContainer++;
                                    }
                                }
                            }
                            if (cntContainer == tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList.Count)
                            {
                                enquiryTO = tempEnqTO;
                                break;
                            }
                        }
                        if (tblpurchaseEnqShipmemtDtlsExtListTemp != null && tblpurchaseEnqShipmemtDtlsExtListTemp.Count == tblPurchaseVehicleSpotEntryTO.TblSpotEntryContainerDtlsTOList.Count)
                        {
                            List<TblpurchaseEnqShipmemtDtlsExtTO> groupByList = tblpurchaseEnqShipmemtDtlsExtListTemp.GroupBy(g => g.PurchaseEnqId).Select(s => s.FirstOrDefault()).ToList();

                            if (groupByList != null && groupByList.Count > 1)
                            {
                                resultMessage.DefaultBehaviour();
                                resultMessage.DisplayMessage = "Entered container numbers not found in same Sauda/Enquiry";
                                return resultMessage;
                            }
                        }
                        else if (tblpurchaseEnqShipmemtDtlsExtListTemp != null && tblpurchaseEnqShipmemtDtlsExtListTemp.Count > 0)
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "One of the entered container numbers not found in any Sauda/Enquiry";
                            return resultMessage;
                        }
                        else
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "Entered container numbers not found in any Sauda/Enquiry";
                            return resultMessage;
                        }
                    }
                    else
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "Entered container numbers not found in any Sauda/Enquiry having enough pending qty .";
                        return resultMessage;
                    }
                }


                if (!isCreateNewSauda && materialTypeForContainer != tblPurchaseVehicleSpotEntryTO.ProdClassId)
                {
                    enquiryTOList = enquiryTOList.OrderBy(a => a.SaudaCreatedOn).ToList();
                    enquiryTO = enquiryTOList[0];
                    //Prajakta[2021-08-04] Commented as vehicle is always attached to tonnage qty sauda
                    //foreach (TblPurchaseEnquiryTO purchaseEnquiryTO in enquiryTOList)
                    //{
                    //    if (purchaseEnquiryTO.SaudaTypeId == Convert.ToInt32(Constants.SaudaTypeE.TONNAGE_QTY))
                    //    {
                    //        enquiryTO = purchaseEnquiryTO;
                    //        break;

                    //    }
                    //    if (purchaseEnquiryTO.SaudaTypeId == Convert.ToInt32(Constants.SaudaTypeE.NO_OF_VEHICLES))
                    //    {
                    //        if (purchaseEnquiryTO.PendNoOfVeh > 0)
                    //        {
                    //            enquiryTO = purchaseEnquiryTO;
                    //            break;
                    //        }

                    //    }
                    //}
                }


                if (enquiryTO == null && !isCreateNewSauda && materialTypeForContainer != tblPurchaseVehicleSpotEntryTO.ProdClassId)
                {
                    isCreateNewSauda = true;
                    resultMessage = CreateNewSauda(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseEnquiryTO>))
                    {
                        List<TblPurchaseEnquiryTO> tempList = (List<TblPurchaseEnquiryTO>)resultMessage.Tag;
                        if (tempList != null && tempList.Count == 1)
                        {
                            enquiryTO = tempList[0];
                            enquiryTOList.AddRange(tempList);
                        }

                    }

                    //resultMessage.DefaultBehaviour("Exception in LinkToExistingSaudaSpotVehicle");
                    //resultMessage.DisplayMessage = "No existing Sauda available to link vehicle - " + tblPurchaseVehicleSpotEntryTO.VehicleNo;
                    //throw new Exception("No any Sauda Found Against this Spot Entry");
                    //return resultMessage;
                }
                else
                {
                    if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(List<TblPurchaseEnquiryTO>))
                    {
                        List<TblPurchaseEnquiryTO> tempList = (List<TblPurchaseEnquiryTO>)resultMessage.Tag;
                        if (tempList != null && tempList.Count == 1)
                        {
                            enquiryTO = tempList[0];
                            enquiryTOList.AddRange(tempList);
                        }

                    }
                }

                //TblPurchaseEnquiryTO enquiryTO = enquiryTOList[0];


                tblPurchaseVehicleSpotEntryTO.ProdClassId = enquiryTO.ProdClassId;
                if (isCreateNewSauda)
                    tblPurchaseVehicleSpotEntryTO.IsLinkToExistingSauda = 0;
                else
                    tblPurchaseVehicleSpotEntryTO.IsLinkToExistingSauda = 1;

                //create new schedule
                TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = GetScheduleSummaryTO(enquiryTO, tblPurchaseVehicleSpotEntryTO, loginUserId, currentDate);
                if (tblPurchaseScheduleSummaryTO == null)
                {
                    throw new Exception("tblPurchaseScheduleSummaryTO == null");
                }

                List<TblPurchaseScheduleSummaryTO> scheduleTOList = new List<TblPurchaseScheduleSummaryTO>();
                tblPurchaseScheduleSummaryTO.PurchaseEnquiryId = enquiryTO.IdPurchaseEnquiry;
                #region @KKM Spot Entry Vehicle add on IoT Machine

                int weightSourceConfigId = _iTblConfigParamsDAO.IoTSetting();
                string vehicleNumber = "";
                if (weightSourceConfigId == (int)StaticStuff.Constants.WeighingDataSourceE.IoT)
                {
                    tblPurchaseScheduleSummaryTO.ModbusRefId = _iCommonDAO.GetNextAvailableModRefIdNew();
                    if (tblPurchaseScheduleSummaryTO.ModbusRefId == 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.Text = "Error : ModbusRef List gretter than 255 or Number not found Or Dublicate number found";
                        resultMessage.DisplayMessage = Constants.DefaultErrorMsg;
                        return resultMessage;
                    }
                }
                vehicleNumber = tblPurchaseScheduleSummaryTO.VehicleNo;
                if (weightSourceConfigId == (int)Constants.WeighingDataSourceE.IoT)
                {
                    //  tblPurchaseScheduleSummaryTO.TransporterOrgId = 0;
                    tblPurchaseScheduleSummaryTO.VehicleNo = string.Empty;
                    if (tblPurchaseScheduleSummaryTO.GateId == 0)
                    {
                        TblGateTO tblGateTO = _iTblGateBL.GetDefaultTblGateTO();
                        if (tblGateTO != null)
                        {
                            tblPurchaseScheduleSummaryTO.GateId = tblGateTO.IdGate;
                            tblPurchaseScheduleSummaryTO.PortNumber = tblGateTO.PortNumber;
                            tblPurchaseScheduleSummaryTO.IoTUrl = tblGateTO.IoTUrl;
                            tblPurchaseScheduleSummaryTO.MachineIP = tblGateTO.MachineIP;
                        }
                    }
                }



                #endregion
                tblPurchaseScheduleSummaryTO.IsStatusUpdate = 1;
                scheduleTOList.Add(tblPurchaseScheduleSummaryTO);


                resultMessage = InsertScheduleDtls(scheduleTOList, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in InsertScheduleDtls(scheduleTOList,conn,tran);");
                }

                resultMessage = UpdatePendingNoOfVehiclesAgainstEnquiry(enquiryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }
                //save vehicle history details
                resultMessage = _iTblPurchaseSchStatusHistoryBL.SavePurVehStatusHistory(scheduleTOList[0], conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                enquiryTO.BookingScheduleTOList = new List<TblPurchaseScheduleSummaryTO>();
                enquiryTO.BookingScheduleTOList.AddRange(scheduleTOList);

                resultMessage = UpdateSpotVehicleDtls(tblPurchaseVehicleSpotEntryTO, enquiryTO, tblPurchaseScheduleSummaryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in UpdateSpotVehicleDtls(tblPurchaseVehicleSpotEntryTO,tblPurchaseEnquiryTO,conn,tran);");
                }

                //@KKM for write vehicle details on IoT
                if (weightSourceConfigId == (int)Constants.WeighingDataSourceE.IoT || weightSourceConfigId == (int)Constants.WeighingDataSourceE.BOTH)
                {
                    if (tblPurchaseScheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.New)
                    {

                        int resultIOT = WriteDataOnIOT(tblPurchaseScheduleSummaryTO, conn, tran, vehicleNumber);
                        if (resultIOT == 0)
                        {
                            throw new Exception("Error when write data on IoT");
                        }
                    }
                }

                //Added By Gokul
                if (tblPurchaseVehicleSpotEntryTO.PartyWeighingMeasureTO != null)
                {
                    int result = SavePartyWeightDtls(tblPurchaseVehicleSpotEntryTO, tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry, loginUserId, conn, tran);
                    if (result != 1)
                    {
                        tran.Rollback();
                        throw new Exception("Error while inserting in - InsertTblSpotVehicleMaterialDtls");
                    }
                }

                tran.Commit();


                List<TblPurchaseScheduleSummaryTO> res = enquiryTO.BookingScheduleTOList.Where(a => a.SpotEntryVehicleId == tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry).ToList();
                if (res != null && res.Count == 1)
                {
                    resultMessage = AddReportedScheduleForSpotVehicle(res[0], currentDate);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error in AddReportedScheduleForSpotVehicle(tblPurchaseScheduleSummaryTO, currentDate);");

                    }
                }

                resultMessage = SendSpotEntryReportedNotification(tblPurchaseVehicleSpotEntryTO, enquiryTO, isCreateNewSauda);

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in LinkToExistingSaudaSpotVehicle(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, DateTime currentDate, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }

        }

        public ResultMessage CreateNewSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, DateTime currentDate, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            List<TblPurchaseEnquiryTO> enquiryTOList = new List<TblPurchaseEnquiryTO>();
            try
            {
                TblPurchaseEnquiryTO tempEnquiryTO = null;
                resultMessage = GetPurchaseEnquiryTO(tblPurchaseVehicleSpotEntryTO, currentDate, loginUserId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                if (resultMessage.Tag != null && resultMessage.Tag.GetType() == typeof(TblPurchaseEnquiryTO))
                {
                    tempEnquiryTO = (TblPurchaseEnquiryTO)resultMessage.Tag;
                }

                if (tempEnquiryTO == null)
                {
                    throw new Exception("enquiryTO == null");
                }

                resultMessage = SaveEnquiryDtls(tempEnquiryTO, tblPurchaseVehicleSpotEntryTO, currentDate, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in SaveEnquiryDtls(enquiryTO,tblPurchaseVehicleSpotEntryTO,currentDate,conn,tran);");

                }

                enquiryTOList.Add(tempEnquiryTO);

                resultMessage.DefaultSuccessBehaviour();
                resultMessage.Tag = enquiryTOList;
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CreateNewSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO,DateTime currentDate,Int32 loginUserId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage GetPurchaseEnquiryTO(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, DateTime currentDate, Int32 loginUserId, SqlConnection conn = null, SqlTransaction tran = null)
        {
            ResultMessage resultMessage = new ResultMessage();

            TblPurchaseEnquiryTO enquiryTO = null;
            Boolean isSqlConnAvaible = false;

            if (conn != null && tran != null)
            {
                isSqlConnAvaible = true;
            }


            if (tblPurchaseVehicleSpotEntryTO != null)
            {
                enquiryTO = new TblPurchaseEnquiryTO();
                List<DropDownTO> purchaseManagerList = null;

                //Gate PM of supplier
                if (tblPurchaseVehicleSpotEntryTO.SupplierId > 0)
                {
                    if (isSqlConnAvaible)
                        purchaseManagerList = _iTblPurchaseManagerSupplierBL.GetPurchaseManagerListOfSupplierForDropDown(tblPurchaseVehicleSpotEntryTO.SupplierId, conn, tran);
                    else
                        purchaseManagerList = _iTblPurchaseManagerSupplierBL.GetPurchaseManagerListOfSupplierForDropDown(tblPurchaseVehicleSpotEntryTO.SupplierId);
                }

                if (purchaseManagerList == null || purchaseManagerList.Count == 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Failed to save spot vehicle. Kindly attach supplier to Purchase Manager";
                }

                enquiryTO.UserId = purchaseManagerList[0].Value;

                TblConfigParamsTO defaultCorNCIdConfigTO = null;
                if (isSqlConnAvaible)
                    defaultCorNCIdConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_DEFAULT_C_OR_NC_ID_TYPE_FOR_SRJ, conn, tran);
                else
                    defaultCorNCIdConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_DEFAULT_C_OR_NC_ID_TYPE_FOR_SRJ);

                if (defaultCorNCIdConfigTO != null)
                {
                    enquiryTO.COrNCId = Convert.ToInt32(defaultCorNCIdConfigTO.ConfigParamVal.ToString());
                }

                //enquiryTO.COrNCId = (Int32)Constants.ConfirmTypeE.CONFIRM;

                //Get latest rate
                // List<TblGlobalRatePurchaseTO> latestRateList = _iTblGlobalRatePurchaseDAO.SelectLatestRateOfPurchaseDCT((currentDate), false);
                // if (latestRateList != null && latestRateList.Count > 0)
                // {
                //     enquiryTO.GlobalRatePurchaseId = latestRateList[0].IdGlobalRatePurchase;
                //     enquiryTO.BookingRate = latestRateList[0].Rate;
                //     enquiryTO.DemandedRate = latestRateList[0].Rate;

                //     List<TblRateBandDeclarationPurchaseTO> tblRateBandDeclarationPurchaseTOList = _iTblPurchaseEnquiryBL.SelectAllTblRateBandDeclarationPurchase(enquiryTO.GlobalRatePurchaseId);
                //     if (tblRateBandDeclarationPurchaseTOList != null && tblRateBandDeclarationPurchaseTOList.Count > 0)
                //     {
                //         tblRateBandDeclarationPurchaseTOList = tblRateBandDeclarationPurchaseTOList.Where(a => a.UserId == enquiryTO.UserId).ToList();
                //         if (tblRateBandDeclarationPurchaseTOList != null && tblRateBandDeclarationPurchaseTOList.Count > 0)
                //         {
                //             enquiryTO.RateBandDeclarationPurchaseId = tblRateBandDeclarationPurchaseTOList[0].IdRateBandDeclarationPurchase;
                //         }
                //     }
                // }

                //Prajakta[2019-11-19] Commnted and added to get latest or previous declared rate
                List<TblRateBandDeclarationPurchaseTO> tblRateBandDeclarationPurchaseTOList = _iTblPurchaseEnquiryBL.GetRateDeclartionDtlsWhileBooking(enquiryTO.UserId);
                //List<TblRateBandDeclarationPurchaseTO> tblRateBandDeclarationPurchaseTOList = _iTblPurchaseEnquiryBL.SelectLatestRateBandDeclarationPurchaseTOList(enquiryTO.UserId, currentDate);
                if (tblRateBandDeclarationPurchaseTOList == null || tblRateBandDeclarationPurchaseTOList.Count == 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Failed to save spot vehicle. Today's rate is not declared.";
                    return resultMessage;
                }


                if (tblRateBandDeclarationPurchaseTOList != null && tblRateBandDeclarationPurchaseTOList.Count > 0)
                {
                    enquiryTO.RateBandDeclarationPurchaseId = tblRateBandDeclarationPurchaseTOList[0].IdRateBandDeclarationPurchase;

                    enquiryTO.GlobalRatePurchaseId = tblRateBandDeclarationPurchaseTOList[0].GlobalRatePurchaseId;
                    enquiryTO.BookingRate = tblRateBandDeclarationPurchaseTOList[0].DeclaredRate;
                    enquiryTO.DemandedRate = tblRateBandDeclarationPurchaseTOList[0].DeclaredRate;
                }

                if (tblPurchaseVehicleSpotEntryTO.SpotVehicleQty > 0)
                {
                    enquiryTO.BookingQty = tblPurchaseVehicleSpotEntryTO.SpotVehicleQty;
                    enquiryTO.PendingBookingQty = tblPurchaseVehicleSpotEntryTO.SpotVehicleQty;
                    enquiryTO.OptionalPendingQty = tblPurchaseVehicleSpotEntryTO.SpotVehicleQty;
                    enquiryTO.IsOpenQtySauda = 0;


                }
                else
                {
                    enquiryTO.BookingQty = 0;
                    enquiryTO.PendingBookingQty = 0;
                    enquiryTO.OptionalPendingQty = 0;
                    enquiryTO.IsOpenQtySauda = 1;
                }


                if (tblPurchaseVehicleSpotEntryTO.ProdClassId > 0)
                    enquiryTO.ProdClassId = tblPurchaseVehicleSpotEntryTO.ProdClassId;
                //else
                //{
                //    TblConfigParamsTO defaultMaterailTypeIdConfigTO = null;
                //    if (isSqlConnAvaible)
                //        defaultMaterailTypeIdConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_DEFAULT_MATERIAL_TYPE_FOR_SRJ, conn, tran);
                //    else
                //        defaultMaterailTypeIdConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_DEFAULT_MATERIAL_TYPE_FOR_SRJ);

                //    if (defaultMaterailTypeIdConfigTO != null)
                //    {
                //        enquiryTO.ProdClassId = Convert.ToInt32(defaultMaterailTypeIdConfigTO.ConfigParamVal.ToString());
                //    }
                //}


                enquiryTO.IsConfirmed = 1;
                enquiryTO.StatusId = (Int32)Constants.TranStatusE.BOOKING_APPROVED;
                enquiryTO.IsConvertToSauda = 1;
                enquiryTO.IsSpotedVehicle = 1;
                enquiryTO.IsAutoSpotVehSauda = 1;
                enquiryTO.CreatedBy = loginUserId;
                enquiryTO.CreatedOn = currentDate;
                enquiryTO.UpdatedBy = loginUserId;
                enquiryTO.UpdatedOn = currentDate;
                enquiryTO.SaudaCreatedOn = currentDate;
                enquiryTO.SupplierId = tblPurchaseVehicleSpotEntryTO.SupplierId;
                enquiryTO.SaudaTypeId = Convert.ToInt32(Constants.SaudaTypeE.TONNAGE_QTY);

                enquiryTO.CurrencyId = Convert.ToInt32(Constants.CurrencyTypeE.INR);
                List<int> materialTypeIdForImportList = new List<int>(); ;
                TblConfigParamsTO materialTypeIdForImport = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_MATERIAL_TYPE_FOR_ADDING_SHIPMENT);
                if (materialTypeIdForImport != null && !String.IsNullOrEmpty(materialTypeIdForImport.ConfigParamVal.ToString()))
                {
                    // Add By Samadhan 01 Aug 2022
                    //if (materialTypeIdForImport != null)
                    //{
                    //    String materialTypeIdForImportStr = materialTypeIdForImport.ConfigParamVal;
                    //    materialTypeIdForImportList = materialTypeIdForImportStr.Split(',').Select(s => int.Parse(s)).ToList();
                    //    if (materialTypeIdForImportList != null && materialTypeIdForImportList.Count > 0)
                    //    {
                    //        if (materialTypeIdForImportList.Contains(enquiryTO.ProdClassId) == true)
                    //        {
                    //            enquiryTO.CurrencyId = Convert.ToInt32(Constants.CurrencyTypeE.USD);
                    //        }
                    //    }
                    //}
                    //
                    if (Convert.ToInt32(materialTypeIdForImport.ConfigParamVal) == enquiryTO.ProdClassId)
                    {
                        enquiryTO.CurrencyId = Convert.ToInt32(Constants.CurrencyTypeE.USD);
                    }
                }
                //Get Supplier state
                enquiryTO.StateId = _iTblPurchaseManagerSupplierBL.GetSupplierStateId(enquiryTO.SupplierId);

                if (tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList != null && tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList.Count > 0)
                {

                    //Get Sauda item details 
                    List<TblPurchaseEnquiryDetailsTO> enquiryDetailsTOList = new List<TblPurchaseEnquiryDetailsTO>();
                    for (int i = 0; i < tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList.Count; i++)
                    {
                        TblSpotVehMatDtlsTO spotVehItemTO = tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList[i];

                        TblPurchaseEnquiryDetailsTO tblPurchaseEnquiryDetailsTO = new TblPurchaseEnquiryDetailsTO();
                        tblPurchaseEnquiryDetailsTO.ProdItemId = spotVehItemTO.ProdItemId;
                        tblPurchaseEnquiryDetailsTO.Qty = spotVehItemTO.Qty;
                        tblPurchaseEnquiryDetailsTO.PendingQty = spotVehItemTO.Qty;
                        tblPurchaseEnquiryDetailsTO.Rate = enquiryTO.BookingRate;
                        tblPurchaseEnquiryDetailsTO.ItemBookingRate = enquiryTO.BookingRate;
                        enquiryDetailsTOList.Add(tblPurchaseEnquiryDetailsTO);
                    }
                    enquiryTO.PurchaseEnquiryDetailsTOList = enquiryDetailsTOList;

                    CalculateRateAsPerCorNCForEnquiry(enquiryTO);
                    CalculateItemDtls(enquiryTO.PurchaseEnquiryDetailsTOList, null);

                }

            }

            resultMessage.DefaultSuccessBehaviour();
            resultMessage.Tag = enquiryTO;
            return resultMessage;
        }

        public TblPurchaseScheduleSummaryTO GetScheduleSummaryTO(TblPurchaseEnquiryTO enquiryTO, TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, Int32 loginUserId, DateTime currentDate)
        {
            TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO = null;
            if (tblPurchaseVehicleSpotEntryTO != null && enquiryTO != null)
            {
                tblPurchaseScheduleSummaryTO = new TblPurchaseScheduleSummaryTO();
                tblPurchaseScheduleSummaryTO.SupplierId = enquiryTO.SupplierId;
                tblPurchaseScheduleSummaryTO.VehicleNo = tblPurchaseVehicleSpotEntryTO.VehicleNo;
                tblPurchaseScheduleSummaryTO.ScheduleDate = currentDate;
                tblPurchaseScheduleSummaryTO.Qty = tblPurchaseVehicleSpotEntryTO.SpotVehicleQty;
                tblPurchaseScheduleSummaryTO.OrgScheduleQty = tblPurchaseVehicleSpotEntryTO.SpotVehicleQty;
                tblPurchaseScheduleSummaryTO.StatusId = (Int32)Constants.TranStatusE.New;
                tblPurchaseScheduleSummaryTO.CreatedBy = loginUserId;
                tblPurchaseScheduleSummaryTO.CreatedOn = currentDate;
                tblPurchaseScheduleSummaryTO.COrNcId = enquiryTO.COrNCId;
                tblPurchaseScheduleSummaryTO.ProdClassId = tblPurchaseVehicleSpotEntryTO.ProdClassId;
                tblPurchaseScheduleSummaryTO.IsActive = 1;
                tblPurchaseScheduleSummaryTO.SpotEntryVehicleId = tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry;


                if (tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList != null && tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList.Count > 0)
                {

                    //Get Schedule item details 
                    List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList = new List<TblPurchaseVehicleDetailsTO>();
                    for (int i = 0; i < tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList.Count; i++)
                    {
                        TblSpotVehMatDtlsTO spotVehItemTO = tblPurchaseVehicleSpotEntryTO.SpotVehMatDtlsTOList[i];

                        TblPurchaseVehicleDetailsTO tblPurchaseVehicleDetailsTO = new TblPurchaseVehicleDetailsTO();
                        tblPurchaseVehicleDetailsTO.ProdItemId = spotVehItemTO.ProdItemId;
                        tblPurchaseVehicleDetailsTO.Qty = spotVehItemTO.Qty;
                        tblPurchaseVehicleDetailsTO.PendingQty = spotVehItemTO.Qty;
                        tblPurchaseVehicleDetailsTO.Rate = enquiryTO.BookingRate;
                        tblPurchaseVehicleDetailsTO.ItemBookingRate = enquiryTO.BookingRate;
                        scheduleItemDtlsList.Add(tblPurchaseVehicleDetailsTO);
                    }
                    tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = scheduleItemDtlsList;

                    CalculateRateAsPerCorNC(tblPurchaseScheduleSummaryTO, enquiryTO);
                    CalculateItemDtls(null, tblPurchaseScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList);

                }

            }

            return tblPurchaseScheduleSummaryTO;
        }


        public void CalculateItemDtls(List<TblPurchaseEnquiryDetailsTO> tblPurchaseEnquiryDetailsTOList, List<TblPurchaseVehicleDetailsTO> scheduleItemDtlsList)
        {
            if (tblPurchaseEnquiryDetailsTOList != null && tblPurchaseEnquiryDetailsTOList.Count > 0)
            {
                for (int i = 0; i < tblPurchaseEnquiryDetailsTOList.Count; i++)
                {
                    tblPurchaseEnquiryDetailsTOList[i].ProductAomunt = tblPurchaseEnquiryDetailsTOList[i].Rate * tblPurchaseEnquiryDetailsTOList[i].Qty;
                }
            }

            if (scheduleItemDtlsList != null && scheduleItemDtlsList.Count > 0)
            {
                for (int i = 0; i < scheduleItemDtlsList.Count; i++)
                {
                    scheduleItemDtlsList[i].ProductAomunt = scheduleItemDtlsList[i].Rate * scheduleItemDtlsList[i].Qty;
                    if (scheduleItemDtlsList[i].IsNonCommercialItem == 1)
                    {
                        scheduleItemDtlsList[i].Rate = 0;
                        scheduleItemDtlsList[i].ProductAomunt = 0;
                    }
                }
            }
        }

        public ResultMessage SaveEnquiryDtls(TblPurchaseEnquiryTO tblPurchaseEnquiryTO, TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, DateTime currentDate, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {
                if (tblPurchaseEnquiryTO == null)
                {
                    throw new Exception("enquiryTO == null");
                }

                DimFinYearTO DimFinYearTO = _idimensionBL.GetCurrentFinancialYear(currentDate, conn, tran);
                if (DimFinYearTO != null)
                {
                    tblPurchaseEnquiryTO.EnqNo = _iTblPurchaseEnquiryBL.SelectMaxEnquiryNo(DimFinYearTO.IdFinYear, conn, tran);
                    tblPurchaseEnquiryTO.FinYear = DimFinYearTO.IdFinYear;
                    tblPurchaseEnquiryTO.EnqDisplayNo = DimFinYearTO.IdFinYear + "/" + tblPurchaseEnquiryTO.EnqNo;
                }

                result = _iTblPurchaseEnquiryBL.InsertTblPurchaseEnquiry(tblPurchaseEnquiryTO, conn, tran);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour("Error While InsertTblPurchaseEnquiry(tblPurchaseEnquiryTO, conn, tran);");
                    return resultMessage;
                }

                if (tblPurchaseEnquiryTO.PurchaseEnquiryDetailsTOList != null && tblPurchaseEnquiryTO.PurchaseEnquiryDetailsTOList.Count > 0)
                {
                    for (int qd = 0; qd < tblPurchaseEnquiryTO.PurchaseEnquiryDetailsTOList.Count; qd++)
                    {
                        TblPurchaseEnquiryDetailsTO tblPurchaseEnquiryDetailsTO = tblPurchaseEnquiryTO.PurchaseEnquiryDetailsTOList[qd];
                        tblPurchaseEnquiryDetailsTO.ItemBookingRate = tblPurchaseEnquiryTO.BookingRate;
                        tblPurchaseEnquiryDetailsTO.PurchaseEnquiryId = tblPurchaseEnquiryTO.IdPurchaseEnquiry;
                        result = _iTblPurchaseEnquiryDetailsBL.InsertTblPurchaseEnquiryDetails(tblPurchaseEnquiryDetailsTO, conn, tran);
                        if (result != 1)
                        {
                            resultMessage.DefaultBehaviour("Error While InsertTblPurchaseEnquiryDetails(tblPurchaseEnquiryDetailsTO, conn, tran);");
                            return resultMessage;
                        }

                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in ResultMessage SaveEnquiryDtls(TblPurchaseEnquiryTO enquiryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }

        }

        public ResultMessage UpdateSpotVehicleDtls(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, TblPurchaseEnquiryTO tblPurchaseEnquiryTO, TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {
                if (tblPurchaseVehicleSpotEntryTO != null && tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry > 0)
                {
                    if (tblPurchaseEnquiryTO.BookingScheduleTOList != null && tblPurchaseEnquiryTO.BookingScheduleTOList.Count > 0)
                    {
                        var res = tblPurchaseEnquiryTO.BookingScheduleTOList.Where(a => a.SpotEntryVehicleId == tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry).ToList();
                        if (res != null && res.Count > 0)
                        {
                            tblPurchaseVehicleSpotEntryTO.PurchaseScheduleSummaryId = res[0].IdPurchaseScheduleSummary;
                        }
                    }

                    //Prajakta[2019-03-29] Added to check if sauda is already there for spot vehicle
                    TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectTblPurchaseVehicleSpotEntryTO(tblPurchaseVehicleSpotEntryTO.IdVehicleSpotEntry, conn, tran);
                    if (spotVehicleTO != null)
                    {
                        if (spotVehicleTO.PurchaseEnquiryId > 0)
                        {
                            tran.Rollback();
                            resultMessage.Result = 0;
                            resultMessage.Text = "Sauda # " + spotVehicleTO.BookingTO.EnqDisplayNo + " is already created for the Vehicle No. - " + spotVehicleTO.VehicleNo;
                            resultMessage.DisplayMessage = "Sauda # " + spotVehicleTO.BookingTO.EnqDisplayNo + "is already created for the Vehicle No. - " + spotVehicleTO.VehicleNo;
                            resultMessage.MessageType = ResultMessageE.Error;
                            return resultMessage;
                        }
                    }


                    tblPurchaseVehicleSpotEntryTO.PurchaseEnquiryId = tblPurchaseEnquiryTO.IdPurchaseEnquiry;

                    result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseVehicleSpotEntryTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseVehicleSpotEntryTO, conn, tran);");
                    }

                }

                result = _iTblPurchaseEnquiryBL.UpdatePendingBookingQty(tblPurchaseEnquiryTO, false, tblPurchaseScheduleSummaryTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in _iTblPurchaseEnquiryBL.UpdatePendingBookingQty(tblPurchaseEnquiryTO, false, null, conn, tran);");
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateSpotVehicleDtls(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO,TblPurchaseEnquiryTO enquiryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }


        public ResultMessage InsertPurchaseUnloadingDtlsWhileWeighing(TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                resultMessage = InsertPurchaseUnloadingDtls(weighingStageSummaryTO, currentDate, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in InsertPurchaseUnloadingDtlsWhileweighing(TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }
        public ResultMessage InsertPurchaseUnloadingDtls(TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO, DateTime currentDate, SqlConnection conn, SqlTransaction tran)
        {

            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            Int32 result = 0;
            try
            {
                //Select unloading details against weighing stage id
                if (weighingStageSummaryTO == null)
                {
                    throw new Exception("weighingStageSummaryTO == null");
                }

                List<TblPurchaseWeighingStageSummaryTO> weighingTOList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(weighingStageSummaryTO.PurchaseScheduleSummaryId, null, false);
                if (weighingTOList == null || weighingTOList.Count == 0)
                {
                    throw new Exception("weighingTOList == null");
                }

                weighingTOList = weighingTOList.OrderByDescending(a => a.IdPurchaseWeighingStage).ToList();

                TblPurchaseWeighingStageSummaryTO lastWeighingTO = weighingTOList[0];


                List<TblPurchaseUnloadingDtlTO> unloadingDtlsTOList = _iTblPurchaseUnloadingDtlBL.SelectAllTblPurchaseUnloadingDtlList(lastWeighingTO.IdPurchaseWeighingStage, conn, tran);
                if (unloadingDtlsTOList == null || unloadingDtlsTOList.Count == 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Can not take weight as unloading grade details not added.";
                    resultMessage.Text = resultMessage.DisplayMessage;
                    return resultMessage;
                }

                unloadingDtlsTOList = unloadingDtlsTOList.Where(a => a.IsNextUnldGrade == 0 && a.IsGradingBeforeUnld == 1).ToList();
                if (unloadingDtlsTOList == null || unloadingDtlsTOList.Count == 0)
                {

                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Can not take weight as unloading grade details not added.";
                    resultMessage.Text = resultMessage.DisplayMessage;
                    return resultMessage;
                }

                string displayMsg = string.Empty;

                List<TblPurchaseUnloadingDtlTO> finalUnloadingList = GetPurchaseUnldGradeDtlsWhileWeighing(unloadingDtlsTOList, weighingStageSummaryTO, ref displayMsg);
                if (finalUnloadingList == null || finalUnloadingList.Count == 0)
                {
                    throw new Exception("finalUnloadingList == null");
                }

                for (int i = 0; i < finalUnloadingList.Count; i++)
                {
                    finalUnloadingList[i].WeighingStageId = weighingStageSummaryTO.WeightStageId;
                    result = _iTblPurchaseUnloadingDtlBL.InsertTblPurchaseUnloadingDtl(finalUnloadingList[i], conn, tran);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        return resultMessage;
                    }

                }

                TblPurchaseScheduleSummaryTO scheduleSummaryTO = new TblPurchaseScheduleSummaryTO();
                scheduleSummaryTO = SelectAllEnquiryScheduleSummaryTO(weighingStageSummaryTO.PurchaseScheduleSummaryId, false, conn, tran);
                if (scheduleSummaryTO == null)
                {
                    throw new Exception("scheduleSummaryTO == null");
                }

                resultMessage = _iTblPurchaseVehicleStageCntBL.InsertOrUpdateVehicleWtStageCount(scheduleSummaryTO, null, null, finalUnloadingList[0], null, conn, tran);
                if (resultMessage.Result <= 0)
                {
                    throw new Exception("Error in InsertOrUpdateVehicleWtStageCount(tblPurchaseScheduleSummaryTO, tblPurchaseWeighingStageSummaryTO, null, null, conn, tran);");
                }


                resultMessage.DefaultSuccessBehaviour();
                if (!String.IsNullOrEmpty(displayMsg))
                {
                    resultMessage.DisplayMessage = displayMsg;
                    resultMessage.Result = 2;
                }
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in InsertPurchaseUnloadingDtls(TblPurchaseWeighingStageSummaryTO weighingStageSummaryTO,DateTime currentDate, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }

        }

        //old ato adjustment code commented by Prajakta[2020-02-28]
        //public List<TblPurchaseUnloadingDtlTO> GetPurchaseUnldGradeDtlsWhileWeighing(List<TblPurchaseUnloadingDtlTO> gradingWhileUnloadingList, TblPurchaseWeighingStageSummaryTO weighingTO)
        //{
        //    List<TblPurchaseUnloadingDtlTO> finalUnloadingList = null;

        //    double totalUnloadedQty = 0;
        //    double nonCommercialQty = 0;

        //    if (gradingWhileUnloadingList != null && gradingWhileUnloadingList.Count > 0)
        //    {
        //        List<TblPurchaseUnloadingDtlTO> tempList = new List<TblPurchaseUnloadingDtlTO>();

        //        //totalUnloadedQty = gradingWhileUnloadingList.Where(a => a.IsNonCommercialItem == 0).Sum(a => a.QtyMT);
        //        //nonCommercialQty = gradingWhileUnloadingList.Where(a => a.IsNonCommercialItem == 1).Sum(a => a.QtyMT);

        //        totalUnloadedQty = gradingWhileUnloadingList.Where(a => a.IsGradeSelected == 0).Sum(a => a.QtyMT);
        //        nonCommercialQty = gradingWhileUnloadingList.Where(a => a.IsGradeSelected == 1).Sum(a => a.QtyMT);

        //        tempList = GetUnloadingTOList(gradingWhileUnloadingList, weighingTO, totalUnloadedQty, nonCommercialQty);
        //        if (tempList != null && tempList.Count > 0)
        //        {
        //            finalUnloadingList = new List<TblPurchaseUnloadingDtlTO>();
        //            finalUnloadingList.AddRange(tempList);
        //        }
        //    }

        //    return finalUnloadingList;
        //}

        //public List<TblPurchaseUnloadingDtlTO> GetUnloadingTOList(List<TblPurchaseUnloadingDtlTO> gradingWhileUnloadingList, TblPurchaseWeighingStageSummaryTO weighingTO, double totalUnloadedQty, double nonCommercialQty)
        //{
        //    List<TblPurchaseUnloadingDtlTO> finalUnloadingList = new List<TblPurchaseUnloadingDtlTO>();
        //    double temp = 100;
        //    double totalNetWt = 0;
        //    double conversionFact = 1000;

        //    totalNetWt = weighingTO.NetWeightMT;
        //    totalNetWt = totalNetWt / conversionFact;

        //    double qtyExcludingNonCommercialItem = 0;
        //    qtyExcludingNonCommercialItem = totalNetWt - nonCommercialQty;
        //    if (qtyExcludingNonCommercialItem <= 0)
        //        qtyExcludingNonCommercialItem = 0;

        //    qtyExcludingNonCommercialItem = Math.Round(qtyExcludingNonCommercialItem, 3);


        //    for (int i = 0; i < gradingWhileUnloadingList.Count; i++)
        //    {

        //        TblPurchaseUnloadingDtlTO gradingWhileUnloadingTO = gradingWhileUnloadingList[i];
        //        TblPurchaseUnloadingDtlTO unloadingTO = new TblPurchaseUnloadingDtlTO();

        //        //if (gradingWhileUnloadingTO.IsNonCommercialItem == 0)
        //        if (gradingWhileUnloadingTO.IsGradeSelected == 0)
        //        {
        //            double perc = 0;
        //            perc = (gradingWhileUnloadingTO.QtyMT * temp) / totalUnloadedQty;

        //            unloadingTO.QtyMT = (qtyExcludingNonCommercialItem * perc) / temp;
        //            unloadingTO.QtyMT = Math.Round(unloadingTO.QtyMT, 3);

        //            unloadingTO.Recovery = gradingWhileUnloadingTO.Recovery;
        //        }
        //        else
        //        {
        //            if (qtyExcludingNonCommercialItem <= 0)
        //                unloadingTO.QtyMT = totalNetWt;
        //            else
        //                unloadingTO.QtyMT = gradingWhileUnloadingTO.QtyMT;

        //            unloadingTO.Recovery = 0;
        //        }

        //        unloadingTO.PurchaseScheduleSummaryId = weighingTO.PurchaseScheduleSummaryId;
        //        unloadingTO.PurchaseWeighingStageId = weighingTO.IdPurchaseWeighingStage;
        //        unloadingTO.IsConfirmUnloading = 1;
        //        unloadingTO.IsGradingBeforeUnld = 0;
        //        unloadingTO.IsNextUnldGrade = 0;
        //        unloadingTO.CreatedBy = weighingTO.UpdatedBy;
        //        unloadingTO.CreatedOn = weighingTO.UpdatedOn;
        //        unloadingTO.ProdItemId = gradingWhileUnloadingTO.ProdItemId;


        //        if (unloadingTO.QtyMT > 0)
        //            finalUnloadingList.Add(unloadingTO);
        //    }
        //    return finalUnloadingList;
        //}


        public List<TblPurchaseUnloadingDtlTO> GetPurchaseUnldGradeDtlsWhileWeighing(List<TblPurchaseUnloadingDtlTO> gradingWhileUnloadingList, TblPurchaseWeighingStageSummaryTO weighingTO, ref string displayMsg)
        {
            List<TblPurchaseUnloadingDtlTO> finalUnloadingList = null;



            if (gradingWhileUnloadingList != null && gradingWhileUnloadingList.Count > 0)
            {
                List<TblPurchaseUnloadingDtlTO> tempList = new List<TblPurchaseUnloadingDtlTO>();

                tempList = GetUnloadingTOList(gradingWhileUnloadingList, weighingTO, ref displayMsg);
                if (tempList != null && tempList.Count > 0)
                {
                    finalUnloadingList = new List<TblPurchaseUnloadingDtlTO>();
                    finalUnloadingList.AddRange(tempList);
                }
            }

            return finalUnloadingList;
        }

        public List<TblPurchaseUnloadingDtlTO> GetUnloadingTOList(List<TblPurchaseUnloadingDtlTO> gradingWhileUnloadingList, TblPurchaseWeighingStageSummaryTO weighingTO, ref string displayMsg)
        {

            //Check for configuaration for round off
            Int32 autoRoundOffVal = 10;

            TblConfigParamsTO autoRoundOffConfigVal = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_AUTO_ROUND_OF_DECIMAL_VAL);
            if (autoRoundOffConfigVal != null && !String.IsNullOrEmpty(autoRoundOffConfigVal.ConfigParamVal.ToString()))
            {
                autoRoundOffVal = Convert.ToInt32(autoRoundOffConfigVal.ConfigParamVal.ToString());
            }

            List<TblPurchaseUnloadingDtlTO> finalUnloadingList = new List<TblPurchaseUnloadingDtlTO>();
            double temp = 100;
            double totalNetWt = 0;
            double conversionFact = 1000;
            double totalUnloadedQty = 0;
            double sumOfSelectedGrades = 0;
            double qtyExcludingNonCommercialItem = 0;
            Boolean isAutoAdjustAllGrades = false;
            double nonCommercialQty = 0;
            displayMsg = string.Empty;

            totalNetWt = weighingTO.NetWeightMT;
            totalNetWt = totalNetWt / conversionFact;

            nonCommercialQty = gradingWhileUnloadingList.Where(a => a.IsNonCommercialItem == 1).Sum(a => a.QtyMT);

            if (totalNetWt <= nonCommercialQty)
            {
                //adjust qty to dust itself
                gradingWhileUnloadingList = gradingWhileUnloadingList.Where(a => a.IsNonCommercialItem == 1).ToList();
                TblPurchaseUnloadingDtlTO unloadingNonCommercialTO = gradingWhileUnloadingList[0];
                unloadingNonCommercialTO.QtyMT = totalNetWt;
                unloadingNonCommercialTO.Recovery = 0;
                unloadingNonCommercialTO.PurchaseScheduleSummaryId = weighingTO.PurchaseScheduleSummaryId;
                unloadingNonCommercialTO.PurchaseWeighingStageId = weighingTO.IdPurchaseWeighingStage;
                unloadingNonCommercialTO.IsConfirmUnloading = 1;
                unloadingNonCommercialTO.IsGradingBeforeUnld = 0;
                unloadingNonCommercialTO.IsNextUnldGrade = 0;
                unloadingNonCommercialTO.CreatedBy = weighingTO.UpdatedBy;
                unloadingNonCommercialTO.CreatedOn = weighingTO.UpdatedOn;
                finalUnloadingList.Add(unloadingNonCommercialTO);
                return finalUnloadingList;

            }

            sumOfSelectedGrades = gradingWhileUnloadingList.Where(a => a.IsGradeSelected == 1).Sum(a => a.QtyMT);

            //check if actual wt is equal to sum of selected grades
            if (totalNetWt <= sumOfSelectedGrades)
            {
                totalUnloadedQty = sumOfSelectedGrades;
                qtyExcludingNonCommercialItem = totalNetWt - nonCommercialQty;
                isAutoAdjustAllGrades = true;

                if (totalNetWt < sumOfSelectedGrades)
                {
                    displayMsg = "Actual wt(" + totalNetWt + " MT ) is less than total of checked constant qty(" + sumOfSelectedGrades + " MT )";
                }
            }
            else if (totalNetWt > sumOfSelectedGrades)
            {
                totalUnloadedQty = gradingWhileUnloadingList.Where(a => a.IsGradeSelected == 0 && a.IsNonCommercialItem == 0).Sum(a => a.QtyMT);
                qtyExcludingNonCommercialItem = totalNetWt - sumOfSelectedGrades - nonCommercialQty;
                isAutoAdjustAllGrades = false;
            }

            if (qtyExcludingNonCommercialItem <= 0)
                qtyExcludingNonCommercialItem = 0;

            qtyExcludingNonCommercialItem = Math.Round(qtyExcludingNonCommercialItem, 3);

            if (gradingWhileUnloadingList != null && gradingWhileUnloadingList.Count > 0)
            {

                for (int i = 0; i < gradingWhileUnloadingList.Count; i++)
                {

                    TblPurchaseUnloadingDtlTO gradingWhileUnloadingTO = gradingWhileUnloadingList[i];
                    TblPurchaseUnloadingDtlTO unloadingTO = new TblPurchaseUnloadingDtlTO();

                    if (isAutoAdjustAllGrades)
                    {

                        if (gradingWhileUnloadingTO.IsNonCommercialItem == 1)
                        {
                            unloadingTO.QtyMT = gradingWhileUnloadingTO.QtyMT;
                            unloadingTO.Recovery = 0;
                        }
                        else
                        {
                            if (gradingWhileUnloadingTO.IsGradeSelected == 1)
                            {
                                double perc = 0;
                                perc = (gradingWhileUnloadingTO.QtyMT * temp) / totalUnloadedQty;

                                unloadingTO.QtyMT = (qtyExcludingNonCommercialItem * perc) / temp;
                                unloadingTO.Recovery = gradingWhileUnloadingTO.Recovery;
                            }
                        }
                    }
                    else
                    {
                        if (gradingWhileUnloadingTO.IsNonCommercialItem == 1)
                        {
                            unloadingTO.QtyMT = gradingWhileUnloadingTO.QtyMT;
                            unloadingTO.Recovery = 0;
                        }
                        else
                        {
                            if (gradingWhileUnloadingTO.IsGradeSelected == 1)
                            {
                                unloadingTO.QtyMT = gradingWhileUnloadingTO.QtyMT;
                                unloadingTO.Recovery = gradingWhileUnloadingTO.Recovery;
                            }
                            else
                            {
                                double perc = 0;
                                perc = (gradingWhileUnloadingTO.QtyMT * temp) / totalUnloadedQty;
                                unloadingTO.QtyMT = (qtyExcludingNonCommercialItem * perc) / temp;
                                unloadingTO.Recovery = gradingWhileUnloadingTO.Recovery;
                            }
                        }

                    }

                    unloadingTO.PurchaseScheduleSummaryId = weighingTO.PurchaseScheduleSummaryId;
                    unloadingTO.PurchaseWeighingStageId = weighingTO.IdPurchaseWeighingStage;
                    unloadingTO.IsConfirmUnloading = 1;
                    unloadingTO.IsGradingBeforeUnld = 0;
                    unloadingTO.IsNextUnldGrade = 0;
                    unloadingTO.CreatedBy = weighingTO.UpdatedBy;
                    unloadingTO.CreatedOn = weighingTO.UpdatedOn;
                    unloadingTO.ProdItemId = gradingWhileUnloadingTO.ProdItemId;
                    unloadingTO.IsGradeSelected = gradingWhileUnloadingTO.IsGradeSelected;

                    Boolean isInKg = true;
                    unloadingTO.QtyMT = RoundOffVal(unloadingTO.QtyMT, autoRoundOffVal, isInKg);

                    if (unloadingTO.QtyMT > 0)
                        finalUnloadingList.Add(unloadingTO);
                }
            }

            return finalUnloadingList;
        }


        public double RoundOffVal(double val, Int32 autoRoundOffVal, Boolean isInKg)
        {
            if (isInKg)
            {
                double conversionFact = 1000;
                val = val * conversionFact;
                val /= autoRoundOffVal;
                val = Math.Round(val);
                val *= autoRoundOffVal;
                val = val / conversionFact;
            }
            else
            {
                val = Math.Round(val, autoRoundOffVal);
            }
            return val;

        }

        public ResultMessage UpdateMaterialTypeOfSauda(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 loginUserId, Boolean isUpdateMaterialType)
        {
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            ResultMessage resultMessage = new StaticStuff.ResultMessage();
            resultMessage.MessageType = ResultMessageE.None;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                resultMessage = UpdateMaterialTypeOfSauda(scheduleSummaryTO, loginUserId, isUpdateMaterialType, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Submitted Successfully.";
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateMaterialTypeOfSauda(Int32 rootScheduleId,Int32 prodClassId)");
                return resultMessage;

            }
            finally
            {

                conn.Close();
            }

        }

        public ResultMessage UpdateMaterialTypeOfSauda(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 loginUserId, Boolean isUpdateMaterialType, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            Int32 result = 0;

            try
            {

                if (scheduleSummaryTO == null)
                {
                    throw new Exception("scheduleSummaryTO == null");
                }

                if (scheduleSummaryTO.ActualRootScheduleId <= 0)
                {
                    throw new Exception("rootScheduleId == null");
                }


                result = UpdateCorNcIdOfVehicle(scheduleSummaryTO, conn, tran);
                if (result < 0)
                {
                    throw new Exception("Error in UpdateCorNcIdOfVehicle(scheduleSummaryTO,conn,tran);");
                }

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblPurchaseEnquiryTO(scheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == null");
                }

                //List<TblPurchaseScheduleSummaryTO> existingScheduleList = SelectAllEnquiryScheduleSummaryTOByRootId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                //if(existingScheduleList != null && existingScheduleList.Count > 0)
                //{
                //    for (int k = 0; k < existingScheduleList.Count; k++)
                //    {
                //        CalculateRateAsPerCorNC(existingScheduleList[k], enquiryTO);
                //        if(existingScheduleList[k].PurchaseScheduleSummaryDetailsTOList != null && existingScheduleList[k].PurchaseScheduleSummaryDetailsTOList.Count > 0)
                //        {

                //        }
                //    }
                //}

                if (isUpdateMaterialType)
                {
                    //Select If vehicle is added from spot entry
                    //TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                    //if (spotVehicleTO == null)
                    //{
                    //    resultMessage.DefaultBehaviour();
                    //    resultMessage.DisplayMessage = "Vehicle No : " + scheduleSummaryTO.VehicleNo + " is not added from spot entry. So unable to change the material type.";
                    //    return resultMessage;
                    //}

                    //if (spotVehicleTO.IsLinkToExistingSauda == 1)
                    //{
                    //    resultMessage.DefaultBehaviour();
                    //    resultMessage.DisplayMessage = "Vehicle No : " + scheduleSummaryTO.VehicleNo + " is linked to existing sauda no : " + spotVehicleTO.EnqDisplayNo + "So unable to change the material type.";
                    //    return resultMessage;
                    //}

                    //if (spotVehicleTO.IsLinkToExistingSauda == 0 && spotVehicleTO.IsAutoSpotVehSauda == 1)
                    //{



                    enquiryTO.ProdClassId = scheduleSummaryTO.ProdClassId;
                    enquiryTO.UpdatedBy = loginUserId;
                    enquiryTO.UpdatedOn = currentDate;
                    enquiryTO.BookingQty = 0;
                    enquiryTO.PendingBookingQty = 0;

                    enquiryTO.IsEnqTransfered = 0;
                    result = _iTblPurchaseEnquiryBL.UpdateTblBookingsForPurchase(enquiryTO, conn, tran);
                    if (result != 1)
                    {
                        throw new Exception("Error in UpdateTblBookingsForPurchase(enquiryTO,conn,tran);");
                    }

                    //check for the added grade details for the latest schedule and if exists then delete as materail type is changed
                    List<TblPurchaseScheduleSummaryTO> allScheduleList = SelectAllEnquiryScheduleSummaryTOByRootId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                    //if (allScheduleList == null || allScheduleList.Count == 0)
                    //{
                    //    throw new Exception("allScheduleList == NULL against rootScheduleId = " + scheduleSummaryTO.ActualRootScheduleId);
                    //}

                    Boolean isGetGradeExpDtls = false;
                    Boolean isDeletedAllRecords = false;

                    if (allScheduleList != null && allScheduleList.Count > 0)
                    {
                        for (int i = 0; i < allScheduleList.Count; i++)
                        {
                            TblPurchaseScheduleSummaryTO tempTO = allScheduleList[i];
                            tempTO.PurchaseScheduleSummaryDetailsTOList = _iTblPurchaseVehicleDetailsBL.SelectAllTblPurchaseVehicleDetailsList(tempTO.IdPurchaseScheduleSummary, isGetGradeExpDtls, conn, tran);
                            if (tempTO.PurchaseScheduleSummaryDetailsTOList != null && tempTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                            {
                                result = _iTblPurchaseVehicleDetailsBL.DeleteAllVehicleItemDtlsAgainstVehSchedule(tempTO.IdPurchaseScheduleSummary, conn, tran);
                                if (result < 0)
                                {
                                    throw new Exception("Error in TblPurchaseVehicleDetailsBL.DeleteAllVehicleItemDtlsAgainstVehSchedule(scheduleSummaryTO.IdPurchaseScheduleSummary,conn,tran);");
                                }

                                isDeletedAllRecords = true;
                            }
                        }
                    }


                    if (isDeletedAllRecords)
                    {
                        scheduleSummaryTO.Qty = 0;
                        scheduleSummaryTO.OrgScheduleQty = 0;
                        result = _iTblPurchaseScheduleSummaryDAO.UpdateScheduleVehicleQtyOnly(scheduleSummaryTO, conn, tran);
                        if (result == -1)
                        {
                            throw new Exception("Error in _iTblPurchaseScheduleSummaryDAO.UpdateScheduleVehicleQtyOnly(scheduleSummaryTO,conn,tran);");
                        }

                    }

                    //check for the added grade details for the enquiry and if exists then delete as materail type is changed
                    enquiryTO.PurchaseEnquiryDetailsTOList = _iTblPurchaseEnquiryDetailsBL.SelectTblEnquiryDetailsList(enquiryTO.IdPurchaseEnquiry, conn, tran);
                    if (enquiryTO.PurchaseEnquiryDetailsTOList != null && enquiryTO.PurchaseEnquiryDetailsTOList.Count > 0)
                    {
                        result = _iTblPurchaseEnquiryDetailsBL.DeleteAllGradeDetailsForEnquiry(enquiryTO.IdPurchaseEnquiry, conn, tran);
                        if (result < 0)
                        {
                            throw new Exception("Error in _iTblPurchaseEnquiryDetailsBL.DeleteAllGradeDetailsForEnquiry(enquiryTO.IdPurchaseEnquiry, conn, tran);");
                        }
                    }

                    //}
                    //else
                    //{
                    //    resultMessage.DefaultBehaviour();
                    //    resultMessage.DisplayMessage = "Unable to change the material type.";
                    //    return resultMessage;
                    //}

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateMaterialTypeOfSauda(Int32 rootScheduleId, Int32 prodClassId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;

            }
        }

        public double GetWeighingStageWiseSumOfImpurities(Int32 rootSheduleId, string impuritiesStr)
        {

            double totalImpurities = 0;

            if (rootSheduleId > 0)
            {
                Int32 isGradingBeforeUnld = 0;
                List<TblPurchaseUnloadingDtlTO> unloadingDtlsList = _iTblPurchaseUnloadingDtlBL.SelectAllTblPurchaseUnloadingDtlListByScheduleId(rootSheduleId, isGradingBeforeUnld);
                if (unloadingDtlsList != null && unloadingDtlsList.Count > 0)
                {
                    unloadingDtlsList = unloadingDtlsList.Where(a => a.IsNextUnldGrade == 0).ToList();
                    if (unloadingDtlsList != null && unloadingDtlsList.Count > 0)
                    {
                        List<Int32> uniqueWtId = unloadingDtlsList.Select(x => x.PurchaseWeighingStageId).Distinct().ToList();
                        if (uniqueWtId != null && uniqueWtId.Count > 0)
                        {
                            for (int i = 0; i < uniqueWtId.Count; i++)
                            {
                                List<TblPurchaseUnloadingDtlTO> tempUnldList = unloadingDtlsList.Where(a => a.PurchaseWeighingStageId == uniqueWtId[i]).ToList();
                                if (tempUnldList != null && tempUnldList.Count > 0)
                                {

                                    totalImpurities += tempUnldList[0].Recovery;
                                    totalImpurities = Math.Round(totalImpurities, 3);

                                }

                            }
                        }
                    }
                }
            }

            return totalImpurities;

            //if (filterList != null && filterList.Count > 0)
            //{
            //    for (int i = 0; i < filterList.Count; i++)
            //    {
            //        TblPurchaseScheduleSummaryTO scheduleSummaryTO = filterList[i];
            //        scheduleSummaryTO.ImpuritiesStr = impuritiesStr;
            //        if (scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
            //        {
            //            scheduleSummaryTO.TotalImpurities = scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Sum(a => a.RecImpurities);
            //        }
            //    }
            //}
        }

        public TblPurchaseScheduleSummaryTO GetVehTotalQtyDashboardInfo(string loginUserId = "")
        {
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;
            string totalUnldQtyStr = "Total Unld Qty";
            string order = "O";
            string enquiry = "E";
            string appendBy = "/";
            string totalUnldQtyForCAndNC = "Total";
            string conversionFactStr = "MT";
            string colon = ":";

            TblPurchaseScheduleSummaryTO scheduleSummaryTO = new TblPurchaseScheduleSummaryTO();
            TblPurSchSummaryFilterTO tblPurSchSummaryFilterTempTO = new TblPurSchSummaryFilterTO();
            tblPurSchSummaryFilterTempTO.ForScheduleActualOrUnloading = 3;
            tblPurSchSummaryFilterTempTO.FromDate = _iCommonDAO.ServerDateTime;
            tblPurSchSummaryFilterTempTO.ToDate = _iCommonDAO.ServerDateTime;
            tblPurSchSummaryFilterTempTO.IsInStatusIds = true;
            tblPurSchSummaryFilterTempTO.UserId = loginUserId;
            tblPurSchSummaryFilterTempTO.SkipDateTime = false;
            tblPurSchSummaryFilterTempTO.ProdClassId = 0;

            List<TblPurchaseScheduleSummaryTO> scheduleSummaryTOList = SelectAllVehicleDetailsList(tblPurSchSummaryFilterTempTO);
            //if (scheduleSummaryTOList != null && scheduleSummaryTOList.Count > 0)
            {
                List<TblPurchaseScheduleSummaryTO.DashBoardInfoTO> dashBoardInfoTOList = new List<TblPurchaseScheduleSummaryTO.DashBoardInfoTO>();
                List<DropDownTO> phasesList = new List<DropDownTO>();
                phasesList = _iTblPurchaseScheduleSummaryDAO.getListofPhasesUsedForUnloadingQty();
                //Add total Unloading Qty
                double totalUnldQty = 0;


                if (scheduleSummaryTOList != null && scheduleSummaryTOList.Count > 0)
                    totalUnldQty = scheduleSummaryTOList.Sum(a => a.OrgUnloadedQty);

                TblPurchaseScheduleSummaryTO.DashBoardInfoTO totalUnldQtyTO = new TblPurchaseScheduleSummaryTO.DashBoardInfoTO();

                totalUnldQtyTO.MaterialTypeStr = totalUnldQtyStr + " : " + String.Format("{0:0.000}", totalUnldQty);


                dashBoardInfoTOList.Add(totalUnldQtyTO);

                //Add total Unld Qty as per C and NC
                double totalUnldQtyForC = 0;
                double totalUnldQtyForNC = 0;

                if (scheduleSummaryTOList != null && scheduleSummaryTOList.Count > 0)
                {
                    totalUnldQtyForC = scheduleSummaryTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).Sum(a => a.OrgUnloadedQty);
                    totalUnldQtyForNC = scheduleSummaryTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).Sum(a => a.OrgUnloadedQty);
                }


                TblPurchaseScheduleSummaryTO.DashBoardInfoTO totalUnldQtyTOForCAndNC = new TblPurchaseScheduleSummaryTO.DashBoardInfoTO();

                string totalOrder = string.Empty;
                if (totalUnldQtyForC > 0)
                    totalOrder = "(" + order + " - " + String.Format("{0:0.000}", totalUnldQtyForC) + ")";

                string totalEnquiry = string.Empty;
                if (totalUnldQtyForNC > 0)
                    totalEnquiry = "(" + enquiry + " - " + String.Format("{0:0.000}", totalUnldQtyForNC) + ")";

                totalUnldQtyTOForCAndNC.MaterialTypeStr = "Total : " + totalOrder + totalEnquiry;

                dashBoardInfoTOList.Add(totalUnldQtyTOForCAndNC);

                List<TblProdClassificationTO> tblProdClassificationTOSpecificationlist = GetProductClasificationList();
                if (tblProdClassificationTOSpecificationlist != null && tblProdClassificationTOSpecificationlist.Count > 0)
                {
                    for (int i = 0; i < tblProdClassificationTOSpecificationlist.Count; i++)
                    {
                        double totalMaterialQtyForC = 0;
                        double totalMaterialQtyForNC = 0;

                        if (scheduleSummaryTOList != null && scheduleSummaryTOList.Count > 0)
                        {
                            totalMaterialQtyForC = scheduleSummaryTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM && a.ProdClassId == tblProdClassificationTOSpecificationlist[i].IdProdClass).Sum(a => a.OrgUnloadedQty);
                            totalMaterialQtyForNC = scheduleSummaryTOList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM && a.ProdClassId == tblProdClassificationTOSpecificationlist[i].IdProdClass).Sum(a => a.OrgUnloadedQty);
                        }


                        TblPurchaseScheduleSummaryTO.DashBoardInfoTO totalQtyOfMaterialTypeTO = new TblPurchaseScheduleSummaryTO.DashBoardInfoTO();
                        // totalQtyOfMaterialTypeTO.MaterialTypeQty = totalMaterialQtyForC + " " + conversionFactStr + " " + appendBy + " " + totalMaterialQtyForNC + " " + conversionFactStr;
                        // totalQtyOfMaterialTypeTO.MaterialTypeStr = tblProdClassificationTOSpecificationlist[i].ProdClassDesc  + " " + order + " " + appendBy + " " + enquiry + " " + conversionFactStr;

                        string orderQty = string.Empty;
                        if (totalMaterialQtyForC > 0)
                            orderQty = "(" + order + " - " + String.Format("{0:0.000}", totalMaterialQtyForC) + ")";


                        string enqQty = string.Empty;
                        if (totalMaterialQtyForNC > 0)
                            enqQty = "(" + enquiry + " - " + String.Format("{0:0.000}", totalMaterialQtyForNC) + ")";

                        totalQtyOfMaterialTypeTO.MaterialTypeStr = tblProdClassificationTOSpecificationlist[i].ProdClassDesc + " : " + orderQty + enqQty;


                        dashBoardInfoTOList.Add(totalQtyOfMaterialTypeTO);

                    }
                }

                scheduleSummaryTO.DashBoardInfoTOList = dashBoardInfoTOList;

            }
            return scheduleSummaryTO;

        }

        public List<TblProdClassificationTO> GetProductClasificationList()
        {
            List<TblProdClassificationTO> tblProdClassificationTOSpecificationlist = new List<TblProdClassificationTO>();

            List<TblProdClassificationTO> tblProdClassificationTOCatlist = _iTblProdClassificationBL.SelectAllProdClassificationListyByItemProdCatgE(Constants.ItemProdCategoryE.SCRAP_OR_WASTE);
            if (tblProdClassificationTOCatlist != null && tblProdClassificationTOCatlist.Count > 0)
            {
                string catStr = (string.Join(",", tblProdClassificationTOCatlist.Select(x => x.IdProdClass.ToString()).ToArray()));

                List<TblProdClassificationTO> tblProdClassificationTOSubCatlist = _iTblProdClassificationBL.SelectAllTblProdClassification(catStr, "SC");
                if (tblProdClassificationTOSubCatlist != null && tblProdClassificationTOSubCatlist.Count > 0)
                {
                    string subCatStr = (string.Join(",", tblProdClassificationTOSubCatlist.Select(x => x.IdProdClass.ToString()).ToArray()));

                    tblProdClassificationTOSpecificationlist = _iTblProdClassificationBL.SelectAllTblProdClassification(subCatStr, "S");
                }

            }
            return tblProdClassificationTOSpecificationlist;
        }

        public ResultMessage PostVehicleFreightDtls(TblPurchaseVehFreightDtlsTO tblPurchaseVehFreightDtlsTO, Int32 loginUserId)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                resultMessage = PostVehicleFreightDtls(tblPurchaseVehFreightDtlsTO, loginUserId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                //Update IsFreightAdded In TblPurchaseScheduleSummary
                if (resultMessage.MessageType == ResultMessageE.Information)
                {
                    tblPurchaseVehFreightDtlsTO.IsFreightAdded = 1;
                    resultMessage = UpdateIsFreightDetailsAdded(tblPurchaseVehFreightDtlsTO, conn, tran);
                }


                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Freight details added successfully.";
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in PostVehicleFreightDtls(TblPurchaseVehFreightDtlsTO tblPurchaseVehFreightDtlsTO,Int32 loginUserId)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage UpdateIsFreightDetailsAdded(TblPurchaseVehFreightDtlsTO tblPurchaseVehFreightDtlsTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = _iTblPurchaseScheduleSummaryDAO.UpdateIsFreightDetailsAdded(tblPurchaseVehFreightDtlsTO, conn, tran);

            if (result != -1)
            {
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            else
            {
                resultMessage.DefaultExceptionBehaviour(new Exception(), "UpdateIsFreightDetailsAdded");
                return resultMessage;
            }
        }

        public ResultMessage PostVehicleFreightDtls(TblPurchaseVehFreightDtlsTO tblPurchaseVehFreightDtlsTO, Int32 loginUserId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime serverDateTime = _iCommonDAO.ServerDateTime;
            Int32 result = 0;
            try
            {

                tblPurchaseVehFreightDtlsTO.CreatedBy = loginUserId;
                tblPurchaseVehFreightDtlsTO.CreatedOn = serverDateTime;

                List<TblPurchaseVehFreightDtlsTO> tblPurchaseVehFreightDtlsTOList = _iTblPurchaseVehFreightDtlsBL.SelectFreightDtlsByPurchaseScheduleId(tblPurchaseVehFreightDtlsTO.PurchaseScheduleSummaryId, conn, tran);
                if (tblPurchaseVehFreightDtlsTOList == null || tblPurchaseVehFreightDtlsTOList.Count == 0)
                {
                    //Insert
                    result = _iTblPurchaseVehFreightDtlsBL.InsertTblPurchaseVehFreightDtls(tblPurchaseVehFreightDtlsTO, conn, tran);
                    if (result != 1)
                    {
                        throw new Exception("Erorr in InsertTblPurchaseVehFreightDtls(tblPurchaseVehFreightDtlsTO, conn, tran);");
                    }
                }
                else
                {
                    //update
                    tblPurchaseVehFreightDtlsTO.IdPurchaseVehFreightDtls = tblPurchaseVehFreightDtlsTOList[0].IdPurchaseVehFreightDtls;
                    result = _iTblPurchaseVehFreightDtlsBL.UpdateTblPurchaseVehFreightDtls(tblPurchaseVehFreightDtlsTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in UpdateTblPurchaseVehFreightDtls(tblPurchaseVehFreightDtlsTO, conn, tran);");
                    }
                }
                if (tblPurchaseVehFreightDtlsTO.IsdeleteGradingDts == 1)
                {
                    result = _iTblPurchaseGradingDtlsBL.DeleteAllGradingDtls(tblPurchaseVehFreightDtlsTO.PurchaseScheduleSummaryId, conn, tran);
                    if (result < 0)
                    {
                        throw new Exception("Error in _iTblGradeExpressionDtlsBL.DeleteAllGradingDtls(tblPurchaseVehFreightDtlsTO.PurchaseScheduleSummaryId, conn, tran);");
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in PostVehicleFreightDtls(TblPurchaseVehFreightDtlsTO tblPurchaseVehFreightDtlsTO, Int32 loginUserId, SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage UpdateSupervisorId(int loginUserId, TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            ResultMessage resmsg = new ResultMessage();
            DateTime serverDate = _iCommonDAO.ServerDateTime;


            int res = _iTblPurchaseWeighingStageSummaryDAO.UpdateSupervisorId(tblPurchaseScheduleSummaryTO);
            if (res == -1)
            {
                resmsg.DefaultBehaviour();
                resmsg.DisplayMessage = "Failed to update supervisor";
                return resmsg;
            }

            resmsg = SendNoiticationToSupervisor(loginUserId, serverDate, tblPurchaseScheduleSummaryTO);

            resmsg.DefaultSuccessBehaviour();
            resmsg.DisplayMessage = "Supervisor updated successfully.";
            return resmsg;
        }

        public ResultMessage InsertPurchaseVehStatusHistory(TblPurchaseScheduleSummaryTO scheduleSummaryTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                resultMessage = InsertPurchaseVehStatusHistoryDtls(scheduleSummaryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in InsertPurchaseVehStatusHistory(TblPurchaseScheduleSummaryTO scheduleSummaryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage InsertPurchaseVehStatusHistoryDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {
                TblPurchaseVehicleStatusHistoryTO tblPurchaseVehicleStatusHistoryTO = new TblPurchaseVehicleStatusHistoryTO();
                tblPurchaseVehicleStatusHistoryTO.PurchaseScheduleSummaryId = scheduleSummaryTO.ActualRootScheduleId;
                tblPurchaseVehicleStatusHistoryTO.StatusId = scheduleSummaryTO.StatusId;
                tblPurchaseVehicleStatusHistoryTO.CreatedBy = scheduleSummaryTO.CreatedBy;
                tblPurchaseVehicleStatusHistoryTO.CreatedOn = scheduleSummaryTO.CreatedOn;
                tblPurchaseVehicleStatusHistoryTO.UpdatedBy = scheduleSummaryTO.UpdatedBy;
                tblPurchaseVehicleStatusHistoryTO.UpdatedOn = scheduleSummaryTO.UpdatedOn;
                tblPurchaseVehicleStatusHistoryTO.VehiclePhaseId = scheduleSummaryTO.VehiclePhaseId;

                result = _iTblPurchaseVehicleStatusHistoryBL.InsertTblPurchaseVehicleStatusHistory(tblPurchaseVehicleStatusHistoryTO, conn, tran);
                if (result != 1)
                {
                    throw new Exception("Error in _iTblPurchaseVehicleStatusHistoryBL.InsertTblPurchaseVehicleStatusHistory(tblPurchaseVehicleStatusHistoryTO, conn, tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in InsertPurchaseVehStatusHistoryDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }
        public ResultMessage SendNoiticationToSupervisor(Int32 loginUserId, DateTime serverDate, TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                TblAlertInstanceTO tblAlertInstanceTO = new TblAlertInstanceTO();
                TblAlertUsersTO tblAlertUsersTO = new TblAlertUsersTO();
                tblAlertUsersTO.UserId = tblPurchaseScheduleSummaryTO.SupervisorId;
                tblAlertUsersTO.RaisedOn = serverDate;
                tblAlertUsersTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                tblAlertInstanceTO.AlertUsersTOList = new List<TblAlertUsersTO>();
                tblAlertInstanceTO.AlertUsersTOList.Add(tblAlertUsersTO);
                string UserName = _iTblPurchaseScheduleSummaryDAO.GetDisplayNameFromUserID(loginUserId);
                tblAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                tblAlertInstanceTO.AlertAction = "PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR";
                tblAlertInstanceTO.AlertComment = "Vehicle No: " + tblPurchaseScheduleSummaryTO.VehicleNo + " is assigned to you for unloading by " + UserName;
                tblAlertInstanceTO.EffectiveFromDate = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.EffectiveToDate = tblAlertInstanceTO.EffectiveFromDate.AddHours(10);
                tblAlertInstanceTO.IsActive = 1;
                tblAlertInstanceTO.SourceDisplayId = "PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR";
                tblAlertInstanceTO.SourceEntityId = tblPurchaseScheduleSummaryTO.ActualRootScheduleId;
                tblAlertInstanceTO.RaisedBy = tblPurchaseScheduleSummaryTO.CreatedBy;
                tblAlertInstanceTO.RaisedOn = tblPurchaseScheduleSummaryTO.CreatedOn;
                tblAlertInstanceTO.IsAutoReset = 1;

                //alertsToReset = new AlertsToReset();
                //alertsToReset.ResetAlertInstanceTOList = new List<ResetAlertInstanceTO>();
                //resetAlertInstanceTO = new ResetAlertInstanceTO();
                //resetAlertInstanceTO.AlertDefinitionId = (int)NotificationConstants.NotificationsE.PURCHASE_VEHICLE_ASSIGN_TO_SUPERVISOR;
                //resetAlertInstanceTO.SourceEntityTxnId = tblAlertInstanceTO.SourceEntityId;
                //alertsToReset.ResetAlertInstanceTOList.Add(resetAlertInstanceTO);
                //tblAlertInstanceTO.AlertsToReset = alertsToReset;

                //Sanjay [21 sept 2018] Below code is commented and common notification API is called
                // notify = new Notification();
                notify.SendNotificationToUsers(tblAlertInstanceTO);

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SendNoiticationToSupervisor(Int32 loginUserId,DateTime serverDate,TblPurchaseScheduleSummaryTO tblPurchaseScheduleSummaryTO)");
                return resultMessage;
            }
        }


        #endregion


        public ResultMessage UpdateSupplier(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 supplierId)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                //resultMessage = UpdateSupplierOfSauda(scheduleSummaryTO, supplierId, conn, tran);
                resultMessage = UpdateSupplierOfvehicle(scheduleSummaryTO, supplierId, conn, tran);

                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    //resultMessage.DefaultBehaviour();
                    //resultMessage.DisplayMessage = "Failed to update supplier.";
                    return resultMessage;
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateSupplier(TblPurchaseEnquiryTO enquiryTO , Int32 supplierId)");
                return resultMessage;

            }

        }

        public ResultMessage UpdateSupplierOfvehicle(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 supplierId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;

            try
            {

                resultMessage = _iTblOrganizationBL.CheckIsSupplierIsBlocked(supplierId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(scheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == NULL");
                }

                if (enquiryTO.SupplierId == supplierId)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = "No change in supplier";
                    return resultMessage;
                }

                Int32 stateId = _iTblPurchaseManagerSupplierBL.GetSupplierStateId(supplierId);
                if (stateId <= 0)
                {
                    throw new Exception("StateId == 0");
                }


                string statusIds = (Int32)Constants.TranStatusE.BOOKING_APPROVED + "," + (Int32)Constants.TranStatusE.BOOKING_ACCEPTED_BY_DIRECTOR;
                List<TblPurchaseEnquiryTO> enquiryTOList = _iTblPurchaseEnquiryBL.GetSupplierWiseSaudaDetails(supplierId, statusIds, conn, tran);
                if (enquiryTOList == null || enquiryTOList.Count == 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "No sauda available to link vehicle";
                    return resultMessage;
                }

                enquiryTOList = enquiryTOList.Where(a => a.ProdClassId == enquiryTO.ProdClassId).ToList();
                if (enquiryTOList == null || enquiryTOList.Count == 0)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "No sauda available to link vehicle";
                    return resultMessage;
                }

                enquiryTOList = enquiryTOList.OrderBy(a => a.SaudaCreatedOn).ToList();

                TblPurchaseEnquiryTO newEnquiryTO = enquiryTOList[0];

                scheduleSummaryTO.SupplierId = newEnquiryTO.SupplierId;
                scheduleSummaryTO.PurchaseEnquiryId = newEnquiryTO.IdPurchaseEnquiry;

                Boolean isUpdateSaudaDtlsAsPerCorNC = false;
                Boolean isUpdateAllSchOfEnq = false;
                Boolean isUpdateOnlyGradingDtls = true;

                resultMessage = UpdateWholeScheduleAsCorNC(scheduleSummaryTO, newEnquiryTO, isUpdateSaudaDtlsAsPerCorNC, isUpdateAllSchOfEnq, isUpdateOnlyGradingDtls, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                enquiryTO.PendingBookingQty = enquiryTO.PendingBookingQty + scheduleSummaryTO.Qty;

                result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(enquiryTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(enquiryTO, conn, tran);");
                }

                newEnquiryTO.PendingBookingQty = newEnquiryTO.PendingBookingQty - scheduleSummaryTO.Qty;
                result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(newEnquiryTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(enquiryTO, conn, tran);");
                }

                TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (spotVehicleTO != null)
                {
                    spotVehicleTO.SupplierId = newEnquiryTO.SupplierId;
                    result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);");
                    }
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateSupplierOfvehicle(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 supplierId, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }
        public ResultMessage UpdateSupplierOfSauda(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 supplierId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {
                resultMessage = _iTblOrganizationBL.CheckIsSupplierIsBlocked(supplierId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                TblPurchaseEnquiryTO enquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(scheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == NULL");
                }

                if (enquiryTO.SupplierId == supplierId)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = "No change in supplier";
                    return resultMessage;
                }

                Int32 stateId = _iTblPurchaseManagerSupplierBL.GetSupplierStateId(supplierId);
                if (stateId <= 0)
                {
                    throw new Exception("StateId == 0");
                }

                enquiryTO.StateId = stateId;
                enquiryTO.SupplierId = supplierId;
                enquiryTO.IsEnqTransfered = 0;

                result = _iTblPurchaseEnquiryBL.UpdateTblBookingsForPurchase(enquiryTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in _iTblPurchaseEnquiryBL.UpdateTblBookingsForPurchase(enquiryTO, conn, tran);");
                }

                TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (spotVehicleTO != null)
                {
                    spotVehicleTO.SupplierId = enquiryTO.SupplierId;
                    result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);");
                    }
                }

                Boolean isUpdateSaudaDtlsAsPerCorNC = true;
                Boolean isUpdateAllSchOfEnq = true;
                Boolean isUpdateOnlyGradingDtls = false;

                resultMessage = UpdateWholeScheduleAsCorNC(scheduleSummaryTO, enquiryTO, isUpdateSaudaDtlsAsPerCorNC, isUpdateAllSchOfEnq, isUpdateOnlyGradingDtls, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateSupplierOfSauda(TblPurchaseEnquiryTO enquiryTO, Int32 supplierId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage UpdateWholeScheduleAsCorNC(TblPurchaseScheduleSummaryTO schduleSummaryTO, TblPurchaseEnquiryTO enquiryTO, Boolean isUpdateSaudaDtlsAsPerCorNC, Boolean isUpdateAllSchOfEnq, Boolean isUpdateOnlyGradingDtls, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {

                if (schduleSummaryTO == null)
                {
                    throw new Exception("schduleSummaryTO == NULL");
                }

                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == NULL");
                }

                List<TblPurchaseEnquiryDetailsTO> enquiryItemDtlsList = _iTblPurchaseEnquiryDetailsBL.SelectTblEnquiryDetailsList(enquiryTO.IdPurchaseEnquiry, conn, tran);
                enquiryTO.PurchaseEnquiryDetailsTOList = enquiryItemDtlsList;

                if (isUpdateSaudaDtlsAsPerCorNC)
                {
                    if (enquiryItemDtlsList != null && enquiryItemDtlsList.Count > 0)
                    {

                        CalculateRateAsPerCorNCForEnquiry(enquiryTO);
                        CalculateItemDtls(enquiryTO.PurchaseEnquiryDetailsTOList, null);

                        for (int i = 0; i < enquiryTO.PurchaseEnquiryDetailsTOList.Count; i++)
                        {
                            TblPurchaseEnquiryDetailsTO enquiryItemDtlsTO = enquiryTO.PurchaseEnquiryDetailsTOList[i];
                            result = _iTblPurchaseEnquiryDetailsBL.UpdateTblPurchaseEnquiryDetails(enquiryItemDtlsTO, conn, tran);
                            if (result < 0)
                            {
                                throw new Exception("Error in _iTblPurchaseEnquiryDetailsBL.UpdateTblPurchaseEnquiryDetails(enquiryItemDtlsTO, conn, tran);");
                            }
                        }

                    }
                }

                List<TblPurchaseScheduleSummaryTO> scheduleSummaryTOList = new List<TblPurchaseScheduleSummaryTO>();

                if (isUpdateAllSchOfEnq)
                {
                    scheduleSummaryTOList = SelectAllEnquiryScheduleSummary(enquiryTO.IdPurchaseEnquiry, conn, tran);
                }

                scheduleSummaryTOList.Add(schduleSummaryTO);

                if (scheduleSummaryTOList != null && scheduleSummaryTOList.Count > 0)
                {
                    if (scheduleSummaryTOList != null && scheduleSummaryTOList.Count > 0)
                    {
                        for (int k = 0; k < scheduleSummaryTOList.Count; k++)
                        {
                            TblPurchaseScheduleSummaryTO scheduleSummaryTO = scheduleSummaryTOList[k];

                            List<TblPurchaseScheduleSummaryTO> allScheduleListAgainstRoot = SelectAllEnquiryScheduleSummaryTOByRootId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                            if (allScheduleListAgainstRoot != null && allScheduleListAgainstRoot.Count > 0)
                            {
                                List<TblPurchaseScheduleSummaryTO> updateShceduleList = new List<TblPurchaseScheduleSummaryTO>();
                                updateShceduleList.AddRange(allScheduleListAgainstRoot.Where(a => a.StatusId == (Int32)Constants.TranStatusE.New));
                                updateShceduleList.AddRange(allScheduleListAgainstRoot.Where(a => a.VehiclePhaseId > 0));
                                //updateShceduleList = allScheduleListAgainstRoot;
                                //Prajakta[2021-07-26] Commnted
                                //if (isUpdateOnlyGradingDtls)
                                //{
                                //    updateShceduleList = updateShceduleList.Where(a => a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING).ToList();
                                //}
                                if (updateShceduleList != null && updateShceduleList.Count > 0)
                                {
                                    Boolean isGetGradeExpDtls = false;
                                    _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(updateShceduleList, isGetGradeExpDtls);

                                    updateShceduleList[0].SupplierId = enquiryTO.SupplierId;
                                    updateShceduleList[0].PurchaseEnquiryId = enquiryTO.IdPurchaseEnquiry;
                                    result = _iTblPurchaseScheduleSummaryDAO.UpdateScheduleSupplier(updateShceduleList[0], conn, tran);
                                    if (result == -1)
                                    {
                                        throw new Exception("Error in _iTblPurchaseScheduleSummaryDAO.UpdateScheduleSupplier(updateShceduleList[0], conn, tran);");
                                    }

                                    for (int p = 0; p < updateShceduleList.Count; p++)
                                    {
                                        TblPurchaseScheduleSummaryTO scheduleToOfAgainstRoot = updateShceduleList[p];

                                        if (scheduleToOfAgainstRoot.PurchaseScheduleSummaryDetailsTOList != null && scheduleToOfAgainstRoot.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                                        {
                                            if (isUpdateOnlyGradingDtls)
                                            {
                                                for (int m = 0; m < scheduleToOfAgainstRoot.PurchaseScheduleSummaryDetailsTOList.Count; m++)
                                                {
                                                    TblPurchaseVehicleDetailsTO vehItemDtlTO = scheduleToOfAgainstRoot.PurchaseScheduleSummaryDetailsTOList[m];
                                                    CalculateRateForVeh(scheduleToOfAgainstRoot.COrNcId, enquiryTO, vehItemDtlTO, conn, tran);
                                                }
                                            }
                                            else
                                            {
                                                CalculateRateAsPerCorNC(scheduleToOfAgainstRoot, enquiryTO);
                                                CalculateItemDtls(null, scheduleToOfAgainstRoot.PurchaseScheduleSummaryDetailsTOList);

                                            }


                                            for (int j = 0; j < scheduleToOfAgainstRoot.PurchaseScheduleSummaryDetailsTOList.Count; j++)
                                            {
                                                result = _iTblPurchaseVehicleDetailsBL.UpdateTblPurchaseScheduleDetails(scheduleToOfAgainstRoot.PurchaseScheduleSummaryDetailsTOList[j], conn, tran);
                                                if (result < 0)
                                                {
                                                    throw new Exception("Error in _iTblPurchaseVehicleDetailsBL.UpdateTblPurchaseScheduleDetails(scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[j], conn, tran); ");
                                                }
                                            }

                                        }

                                    }
                                }

                            }

                        }
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateWholeScheduleAsCorNC(TblPurchaseScheduleSummaryTO schduleSummaryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage UpdateScheduleForSaudaConversion(TblPurchaseScheduleSummaryTO scheduleSummaryTO, List<TblPurchaseEnquiryTO> enquiryTOList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            List<TblPurchaseVehicleDetailsTO> purchaseSheduleItemDtlsList = new List<TblPurchaseVehicleDetailsTO>();
            Int32 result = 0;

            try
            {
                if (scheduleSummaryTO == null)
                {
                    throw new Exception("scheduleSummaryTO == null");
                }

                if (enquiryTOList == null)
                {
                    throw new Exception("enquiryTOList == null");
                }

                if (scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList == null
                    || scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count == 0)
                {
                    throw new Exception("scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList == null");
                }


                for (int i = 0; i < scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count; i++)
                {
                    TblPurchaseVehicleDetailsTO existingItemTO = scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList[i];

                    double itemQty = existingItemTO.Qty;

                    if (itemQty > 0)
                    {
                        for (int k = 0; k < enquiryTOList.Count; k++)
                        {
                            TblPurchaseEnquiryTO enqTO = enquiryTOList[k];

                            if (itemQty <= 0)
                            {
                                break;
                            }

                            if (enqTO.LinkVehQty <= 0)
                            {
                                continue;
                            }

                            if (itemQty <= enqTO.LinkVehQty)
                            {
                                TblPurchaseVehicleDetailsTO newItemTO = new TblPurchaseVehicleDetailsTO();
                                newItemTO = existingItemTO.DeepCopy();
                                enqTO.LinkVehQty = enqTO.LinkVehQty - itemQty;
                                newItemTO.Qty = itemQty;
                                newItemTO.Qty = Math.Round(newItemTO.Qty, 3);
                                itemQty = 0;
                                newItemTO.PurEnqId = enqTO.IdPurchaseEnquiry;
                                newItemTO.PurEnqDisplayNo = enqTO.EnqDisplayNo;
                                //Apply rate
                                CalculateRateForVeh(scheduleSummaryTO.COrNcId, enqTO, newItemTO, conn, tran);
                                purchaseSheduleItemDtlsList.Add(newItemTO);
                            }
                            else if (itemQty > enqTO.LinkVehQty)
                            {
                                TblPurchaseVehicleDetailsTO newItemTO = new TblPurchaseVehicleDetailsTO();
                                newItemTO = existingItemTO.DeepCopy();
                                itemQty = itemQty - enqTO.LinkVehQty;
                                newItemTO.Qty = enqTO.LinkVehQty;
                                newItemTO.Qty = Math.Round(newItemTO.Qty, 3);
                                enqTO.LinkVehQty = 0;
                                newItemTO.PurEnqId = enqTO.IdPurchaseEnquiry;
                                newItemTO.PurEnqDisplayNo = enqTO.EnqDisplayNo;
                                //Appy Rate;
                                CalculateRateForVeh(scheduleSummaryTO.COrNcId, enqTO, newItemTO, conn, tran);
                                purchaseSheduleItemDtlsList.Add(newItemTO);
                            }

                        }
                    }
                }

                if (purchaseSheduleItemDtlsList != null && purchaseSheduleItemDtlsList.Count > 0)
                {
                    //List<TblPurchaseScheduleSummaryTO> gradingCompletedTOList = SelectVehicleScheduleByRootAndStatusId(scheduleSummaryTO.RootScheduleId, Convert.ToInt32(Constants.TranStatusE.UNLOADING_COMPLETED),
                    //    Convert.ToInt32(Constants.PurchaseVehiclePhasesE.GRADING)).ToList();

                    List<TblPurchaseScheduleSummaryTO> gradingCompletedTOList = SelectVehicleScheduleByRootAndStatusId(scheduleSummaryTO.RootScheduleId, 0, 0).ToList();
                    if (gradingCompletedTOList != null && gradingCompletedTOList.Count > 0)
                    {
                        TblPurchaseScheduleSummaryTO gradingTO = gradingCompletedTOList.Where(a => a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.GRADING
                        && a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED && a.IsGradingCompleted == 1).FirstOrDefault();

                        if (gradingTO != null)
                        {
                            scheduleSummaryTO = gradingTO.DeepCopy();
                        }

                    }

                    scheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList = purchaseSheduleItemDtlsList;
                    result = DeleteAndInsertOldRecords(scheduleSummaryTO, false, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in DeleteAndInsertOldRecords(scheduleSummaryTO,false, conn, tran);");
                    }

                    //for (int j = 0; j < purchaseSheduleItemDtlsList.Count; j++)
                    //{
                    //    result = _iTblPurchaseVehicleDetailsBL.UpdateTblPurchaseScheduleDetails(purchaseSheduleItemDtlsList[j], conn, tran);
                    //    if (result < 0)
                    //    {
                    //        throw new Exception("Error in _iTblPurchaseVehicleDetailsBL.UpdateTblPurchaseScheduleDetails(purchaseSheduleItemDtlsList[j], conn, tran); ");
                    //    }
                    //}



                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateScheduleForSaudaConversion(TblPurchaseScheduleSummaryTO schduleSummaryTO, List<TblPurchaseEnquiryTO> enquiryTOList, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;

            }
        }

        public void CalculateRateForVeh(Int32 cOrNCId, TblPurchaseEnquiryTO enquiryTO, TblPurchaseVehicleDetailsTO vehItemDtlTO, SqlConnection conn, SqlTransaction tran)
        {
            List<TblPurchaseParityDetailsTO> tblProductItemTOList = _iTblPurchaseParityDetailsBL.GetBookingItemsParityDtls(vehItemDtlTO.ProdItemId.ToString(), enquiryTO.SaudaCreatedOn, enquiryTO.StateId);
            //if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
            double parity = 0;
            double nonConfirmparity = 0;
            double rate = 0;

            if (tblProductItemTOList != null && tblProductItemTOList.Count > 0)
            {
                parity = tblProductItemTOList[0].ParityAmt;
                nonConfirmparity = tblProductItemTOList[0].NonConfParityAmt;
            }

            rate = enquiryTO.BookingRate;

            if (enquiryTO.PurchaseEnquiryDetailsTOList != null && enquiryTO.PurchaseEnquiryDetailsTOList.Count > 0)
            {
                var res = enquiryTO.PurchaseEnquiryDetailsTOList.Where(a => a.ProdItemId == vehItemDtlTO.ProdItemId).FirstOrDefault();
                if (res != null)
                {
                    rate = res.ItemBookingRate;
                }
            }

            if (cOrNCId == (Int32)Constants.ConfirmTypeE.CONFIRM)
            {
                vehItemDtlTO.Rate = rate + parity;
                vehItemDtlTO.ItemBookingRate = rate;
            }
            if (cOrNCId == (Int32)Constants.ConfirmTypeE.NONCONFIRM)
            {
                vehItemDtlTO.Rate = rate + parity + nonConfirmparity;
                vehItemDtlTO.ItemBookingRate = rate;
            }

            vehItemDtlTO.ProductAomunt = vehItemDtlTO.Rate * vehItemDtlTO.Qty;

            vehItemDtlTO.ProductAomunt = Math.Round(vehItemDtlTO.ProductAomunt, 3);
            vehItemDtlTO.Qty = Math.Round(vehItemDtlTO.Qty, 3);

            if (vehItemDtlTO.IsNonCommercialItem == 1)
            {
                vehItemDtlTO.Rate = 0;
                vehItemDtlTO.ProductAomunt = 0;
            }

        }

        public ResultMessage SubmitProcessCharge(TblPurchaseScheduleSummaryTO scheduleTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;

            try
            {

                conn.Open();
                tran = conn.BeginTransaction();

                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO = NULL");
                }

                Int32 result = _iTblPurchaseScheduleSummaryDAO.UpdateVehProcessCharge(scheduleTO, conn, tran);
                if (result <= -1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.DisplayMessage = "Failed update process charge value";
                    return resultMessage;
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SubmitProcessCharge(TblPurchaseScheduleSummaryTO scheduleTO)");
                return resultMessage;

            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage MarkVehicleOut(TblPurchaseScheduleSummaryTO scheduleTO, Int32 loginUserId)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                if (scheduleTO == null)
                {
                    throw new Exception("scheduleTO = NULL");
                }

                //Get Unloading complted to
                // Int32 statusId=(Int32)Constants.TranStatusE.UNLOADING_COMPLETED;
                // Int32 vehiclePhaseId=(Int32)Constants.PurchaseVehiclePhasesE.UNLOADING_COMPLETED;

                // List<TblPurchaseScheduleSummaryTO> unloadingCompletedTOList=SelectVehicleScheduleByRootAndStatusId(scheduleTO.ActualRootScheduleId,statusId,vehiclePhaseId,conn,tran);
                // if(unloadingCompletedTOList==null || unloadingCompletedTOList.Count==0)
                // {
                //     throw new Exception("unloadingCompletedTO not found");
                // }

                //Get Tare weight list


                Int32 weightTypeId = (Int32)Constants.TransMeasureTypeE.TARE_WEIGHT;

                List<TblPurchaseWeighingStageSummaryTO> tareWeightList = _iTblPurchaseWeighingStageSummaryBL.GetVehicleWeightDetails(scheduleTO.ActualRootScheduleId, weightTypeId.ToString());
                TblConfigParamsTO DirectVehicleOutFlag = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.IS_ALLOW_DIRECT_VEHICLE_OUT_BEFORE_WEIGHING);
                if (DirectVehicleOutFlag != null && DirectVehicleOutFlag.ConfigParamVal == "1")
                {
                    return PostVehicleOutDtls(scheduleTO, loginUserId);
                }
                else
                {
                    if (tareWeightList == null || tareWeightList.Count == 0)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "Weighing process is not complete against Vehicle No. - " + scheduleTO.VehicleNo;
                        return resultMessage;
                    }
                }

                TblConfigParamsTO weighingScaleConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.CP_SCRAP_DEFAULT_WEIGHING_SCALE);
                if (weighingScaleConfigTO == null)
                {
                    throw new Exception("weighingScaleConfigTO == NULL");
                }

                Int32 defaultWeighingScale = Convert.ToInt32(weighingScaleConfigTO.ConfigParamVal);

                //Get unique weighing machine ids
                var uniqueWeighingMachineIds = tareWeightList.Select(x => x.WeighingMachineId).Distinct().ToList();
                Int32 uniqueWeighingMachineIdsCnt = uniqueWeighingMachineIds.Count;

                if (defaultWeighingScale == 1)
                {
                    Boolean isTareWeightTaken = false;

                    TblConfigParamsTO isTareWeightConfigTO = _iTblConfigParamsBL.SelectTblConfigParamsTO(StaticStuff.Constants.CP_SCRAP_TAKE_TARE_WEIGHT);
                    if (isTareWeightConfigTO != null)
                    {
                        if (isTareWeightConfigTO.ConfigParamVal == "1")
                        {
                            isTareWeightTaken = true;
                        }
                    }

                    if (isTareWeightTaken)
                    {
                        if (uniqueWeighingMachineIdsCnt > defaultWeighingScale)
                        {
                            //Mark vegicle out InsertMaterailItemDetails
                            return PostVehicleOutDtls(scheduleTO, loginUserId);
                        }
                        else
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "Weighing process is not complete against Vehicle No. - " + scheduleTO.VehicleNo;
                            return resultMessage;
                        }
                    }
                    else
                    {
                        if (uniqueWeighingMachineIdsCnt == defaultWeighingScale)
                        {
                            //Mark vegicle out InsertMaterailItemDetails
                            return PostVehicleOutDtls(scheduleTO, loginUserId);
                        }
                        else
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "Weighing process is not complete against Vehicle No. - " + scheduleTO.VehicleNo;
                            return resultMessage;
                        }
                    }

                }
                else
                {
                    if (uniqueWeighingMachineIdsCnt >= defaultWeighingScale)
                    {
                        //update vehicle out InsertMaterailItemDetails
                        return PostVehicleOutDtls(scheduleTO, loginUserId);
                    }
                    else
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "Weighing process is not complete against Vehicle No. - " + scheduleTO.VehicleNo;
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in MarkVehicleOut(TblPurchaseScheduleSummaryTO scheduleTO)");
                return resultMessage;
            }
        }

        public ResultMessage PostVehicleOutDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO, Int32 loginUserId)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                List<TblPurchaseScheduleSummaryTO> scheduleList = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(scheduleSummaryTO.ActualRootScheduleId, true);
                if (scheduleList == null || scheduleList.Count <= 0)
                {
                    throw new Exception("scheduleList == null");
                }

                TblPurchaseScheduleSummaryTO vehicleOutScheduleTO = scheduleList[0];
                vehicleOutScheduleTO.ParentPurchaseScheduleSummaryId = scheduleList[0].IdPurchaseScheduleSummary;
                vehicleOutScheduleTO.RootScheduleId = scheduleList[0].ActualRootScheduleId;
                //if (scheduleList[0].StatusId == (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING)
                //{
                //    vehicleOutScheduleTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_GROSS_WEIGHT;
                //}
                //else
                if (scheduleList[0].StatusId == (Int32)Constants.TranStatusE.VEHICLE_REJECTED_BEFORE_WEIGHING
                    || scheduleList[0].StatusId == (Int32)Constants.TranStatusE.VEHICLE_REJECTED_AFTER_WEIGHING)
                {
                    vehicleOutScheduleTO.StatusId = (Int32)Constants.TranStatusE.REJECTED_VEHICLE_OUT;
                }
                else
                {
                    vehicleOutScheduleTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_OUT;
                }

                //vehicleOutScheduleTO.StatusId = (Int32)Constants.TranStatusE.VEHICLE_OUT;//Reshma commented for Reject Vehicle before weighing for Kalika.
                vehicleOutScheduleTO.IsActive = 1;

                Boolean isSendNotification = true;
                Boolean isItemChange = false;
                DateTime currentDate = _iCommonDAO.ServerDateTime;
                vehicleOutScheduleTO.CreatedOn = currentDate;
                vehicleOutScheduleTO.UpdatedOn = currentDate;
                vehicleOutScheduleTO.IsStatusUpdate = 1;
                vehicleOutScheduleTO.UpdatedBy = loginUserId;
                vehicleOutScheduleTO.CreatedBy = loginUserId;
                resultMessage = InsertMaterailItemDetails(vehicleOutScheduleTO, isItemChange, isSendNotification, currentDate);
                return resultMessage;
            }
            catch (System.Exception ex)
            {

                resultMessage.DefaultExceptionBehaviour(ex, "Error in PostVehicleOutDtls(TblPurchaseScheduleSummaryTO scheduleSummaryTO)");
                return resultMessage;
            }

        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllTblPurchaseScheduleSummaryTOListFromStatusIds(String statusId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllTblPurchaseScheduleSummaryTOListFromStatusIds(statusId); //
        }

        public List<TblPurchaseScheduleSummaryTO> SelectTblPurchaseScheduleSummaryTOByModBusRefId(Int32 modbusRefId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectTblPurchaseScheduleSummaryTOByModBusRefId(modbusRefId);
        }

        public ResultMessage LinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;

            try
            {
                lock (SaveLinkExistingSuada)
                {
                    conn.Open();
                    tran = conn.BeginTransaction();

                    resultMessage = UpdatePrevAndLinkVehicleToExistingSauda(tblPurchaseVehicleSpotEntryTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    tran.Commit();
                    return resultMessage;
                }
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in LinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage LinkVehicleToExistingSaudaList(TblPurchaseScheduleSummaryTO scheduleSummaryTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;

            try
            {
                lock (SaveLinkExistingSuada)
                {
                    conn.Open();
                    tran = conn.BeginTransaction();
                    Int32 PurchaseEnquiryId = scheduleSummaryTO.PurchaseEnquiryId;                   
                   
                    resultMessage = UpdatePrevAndLinkVehicleToExistingSauda(scheduleSummaryTO, conn, tran);

                    // Add By Samadhan 30 May 2023 Update purchaseScheduleSummaryId in tblPurchaseEnquiry when link to existing sauda
                    if(resultMessage.Text== "Record Saved Successfully")
                    {
                        int PurEnqId = SelectPurchaseVehLinkSauda(PurchaseEnquiryId, conn, tran);
                        if (PurEnqId < 1)
                        {
                            resultMessage = UpdatePurchaseEnquiryAgainstScheduleSummary(PurchaseEnquiryId, scheduleSummaryTO.ActualRootScheduleId, conn, tran);

                        }
                    }
                                      

                    //
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    tran.Commit();
                    return resultMessage;
                }
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in LinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        //public ResultMessage UpdatePrevAndLinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO,SqlConnection conn,SqlTransaction tran)
        //{
        //    ResultMessage resultMessage = new ResultMessage();
        //    Int32 result = 0;
        //    try
        //    {
        //        //Update Pending of prevoius enquiry
        //        TblPurchaseEnquiryTO previousEnquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(tblPurchaseVehicleSpotEntryTO.PreviousPurchaseEnqId, conn, tran);
        //        if (previousEnquiryTO == null)
        //        {
        //            throw new Exception("previousEnquiryTO == NULL");
        //        }

        //        double pendingQty = previousEnquiryTO.PendingBookingQty + tblPurchaseVehicleSpotEntryTO.VehicleQty;

        //        if(pendingQty > previousEnquiryTO.BookingQty)
        //        {
        //            pendingQty = previousEnquiryTO.BookingQty;
        //        }
        //        previousEnquiryTO.PendingBookingQty = pendingQty;

        //        //Update pending booking Qty for enquiry in tblPurchaseEnquiry
        //        result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(previousEnquiryTO, conn, tran);
        //        if (result == -1)
        //        {
        //            resultMessage.DefaultBehaviour();
        //            return resultMessage;
        //        }

        //        result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseVehicleSpotEntryTO, conn, tran);
        //        if (result == -1)
        //        {
        //            resultMessage.DefaultBehaviour();
        //            return resultMessage;
        //        }
        //        //Update pending booking Qty for enquiry in tblPurchaseEnquiry
        //        TblPurchaseEnquiryTO newEnquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(tblPurchaseVehicleSpotEntryTO.PurchaseEnquiryId, conn, tran);
        //        if (previousEnquiryTO == null)
        //        {
        //            throw new Exception("newEnquiryTO == NULL");
        //        }

        //        newEnquiryTO.PendingBookingQty = newEnquiryTO.PendingBookingQty - tblPurchaseVehicleSpotEntryTO.VehicleQty;

        //        result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(newEnquiryTO, conn, tran);
        //        if (result == -1)
        //        {
        //            resultMessage.DefaultBehaviour();
        //            return resultMessage;
        //        }

        //        result = _iTblPurchaseScheduleSummaryDAO.UpdateScheduleEnquiryIdOnly(tblPurchaseVehicleSpotEntryTO, conn, tran);
        //        if (result == -1)
        //        {
        //            resultMessage.DefaultBehaviour();
        //            return resultMessage;
        //        }

        //        Boolean isUpdateSaudaDtlsAsPerCorNC = false;
        //        Boolean isUpdateAllSchOfEnq = false;
        //        Boolean isActive = true;

        //        TblPurchaseScheduleSummaryTO scheduleSummaryTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseVehicleSpotEntryTO.PurchaseScheduleSummaryId, isActive, conn, tran);
        //        if (scheduleSummaryTO == null)
        //        {
        //            resultMessage.DefaultBehaviour();
        //            return resultMessage;
        //        }
        //        Boolean isFromTransferLinkSauda = true;
        //        resultMessage = UpdateWholeScheduleAsCorNC(isFromTransferLinkSauda,scheduleSummaryTO, newEnquiryTO, isUpdateSaudaDtlsAsPerCorNC, isUpdateAllSchOfEnq, conn, tran);
        //        if (resultMessage.MessageType != ResultMessageE.Information)
        //        {
        //            resultMessage.DefaultBehaviour();
        //            return resultMessage;
        //        }

        //        resultMessage.DefaultSuccessBehaviour();
        //        resultMessage.DisplayMessage = "Vehicle linked to Sauda No. - " + newEnquiryTO.EnqDisplayNo + " successfully";
        //        return resultMessage;
        //    }
        //    catch (Exception ex)
        //    {
        //        resultMessage.DefaultExceptionBehaviour(ex, " Error in UpdatePrevAndLinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO,SqlConnection conn,SqlTransaction tran)");
        //        return resultMessage;
        //    }
        //}


        public ResultMessage UpdatePendingNoOfVehiclesAgainstEnquiry(TblPurchaseEnquiryTO enquiryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;

            try
            {
                if (enquiryTO == null)
                {
                    throw new Exception("enquiryTO == NULL");
                }

                result = _iTblPurchaseScheduleSummaryDAO.SelectScheduledVehiclesAgainstEnquiry(enquiryTO.IdPurchaseEnquiry, conn, tran);
                if (result < 0)
                {
                    throw new Exception("SelectScheduledVehiclesAgainstEnquiry(tblPurchaseScheduleSummaryTO.PurchaseEnquiryId, conn, tran);");
                }

                int pendNoOfVeh = enquiryTO.NoOfVehicleSched - result;
                result = _iTblPurchaseEnquiryDAO.UpdatePendingNoOfVehicles(enquiryTO, pendNoOfVeh, conn, tran);
                if (result != 1)
                {
                    throw new Exception("UpdatePendingNoOfVehicles(enquiryTO, pendNoOfVeh, conn, tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdatePendingNoOfVehiclesAgainstEnquiry(TblPurchaseEnquiryTO enquiryTO, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }

        }

        public int CheckPendVehiclesIsAvailableAgainstThisSauda(int enquiryId, SqlConnection conn, SqlTransaction tran)
        {
            int totalScheduledVehicles = _iTblPurchaseScheduleSummaryDAO.SelectScheduledVehiclesAgainstEnquiry(enquiryId, conn, tran);
            TblPurchaseEnquiryTO purchaseEnquiryTO = _iTblPurchaseEnquiryDAO.SelectTblBookingsForPurchase(enquiryId, conn, tran);
            int pendingVehicles = purchaseEnquiryTO.NoOfVehicleSched - totalScheduledVehicles;
            if (pendingVehicles > 0)
                return 1;
            else
                return 0;
        }
        public ResultMessage UpdatePrevAndLinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {
                //Update Pending of prevoius enquiry
                TblPurchaseEnquiryTO previousEnquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(tblPurchaseVehicleSpotEntryTO.PreviousPurchaseEnqId, conn, tran);
                if (previousEnquiryTO == null)
                {
                    throw new Exception("previousEnquiryTO == NULL");
                }

                // Add By Samadhan 30 Sep 2022

                int materialTypeForCalPartyWeight = 0;
                double pendingQty = 0.0;
                List<int> materialTypeForCalPartyWeightList = new List<int>(); ;

                TblConfigParamsTO configParamTOForMaterialTypeForCalPartyWeight = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_MATERIAL_TYPE_FOR_COMPARISON_CALCU_BASED_ON_PARTY_WEIGHT, conn, tran);

                if (configParamTOForMaterialTypeForCalPartyWeight != null && configParamTOForMaterialTypeForCalPartyWeight.ConfigParamVal != null)
                {
                    String materialTypeForCalPartyWeightStr = configParamTOForMaterialTypeForCalPartyWeight.ConfigParamVal;
                    materialTypeForCalPartyWeightList = materialTypeForCalPartyWeightStr.Split(',').Select(s => int.Parse(s)).ToList();
                    if (materialTypeForCalPartyWeightList != null && materialTypeForCalPartyWeightList.Count > 0)
                    {
                        if (materialTypeForCalPartyWeightList.Contains(tblPurchaseVehicleSpotEntryTO.ProdClassId) == true)
                        {
                            materialTypeForCalPartyWeight = tblPurchaseVehicleSpotEntryTO.ProdClassId;
                        }

                    }
                }

                if (materialTypeForCalPartyWeight == tblPurchaseVehicleSpotEntryTO.ProdClassId)
                {
                    if (tblPurchaseVehicleSpotEntryTO.PartyQty > 0)
                    {
                        tblPurchaseVehicleSpotEntryTO.SpotVehicleQty = tblPurchaseVehicleSpotEntryTO.PartyQty;
                        pendingQty = previousEnquiryTO.PendingBookingQty + tblPurchaseVehicleSpotEntryTO.PartyQty;
                    }
                    else
                    {
                        pendingQty = previousEnquiryTO.PendingBookingQty + tblPurchaseVehicleSpotEntryTO.VehicleQty;
                    }
                }
                else
                {
                    pendingQty = previousEnquiryTO.PendingBookingQty + tblPurchaseVehicleSpotEntryTO.VehicleQty;
                }

                //
                // double pendingQty = previousEnquiryTO.PendingBookingQty + tblPurchaseVehicleSpotEntryTO.VehicleQty;

                if (pendingQty > previousEnquiryTO.BookingQty)
                {
                    pendingQty = previousEnquiryTO.BookingQty;

                    // Add By Samadhan 30 Sep 2022
                    if (materialTypeForCalPartyWeight == tblPurchaseVehicleSpotEntryTO.ProdClassId)
                    {
                        if (previousEnquiryTO.PartyQty > 0)
                        {
                            pendingQty = previousEnquiryTO.PartyQty;
                        }
                        else
                        {
                            pendingQty = previousEnquiryTO.BookingQty;
                        }

                    }
                }

                previousEnquiryTO.PendingBookingQty = pendingQty;

                //Update pending booking Qty for enquiry in tblPurchaseEnquiry
                result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(previousEnquiryTO, conn, tran);
                if (result == -1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(tblPurchaseVehicleSpotEntryTO, conn, tran);
                if (result == -1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }
                //Update pending booking Qty for enquiry in tblPurchaseEnquiry
                TblPurchaseEnquiryTO newEnquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(tblPurchaseVehicleSpotEntryTO.PurchaseEnquiryId, conn, tran);
                if (previousEnquiryTO == null)
                {
                    throw new Exception("newEnquiryTO == NULL");
                }


                // newEnquiryTO.PendingBookingQty = newEnquiryTO.PendingBookingQty - tblPurchaseVehicleSpotEntryTO.VehicleQty;
                // Add By Samadhan 30 Sep 2022
                if (materialTypeForCalPartyWeight == tblPurchaseVehicleSpotEntryTO.ProdClassId)
                {
                    if (tblPurchaseVehicleSpotEntryTO.PartyQty > 0)
                    {
                        newEnquiryTO.PendingBookingQty = newEnquiryTO.PendingBookingQty - tblPurchaseVehicleSpotEntryTO.PartyQty;
                    }
                    else
                    {
                        newEnquiryTO.PendingBookingQty = newEnquiryTO.PendingBookingQty - tblPurchaseVehicleSpotEntryTO.VehicleQty;
                    }

                }
                else
                {
                    newEnquiryTO.PendingBookingQty = newEnquiryTO.PendingBookingQty - tblPurchaseVehicleSpotEntryTO.VehicleQty;
                }
                result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(newEnquiryTO, conn, tran);
                if (result == -1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                result = _iTblPurchaseScheduleSummaryDAO.UpdateScheduleEnquiryIdOnly(tblPurchaseVehicleSpotEntryTO.PurchaseScheduleSummaryId, newEnquiryTO.IdPurchaseEnquiry, conn, tran);
                if (result == -1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                Boolean isUpdateSaudaDtlsAsPerCorNC = false;
                Boolean isUpdateAllSchOfEnq = false;
                Boolean isActive = true;

                TblPurchaseScheduleSummaryTO scheduleSummaryTO = SelectAllEnquiryScheduleSummaryTOByRootScheduleID(tblPurchaseVehicleSpotEntryTO.PurchaseScheduleSummaryId, isActive, conn, tran);
                if (scheduleSummaryTO == null)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }
                Boolean isUpdateOnlyGradingDtls = true;
                resultMessage = UpdateWholeScheduleAsCorNC(scheduleSummaryTO, newEnquiryTO, isUpdateSaudaDtlsAsPerCorNC, isUpdateAllSchOfEnq, isUpdateOnlyGradingDtls, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                resultMessage = UpdatePendingNoOfVehiclesAgainstEnquiry(previousEnquiryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                resultMessage = UpdatePendingNoOfVehiclesAgainstEnquiry(newEnquiryTO, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    return resultMessage;
                }

                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Vehicle linked to Sauda No. - " + newEnquiryTO.EnqDisplayNo + " successfully";
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, " Error in UpdatePrevAndLinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }
        public ResultMessage UpdatePrevAndLinkVehicleToExistingSauda(TblPurchaseScheduleSummaryTO scheduleSummaryTO, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            try
            {
                //Reshma Added For save multiple link existing suada to same root scedule.
                Boolean isAllowTosave = true;
                List<TblPurchaseVehLinkSaudaTO> purchaseVehLinkSaudaTOList = _iTblPurchaseVehLinkSaudaDAO.SelectTblPurchaseVehLinkSauda(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                if (purchaseVehLinkSaudaTOList != null && purchaseVehLinkSaudaTOList.Count > 0)
                {
                    List<TblPurchaseVehLinkSaudaTO> purchaseVehLinkSaudaTOListTemp = scheduleSummaryTO.PurchaseVehLinkSaudaTOList;
                    if (purchaseVehLinkSaudaTOListTemp != null && purchaseVehLinkSaudaTOListTemp.Count > 0)
                    {
                        for (int k = 0; k < purchaseVehLinkSaudaTOListTemp.Count; k++)
                        {
                            List<TblPurchaseVehLinkSaudaTO> TblPurchaseVehLinkSaudaTOTemp = purchaseVehLinkSaudaTOList
                                .Where(w => w.PurchaseEnquiryId == purchaseVehLinkSaudaTOListTemp[k].PurchaseEnquiryId).ToList();
                            if (TblPurchaseVehLinkSaudaTOTemp != null && TblPurchaseVehLinkSaudaTOTemp.Count > 0)
                            {
                                isAllowTosave = false;
                            }
                        }
                    }
                }
                if (!isAllowTosave)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }
                //Update Pending of prevoius enquiry
                TblPurchaseEnquiryTO previousEnquiryTO1 = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(scheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                if (previousEnquiryTO1 == null)
                {
                    throw new Exception("previousEnquiryTO == NULL");
                }

                double pendingQty = previousEnquiryTO1.PendingBookingQty + scheduleSummaryTO.Qty;

                if (pendingQty > previousEnquiryTO1.BookingQty)
                {
                    pendingQty = previousEnquiryTO1.BookingQty;
                }
                previousEnquiryTO1.PendingBookingQty = pendingQty;

                //Update pending booking Qty for enquiry in tblPurchaseEnquiry
                result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(previousEnquiryTO1, conn, tran);
                if (result == -1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                if (scheduleSummaryTO.PurchaseVehLinkSaudaTOList != null && scheduleSummaryTO.PurchaseVehLinkSaudaTOList.Count > 0)
                {
                    String saudaIds = String.Empty;
                    List<TblPurchaseEnquiryTO> enquiryList = new List<TblPurchaseEnquiryTO>();

                    TblPurchaseEnquiryTO previousEnquiryTO = _iTblPurchaseEnquiryBL.SelectTblBookingsTO(scheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                    if (previousEnquiryTO == null)
                    {
                        throw new Exception("previousEnquiryTO == null");
                    }

                    List<Int32> saudaIdsList = scheduleSummaryTO.PurchaseVehLinkSaudaTOList.Select(a => a.PurchaseEnquiryId).ToList();
                    if (saudaIdsList != null && saudaIdsList.Count > 0)
                    {
                        saudaIds = String.Join(",", saudaIdsList.Select(n => n.ToString()).ToArray());
                    }

                    if (!String.IsNullOrEmpty(saudaIds))
                    {
                        enquiryList = _iTblPurchaseEnquiryBL.SelectSaudaListBySaudaIds(saudaIds);
                    }

                    if (enquiryList != null && enquiryList.Count > 0)
                    {
                        List<TblPurchaseEnquiryDetailsTO> enquiryItemDetilsTOList = _iTblPurchaseEnquiryDetailsDAO.SelectEnquiryDetailsListBySaudaIds(saudaIds);
                        if (enquiryItemDetilsTOList != null && enquiryItemDetilsTOList.Count > 0)
                        {
                            for (int k = 0; k < enquiryList.Count; k++)
                            {
                                TblPurchaseEnquiryTO enquiryTO = enquiryList[k];
                                enquiryTO.PurchaseEnquiryDetailsTOList = enquiryItemDetilsTOList.Where(a => a.PurchaseEnquiryId == enquiryTO.IdPurchaseEnquiry).ToList();
                            }
                        }

                        for (int i = 0; i < scheduleSummaryTO.PurchaseVehLinkSaudaTOList.Count; i++)
                        {
                            TblPurchaseEnquiryTO enquiryTO = enquiryList.Where(a => a.IdPurchaseEnquiry == scheduleSummaryTO.PurchaseVehLinkSaudaTOList[i].PurchaseEnquiryId).FirstOrDefault();
                            if (enquiryTO != null)
                            {
                                enquiryTO.IsPrimarySauda = scheduleSummaryTO.PurchaseVehLinkSaudaTOList[i].IsPrimarySauda;
                                enquiryTO.LinkVehQty = scheduleSummaryTO.PurchaseVehLinkSaudaTOList[i].LinkedQty;

                                if (enquiryTO.IdPurchaseEnquiry == previousEnquiryTO1.IdPurchaseEnquiry)
                                {
                                    enquiryTO.PendingBookingQty = previousEnquiryTO1.PendingBookingQty;
                                }
                                enquiryTO.PendingBookingQty = enquiryTO.PendingBookingQty - scheduleSummaryTO.PurchaseVehLinkSaudaTOList[i].LinkedQty;
                                result = _iTblPurchaseEnquiryBL.UpdateEnquiryPendingBookingQty(enquiryTO, conn, tran);
                                if (result == -1)
                                {
                                    throw new Exception("Error in UpdateEnquiryPendingBookingQty(enquiryTO, conn, tran);");
                                }
                            }
                        }
                    }

                    resultMessage = UpdateScheduleForSaudaConversion(scheduleSummaryTO, enquiryList, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    resultMessage = _iTblPurchaseVehLinkSaudaBL.DeactivatePreviousLinkSauda(scheduleSummaryTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    resultMessage = _iTblPurchaseVehLinkSaudaBL.SavePurchaseVehLinkSaudaDtls(scheduleSummaryTO, conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    scheduleSummaryTO.PurchaseEnquiryId = enquiryList[0].IdPurchaseEnquiry;

                    TblPurchaseEnquiryTO primarySaudaTO = enquiryList.Where(a => a.IsPrimarySauda == 1).FirstOrDefault();
                    if (primarySaudaTO != null)
                    {
                        scheduleSummaryTO.PurchaseEnquiryId = primarySaudaTO.IdPurchaseEnquiry;
                    }

                    TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectSpotVehicleAgainstScheduleId(scheduleSummaryTO.ActualRootScheduleId, conn, tran);
                    if (spotVehicleTO != null)
                    {
                        spotVehicleTO.PurchaseEnquiryId = enquiryList[0].IdPurchaseEnquiry;

                        if (primarySaudaTO != null)
                        {
                            spotVehicleTO.PurchaseEnquiryId = primarySaudaTO.IdPurchaseEnquiry;
                        }

                        result = _iTblPurchaseVehicleSpotEntryBL.UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran);
                        if (result == -1)
                        {
                            throw new Exception("Error in UpdateTblPurchaseVehicleSpotEntry(spotVehicleTO, conn, tran)");
                        }
                    }

                    result = _iTblPurchaseScheduleSummaryDAO.UpdateScheduleEnquiryIdOnly(scheduleSummaryTO.ActualRootScheduleId, scheduleSummaryTO.PurchaseEnquiryId, conn, tran);
                    if (result == -1)
                    {
                        throw new Exception("Error in UpdateTblPurchaseScheduleSummary(scheduleSummaryTO, conn, tran);");
                    }

                    if (primarySaudaTO != null)
                    {
                        resultMessage = UpdatePendingNoOfVehiclesAgainstEnquiry(primarySaudaTO, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            return resultMessage;
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Vehicle linked successfully";
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, " Error in UpdatePrevAndLinkVehicleToExistingSauda(TblPurchaseVehicleSpotEntryTO tblPurchaseVehicleSpotEntryTO,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }

        public ResultMessage PostScheduleTcDtls(List<TblPurchaseSchTcDtlsTO> tblPurchaseSchTcDtlsTOList, Int32 loginUserId)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;
            DateTime currentDate = _iCommonDAO.ServerDateTime;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                if (tblPurchaseSchTcDtlsTOList == null || tblPurchaseSchTcDtlsTOList.Count == 0)
                {
                    throw new Exception("tblPurchaseSchTcDtlsTOList == null");
                }

                List<TblPurchaseSchTcDtlsTO> existingSchDtlsList = _iTblPurchaseSchTcDtlsBL.SelectScheTcDtlsByRootScheduleId(tblPurchaseSchTcDtlsTOList[0].PurchaseScheduleSummaryId.ToString());
                if (existingSchDtlsList != null && existingSchDtlsList.Count > 0)
                {
                    Int32 isActive = 0;
                    result = _iTblPurchaseSchTcDtlsBL.UpdateIsActiveAgainstSch(tblPurchaseSchTcDtlsTOList[0].PurchaseScheduleSummaryId, isActive, conn, tran);
                    if (result <= -1)
                    {
                        throw new Exception("Error in UpdateIsActiveAgainstSch(tblPurchaseSchTcDtlsTOList[0].PurchaseScheduleSummaryId, isActive, conn, tran);");
                    }
                }

                for (int i = 0; i < tblPurchaseSchTcDtlsTOList.Count; i++)
                {
                    TblPurchaseSchTcDtlsTO tblPurchaseSchTcDtlsTO = tblPurchaseSchTcDtlsTOList[i];
                    tblPurchaseSchTcDtlsTO.CreatedOn = currentDate;
                    tblPurchaseSchTcDtlsTO.CreatedBy = loginUserId;
                    tblPurchaseSchTcDtlsTO.IsActive = 1;

                    result = _iTblPurchaseSchTcDtlsBL.InsertTblPurchaseSchTcDtls(tblPurchaseSchTcDtlsTO, conn, tran);
                    if (result != 1)
                    {
                        throw new Exception("Error in InsertTblPurchaseSchTcDtls(tblPurchaseSchTcDtlsTO, conn, tran);");
                    }
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                resultMessage.DisplayMessage = "Vehicle TC Details Added Successfully.";
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in PostScheduleTcDtls(List<TblPurchaseSchTcDtlsTO> tblPurchaseSchTcDtlsTOList)");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public List<DropDownTO> SelectAllVehAddOnFunDtls(Int32 rootscheduleId)
        {
            List<DropDownTO> returnList = new List<DropDownTO>();
            List<DropDownTO> finalList = new List<DropDownTO>();

            List<DropDownTO> vehAddOnDtlsList = _iDimensiondao.SelectAddOnFunDtls(rootscheduleId);
            if (vehAddOnDtlsList != null && vehAddOnDtlsList.Count > 0)
            {
                finalList.AddRange(vehAddOnDtlsList);
            }

            TblPurchaseVehicleSpotEntryTO spotVehicleTO = _iTblPurchaseVehicleSpotEntryBL.SelectTblPurchaseVehicleSpotEntryTOByRootId(rootscheduleId);
            if (spotVehicleTO != null)
            {
                List<DropDownTO> spotVehAddOnDtlsList = _iDimensiondao.SelectAddOnFunDtls(spotVehicleTO.IdVehicleSpotEntry);
                finalList.AddRange(spotVehAddOnDtlsList);
            }

            if (finalList != null && finalList.Count > 0)
            {
                for (int i = 0; i < finalList.Count; i++)
                {
                    DropDownTO dropDownTO = finalList[i];

                    if (returnList == null || returnList.Count == 0)
                    {
                        returnList.Add(dropDownTO);
                        continue;
                    }
                    DropDownTO res = returnList.Where(a => a.Text == dropDownTO.Text).FirstOrDefault();
                    if (res == null)
                    {
                        returnList.Add(dropDownTO);
                    }
                }

                if (returnList != null && returnList.Count > 0)
                {
                    for (int k = 0; k < returnList.Count; k++)
                    {
                        DropDownTO finalTo = returnList[k];
                        finalTo.Tag = finalTo.Text;

                        if (finalTo.Text == "PURCHASE_SPOT_ENTRY")
                        {
                            finalTo.Text = "Spot Entry Dtls";
                        }
                        else if (finalTo.Text == "GRADER_APPROVAL")
                        {
                            finalTo.Text = "UM Approval Dtls";
                        }
                        else if (finalTo.Text == "PURCHASE_WEIGHING")
                        {
                            finalTo.Text = "Weighing Completed";
                        }
                        else if (finalTo.Text == "PURCHASE_UNLOADING")
                        {
                            finalTo.Text = "Unloading Completed";
                        }
                        else if (finalTo.Text == "PURCHASE_GRADING")
                        {
                            finalTo.Text = "Grading Completed";
                        }
                        else if (finalTo.Text == "PURCHASE_GRADING")
                        {
                            finalTo.Text = "Grading Completed";
                        }
                    }
                }
            }
            return returnList;
        }

        public ResultMessage UpdateVehicleOutFlagForIOTV2()
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            try
            {

                conn.Open();
                tran = conn.BeginTransaction();



                DateTime from_Date = _iCommonDAO.ServerDateTime;
                DateTime to_Date = from_Date;
                Int32 result = 0;

                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListReturn = new List<TblPurchaseScheduleSummaryTO>();

                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = _iTblPurchaseScheduleSummaryDAO.GetAllCorrectionCompletedVeh(from_Date, to_Date);
                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {
                    for (int i = 0; i < tblPurchaseScheduleSummaryTOList.Count; i++)
                    {
                        TblPurchaseScheduleSummaryTO scheduleSummaryTO = tblPurchaseScheduleSummaryTOList[i];

                        if (scheduleSummaryTO.IsVehicleOut == 1)
                        {
                            result = _iTblPurchaseScheduleSummaryDAO.UpdateIsVehicleOut(scheduleSummaryTO, conn, tran);
                            if (result == -1)
                            {
                                throw new Exception("Error in UpdateIsVehicleOut(tblPurchaseScheduleSummaryTO, conn, tran);");
                            }
                        }
                        else
                        {
                            if (scheduleSummaryTO.StatusId == (Int32)Constants.TranStatusE.VEHICLE_OUT
                                && scheduleSummaryTO.IsCorrectionCompleted == 1 && scheduleSummaryTO.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS)
                            {

                                if (scheduleSummaryTO.IsVehicleOut == 0)
                                {
                                    TblPurchaseScheduleSummaryTO vehicleOutTO = scheduleSummaryTO.DeepCopy();
                                    List<TblPurchaseScheduleSummaryTO> tempList = new List<TblPurchaseScheduleSummaryTO>();
                                    vehicleOutTO.IsVehicleOut = 1;
                                    tempList.Add(vehicleOutTO);

                                    resultMessage = InsertScheduleDtls(tempList, conn, tran);
                                    if (resultMessage.MessageType != ResultMessageE.Information)
                                    {
                                        resultMessage.DefaultBehaviour();
                                        return resultMessage;
                                    }
                                    scheduleSummaryTO.IsActive = 0;
                                    result = UpdateIsActiveOnly(scheduleSummaryTO, conn, tran);
                                    if (result != 1)
                                    {
                                        resultMessage.DefaultBehaviour();
                                        return resultMessage;
                                    }
                                    result = UpdatePreviousActiveStatus(vehicleOutTO, conn, tran);
                                    if (result == -1)
                                    {
                                        resultMessage.DefaultBehaviour();
                                        return resultMessage;
                                    }

                                    result = _iTblPurchaseScheduleSummaryDAO.UpdateIsVehicleOut(vehicleOutTO, conn, tran);
                                    if (result == -1)
                                    {
                                        throw new Exception("Error in UpdateIsVehicleOut(tblPurchaseScheduleSummaryTO, conn, tran);");
                                    }
                                }
                            }
                        }

                    }
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateVehicleOutFlagForIOT()");
                return resultMessage;

            }
            finally
            {
                conn.Close();
            }

        }
        public ResultMessage UpdateVehicleOutFlagForIOT()
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                String statusStr = Convert.ToString((Int32)Constants.TranStatusE.VEHICLE_OUT);

                List<TblGateTO> tblGateTOList = _iTblGateBL.SelectAllTblGateList(Constants.ActiveSelectionTypeE.Active);

                for (int g = 0; g < tblGateTOList.Count; g++)
                {

                    TblGateTO tblGateTO = tblGateTOList[g];

                    GateIoTResult gateIoTResult = _iIotCommunication.GetLoadingSlipsByStatusFromIoTByStatusId(statusStr, tblGateTO);
                    if (gateIoTResult != null && gateIoTResult.Data != null)
                    {
                        for (int i = 0; i < gateIoTResult.Data.Count; i++)
                        {
                            if (gateIoTResult.Data[i] != null)
                            {
                                Int32 modBusLoadingRefId = Convert.ToInt32(gateIoTResult.Data[i][(int)IoTConstants.GateIoTColE.LoadingId]);

                                List<TblPurchaseScheduleSummaryTO> scheduleSummaryTOList = SelectTblPurchaseScheduleSummaryTOByModBusRefId(modBusLoadingRefId);
                                if (scheduleSummaryTOList != null && scheduleSummaryTOList.Count > 0)
                                {
                                    TblPurchaseScheduleSummaryTO correctionTO = scheduleSummaryTOList.Where(a => a.IsCorrectionCompleted == 1 && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS).FirstOrDefault();
                                    if (correctionTO != null)
                                    {
                                        TblPurchaseScheduleSummaryTO vehicleOutTO = scheduleSummaryTOList.Where(a => a.IsVehicleOut == 1).FirstOrDefault();
                                        if (vehicleOutTO == null)
                                        {
                                            resultMessage = AddVehicleOut(correctionTO);
                                            if (resultMessage.MessageType != ResultMessageE.Information)
                                            {
                                                return resultMessage;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdateVehicleOutFlagForIOT()");
                return resultMessage;

            }

        }

        public ResultMessage AddVehicleOut(TblPurchaseScheduleSummaryTO scheduleSummaryTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
            SqlTransaction tran = null;
            Int32 result = 0;

            try
            {
                conn.Open();
                tran = conn.BeginTransaction();

                TblPurchaseScheduleSummaryTO vehicleOutTO = scheduleSummaryTO.DeepCopy();
                List<TblPurchaseScheduleSummaryTO> tempList = new List<TblPurchaseScheduleSummaryTO>();
                vehicleOutTO.IsVehicleOut = 1;
                tempList.Add(vehicleOutTO);

                resultMessage = InsertScheduleDtls(tempList, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }
                scheduleSummaryTO.IsActive = 0;
                result = UpdateIsActiveOnly(scheduleSummaryTO, conn, tran);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }
                result = UpdatePreviousActiveStatus(vehicleOutTO, conn, tran);
                if (result == -1)
                {
                    resultMessage.DefaultBehaviour();
                    return resultMessage;
                }

                result = _iTblPurchaseScheduleSummaryDAO.UpdateIsVehicleOut(vehicleOutTO, conn, tran);
                if (result == -1)
                {
                    throw new Exception("Error in UpdateIsVehicleOut(tblPurchaseScheduleSummaryTO, conn, tran);");
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in AddVehicleOut()");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        // Deepali Added for task no 1151
        public List<TblSpotEntryContainerDtlsTO> SelectContainerDetailsBySpotEntryId(int spotEntryId)
        {
            return _iTblSpotEntryContainerDtlsBL.SelectAllTblSpotEntryContainerDtlsList(spotEntryId);
        }
        public List<PendingvehicleReportTO> GetListOfPendingvehicleReport(string fromDate, string toDate, int supplierId, int materialTypeId, string VehicleNo)
        {
            Int16 mathroundFact = 3;
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;
            if (Constants.IsDateTime(fromDate))
                from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            if (Constants.IsDateTime(toDate))
                to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));
            List<PendingvehicleReportTO> list = new List<PendingvehicleReportTO>();
            List<PendingvehicleReportTO> finalList = new List<PendingvehicleReportTO>();

            list = _ireportDAO.SelectPendingvehicleReportDetails(from_Date, to_Date, supplierId, materialTypeId, VehicleNo);

            if (list != null && list.Count > 0)
            {
                finalList = list;
            }
            return finalList;
        }
        public List<PendingSaudaReportTO> GetListOfPendingSaudaReport(string fromDate, string toDate)
        {
            Int16 mathroundFact = 3;
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;
            if (Constants.IsDateTime(fromDate))
                from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            if (Constants.IsDateTime(toDate))
                to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));
            List<PendingSaudaReportTO> list = new List<PendingSaudaReportTO>();
            List<PendingSaudaReportTO> finalList = new List<PendingSaudaReportTO>();

            list = _ireportDAO.SelectPendingSaudaReportDetails(from_Date, to_Date);

            if (list != null && list.Count > 0)
            {
                finalList = list;
            }
            return finalList;
        }
        public ResultMessage GetPendingvehicleReportListForExcel(string fromDate, string toDate, int supplierId, int materialTypeId, string VehicleNo)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;
            if (Constants.IsDateTime(fromDate))
                from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            if (Constants.IsDateTime(toDate))
                to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));


            resultMessage = _ireportDAO.GetPendingvehicleReportListForExcel(from_Date, to_Date, supplierId, materialTypeId, VehicleNo);

            return resultMessage;
        }

        public List<TblSpotentrygradeTO> GetSpotentrygradeByScheduleId(Int32 IdPurchaseScheduleSummary)
        {
            List<TblSpotentrygradeTO> tblSpotentrygradeTOList = SelectSpotentrygrade(IdPurchaseScheduleSummary);

            return tblSpotentrygradeTOList;
        }
        public List<TblSpotentrygradeTO> SelectSpotentrygrade(Int32 IdPurchaseScheduleSummary)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectSpotentrygrade(IdPurchaseScheduleSummary);
        }

        public ResultMessage DeleteAllDataIncludingCandNC()
        {
            lock (dataExtractionLockObj)
            {
                ResultMessage resultMessage = new ResultMessage();
                SqlConnection conn = new SqlConnection(_iConnectionString.GetConnectionString(Constants.CONNECTION_STRING));
                SqlTransaction tran = null;
                int result = 0;
                try
                {

                    DateTime serveDate = _iCommonDAO.ServerDateTime;
                    Boolean isForBRM = Startup.IsForBRM;

                    TblConfigParamsTO tblConfigParamsTO = _iTblConfigParamsBL.SelectTblConfigParamsValByName(Constants.CP_SCRAP_EXTRACTION_DAYS);
                    if (tblConfigParamsTO != null)
                    {
                        Int32 days = Convert.ToInt32(tblConfigParamsTO.ConfigParamVal);
                        serveDate = serveDate.AddDays(-days);
                    }

                    //Prajakta[2021-07-29] Added to get last report backup Date
                    //serveDate = GetLastTransactionDate(serveDate);

                    int confiqId = _iTblConfigParamsDAO.IoTSetting();
                    Int32 cOrNcId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                    Int32 cId = (Int32)Constants.ConfirmTypeE.CONFIRM;
                    Int32 NcId = (Int32)Constants.ConfirmTypeE.NONCONFIRM;

                    List<TblPurchaseScheduleSummaryTO> allCorrectionComplVehList = SelectAllCorrectionCompleVehiclesCandNC(serveDate, cId, NcId);
                    if (allCorrectionComplVehList == null || allCorrectionComplVehList.Count == 0)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "No vehicles found to extract.";
                        return resultMessage;
                    }

                    if (isForBRM)
                    {
                        allCorrectionComplVehList = allCorrectionComplVehList.Where(a => a.IsDBup == 1).ToList();
                        if (allCorrectionComplVehList == null || allCorrectionComplVehList.Count == 0)
                        {
                            resultMessage.DefaultBehaviour();
                            resultMessage.DisplayMessage = "No vehicles found to extract.";
                            return resultMessage;
                        }
                    }

                    resultMessage = CreateAndBackupExcelFileCandNC(allCorrectionComplVehList, cId,NcId, isForBRM);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        return resultMessage;
                    }

                    allCorrectionComplVehList = allCorrectionComplVehList.GroupBy(g => g.ActualRootScheduleId).Select(s => s.FirstOrDefault()).ToList();
                    for (int i = 0; i < allCorrectionComplVehList.Count; i++)
                    {

                        try
                        {
                            conn.Open();
                            tran = conn.BeginTransaction();
                            List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList = new List<TblAddonsFunDtlsTO>();

                            TblPurchaseScheduleSummaryTO scheduleSummaryTO = allCorrectionComplVehList[i];
                            if (confiqId == (Int32)Constants.WeighingDataSourceE.IoT)
                            {
                                //if IsDBup = 1 means all process completed @ Added By kiran 
                                if (scheduleSummaryTO.IsDBup == 0)
                                {
                                    continue;
                                }
                            }
                            resultMessage = DeleteAllDtlsAgainstVehCandNC(scheduleSummaryTO, tblAddonsFunDtlsTOList, conn, tran);
                            if (resultMessage == null || resultMessage.MessageType != ResultMessageE.Information)
                            {                                
                                continue;
                            }

                            if (tblAddonsFunDtlsTOList != null && tblAddonsFunDtlsTOList.Count > 0)
                            {
                                resultMessage = DeleteFileFromAzure(tblAddonsFunDtlsTOList, conn, tran);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                     continue;
                                }
                            }

                           

                            tran.Commit();
                        }
                        catch (System.Exception ex)
                        {
                            throw new Exception("Error in DeleteAllDataIncludingCandNC()");
                        }
                        finally
                        {
                            conn.Close();
                        }

                    }

                    resultMessage.DefaultSuccessBehaviour();
                    resultMessage.DisplayMessage = "Data Deletion process completed successfully.";
                    return resultMessage;
                }
                catch (System.Exception ex)
                {
                    resultMessage.DefaultExceptionBehaviour(ex, "Error in DeleteAllDataIncludingCandNC()");
                    return resultMessage;

                }
                finally
                {
                    conn.Close();
                }
            }
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllCorrectionCompleVehiclesCandNC(DateTime toDate, Int32 cId,Int32 NcId)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllCorrectionCompleVehiclesCandNC(toDate, cId, NcId);
        }
        public ResultMessage CreateAndBackupExcelFileCandNC(List<TblPurchaseScheduleSummaryTO> allCorrectionComplVehList, Int32 cId,Int32 NcId, Boolean isForBRM)
        {
            ResultMessage resultMessage = new ResultMessage();
            Int32 result = 0;
            DateTime currentDate = _iCommonDAO.ServerDateTime;
            try
            {
                if (allCorrectionComplVehList != null && allCorrectionComplVehList.Count > 0)
                {
                    List<Int32> vehicleIdsList = allCorrectionComplVehList.Select(a => a.ActualRootScheduleId).ToList();
                    if (vehicleIdsList != null && vehicleIdsList.Count > 0)
                    {
                        String vehicleIds = String.Join(",", vehicleIdsList);
                        if (!String.IsNullOrEmpty(vehicleIds))
                        {
                            if (false)
                            {
                                resultMessage = SelectAndExportToExcelTallyTransportReportCandNC(vehicleIds,cId,NcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelCCTransportReportCandNC(vehicleIds, cId, NcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelTallyPREnquiryReportCandNC(vehicleIds, cId, NcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelTallyCreditNoteOrderReportCandNC(vehicleIds, cId, NcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelGradeNoteEnquiryReportCandNC(vehicleIds, cId, NcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                                resultMessage = SelectAndExportToExcelWBReportCandNC(vehicleIds, cId, NcId, currentDate);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    return resultMessage;
                                }

                            }
                            if (!isForBRM)
                            {
                                Int32 isConsiderTm = 1;
                                List<TallyReportTO> list = GetListOfTallyReportCandNC(null, null, cId, NcId, 0, null, 0, false, vehicleIds, isConsiderTm);
                                //crete file and uplod res
                                result = CreateTempTallyExcel(list);
                                if (result != 1)
                                {
                                    resultMessage.DefaultBehaviour();
                                    resultMessage.Text = "Error while creating excel file.";
                                    return resultMessage;
                                }
                            }
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in CreateAndBackupExcelFile(DateTime fromDate,DateTime toDate,Int32 cOrNcId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;
            }
        }
        public ResultMessage SelectAndExportToExcelTallyTransportReportCandNC(string vehicleIds, Int32 cId, Int32 NcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            DateTime backupDate = new DateTime();
            try
            {
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDateDtls(Constants.BRMReportNameE.TALLY_TRANSPORT_ENQUIRY.ToString());
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    backupDate = tblReportsBackupDtlsTO.BackupDate;
                }
                else
                {
                    backupDate = currentDate;
                }


                List<TallyTransportEnquiryTO> tallyTransportEnquiryTOList = _ireportDAO.SelectTallyTransportEnquiryDetailsForCopyCandNC(backupDate, currentDate, cId, NcId);
                if (tallyTransportEnquiryTOList == null || tallyTransportEnquiryTOList.Count == 0)
                {
                    resultMessage.MessageType = ResultMessageE.Error;
                    resultMessage.DefaultBehaviour("Record not found!! tallyTransportEnquiryTOList is null. ");
                    return resultMessage;
                }
                //crete file and uplod res
                Int32 result = CreateTempTallyTransportEnquiryExcel(tallyTransportEnquiryTOList);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }

                TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_TRANSPORT_ENQUIRY.ToString();
                reportBackUpTO.BackupDate = currentDate;
                reportBackUpTO.IsBackUp = 1;
                result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                if (result != 1)
                {
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                    return resultMessage;
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelTallyTransportReport()");
                return resultMessage;
            }
        }
        public ResultMessage SelectAndExportToExcelCCTransportReportCandNC(string vehicleIds, Int32 cId, Int32 NcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.CC_TRANSPORT_ENQUIRY.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }

                }

                if (isTakeBackUp)
                {
                    List<CCTransportEnquiryTO> cCTransportEnquiryTOList = _ireportDAO.SelectCCTransportEnquiryDetailsCandNC(vehicleIds, cId, NcId);
                    if (cCTransportEnquiryTOList == null || cCTransportEnquiryTOList.Count == 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.DefaultBehaviour("Record not found!! cCTransportEnquiryTOList is null. ");
                        return resultMessage;
                    }
                    //crete file and uplod res
                    Int32 result = CreateTempCCTransportEnquiryExcel(cCTransportEnquiryTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }

                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.CC_TRANSPORT_ENQUIRY.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }
        public ResultMessage SelectAndExportToExcelTallyPREnquiryReportCandNC(string vehicleIds, Int32 cId, Int32 NcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.TALLY_PR_ENQUIRY_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }

                if (isTakeBackUp)
                {
                    List<TallyReportTO> tallyPRReportTOList = _ireportDAO.SelectTallyPREnquiryDetailsCandNC(vehicleIds, cId, NcId);
                    if (tallyPRReportTOList == null || tallyPRReportTOList.Count == 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.DefaultBehaviour("Record not found!! tallyPRReportTOList is null. ");
                        return resultMessage;
                    }
                    //crete file and uplod res
                    Int32 result = CreateTempTallyPREnquiryExcel(tallyPRReportTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_PR_ENQUIRY_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }
        public ResultMessage SelectAndExportToExcelTallyCreditNoteOrderReportCandNC(string vehicleIds, Int32 cId, Int32 NcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.TALLY_CREDIT_NOTE_ORDER_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }

                if (isTakeBackUp)
                {
                    resultMessage = TallyCrNoteOrderDetailsToDropboxCandNC(vehicleIds, cId, NcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }

                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.TALLY_CREDIT_NOTE_ORDER_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    Int32 result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }
        public ResultMessage TallyCrNoteOrderDetailsToDropboxCandNC(string vehicleIds, int cId,int NcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;
            try
            {

                Int16 mathroundFact = 2;
                double grandBasicGradeAmount = 0;
                double grandTotal = 0;
                double grandRate = 0;

                List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummaryForDropboxCandNC(vehicleIds, cId, NcId);

                //dynamic ScheduleTOList = new List<dynamic>();
                List<TallyCrOrderReportTO> tallyCrOrderReportTOList = new List<TallyCrOrderReportTO>();
                if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
                {                    

                    foreach (var ScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                    {
                          {
                            double totalAmount = 0;
                            double totalQty = 0;
                            double totalBasicGradeAmount = 0;

                            List<TblPurchaseInvoiceTO> InvoiceTOList = new List<TblPurchaseInvoiceTO>();
                            TblPurchaseInvoiceTO InvoiceTO1 = new TblPurchaseInvoiceTO();
                            InvoiceTOList.Add(InvoiceTO1);

                            //List<TblPurchaseInvoiceTO> InvoiceTOList = _iCircularDependancyBL.SelectAllTblPurchaseInvoiceListAgainstSchedule(ScheduleSummaryTO.RootScheduleId);

                            if (InvoiceTOList != null && InvoiceTOList.Count > 0)
                            {
                                TblPurchaseInvoiceTO InvoiceTO = InvoiceTOList[0];
                               
                                string configParamName = Constants.CP_SCRAP_OTHER_TAXES_FOR_TCS_IN_GRADE_NOTE;
                                TblConfigParamsTO configParamsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(configParamName);
                                if (configParamsTO != null)
                                {
                                    List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOList = _iTblPurchaseInvoiceItemDetailsDAO.SelectAllTblPurchaseInvoiceItemDetails(InvoiceTO.IdInvoicePurchase);
                                    if (purchaseInvoiceItemDetailsTOList != null && purchaseInvoiceItemDetailsTOList.Count > 0)
                                    {
                                        List<TblPurchaseInvoiceItemDetailsTO> purchaseInvoiceItemDetailsTOListTemp = purchaseInvoiceItemDetailsTOList.Where(w => configParamsTO.ConfigParamVal.Contains(w.OtherTaxId.ToString())).ToList();
                                        if (purchaseInvoiceItemDetailsTOListTemp != null && purchaseInvoiceItemDetailsTOListTemp.Count > 0)
                                        {
                                            foreach (var arr in purchaseInvoiceItemDetailsTOListTemp)
                                            {
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TCS)
                                                {
                                                    InvoiceTO.TcsAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.OTHER_EXPENCES)
                                                {
                                                    InvoiceTO.OtherExpAmt = arr.TaxableAmt;
                                                }
                                                if (arr.OtherTaxId == (Int32)Constants.OthrTaxTypeE.TRANSPORTER_ADVANCE)
                                                {
                                                    InvoiceTO.TransportorAdvAmt = arr.TaxableAmt;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList != null && ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Count > 0)
                                {
                                    foreach (var DetailsTO in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                                    {
                                        totalQty = totalQty + DetailsTO.Qty;
                                        totalAmount = totalAmount + DetailsTO.Rate;
                                        totalBasicGradeAmount = Math.Round(totalBasicGradeAmount + (DetailsTO.Qty * DetailsTO.Rate), mathroundFact);

                                    }
                                }
                                //dynamic ScheduleTO1 = new JObject();
                                TallyCrOrderReportTO tallyCrOrderReportTO = new TallyCrOrderReportTO();
                                tallyCrOrderReportTO.Date = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                                tallyCrOrderReportTO.VoucherType = "Journal";
                                tallyCrOrderReportTO.DrLedgerName = ScheduleSummaryTO.ProdClassDesc;

                                double totaltx = InvoiceTO.CgstAmt + InvoiceTO.SgstAmt + InvoiceTO.IgstAmt;
                                totaltx = Math.Round(totaltx, mathroundFact);
                                double TotalAmountToBePaidToParty = Math.Round(totalBasicGradeAmount + totaltx + InvoiceTO.TcsAmt, mathroundFact);
                                //Double BasicAmount = Math.Round((InvoiceTO.GrandTotal + ScheduleSummaryTO.FreightAmount) - TotalAmountToBePaidToParty, 2);
                                Double BasicAmount = Math.Round((InvoiceTO.GrandTotal - TotalAmountToBePaidToParty) + ScheduleSummaryTO.FreightAmount, 3);

                                if (BasicAmount > 0)
                                {
                                    continue;
                                }
                                tallyCrOrderReportTO.DrLedgerAmount = BasicAmount;
                                tallyCrOrderReportTO.CrLedgerName = ScheduleSummaryTO.SupplierName;
                                tallyCrOrderReportTO.CrLedgerAmount = BasicAmount;
                                tallyCrOrderReportTO.Narration = "BEING CREDIT NOTE RAISED FOR :" + ScheduleSummaryTO.SupplierName + " + " + ScheduleSummaryTO.EnqDisplayNo + " + " + ScheduleSummaryTO.VehicleNo;
                                //ScheduleTO1["Narration : [Supplier Name] + [Sauda Name] + [Vehicle Number]"] = "CREDIT NOTE :" + "Minal Chaudhari" + " + " + "12345678910" + " + " + "MH 10 SI 1010";

                                tallyCrOrderReportTOList.Add(tallyCrOrderReportTO);

                            }

                        }
                    }

                    if (tallyCrOrderReportTOList == null || tallyCrOrderReportTOList.Count == 0)
                    {
                        return null;
                    }

                    //crete file and uplod res
                    result = CreateTempTallyCrNoteOrderExcel(tallyCrOrderReportTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    resultMessage.DefaultSuccessBehaviour();
                    return resultMessage;
                }

            }
            catch (Exception ex)
            {
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.DefaultExceptionBehaviour(ex, "SalesChartEnquiryDetailsToDropbox");
                return resultMessage;
            }

            return resultMessage;
        }
        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummaryForDropboxCandNC(string vehicleIds, int cId, int NcId)
        {

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForGradeNoteForDropboxCandNC(vehicleIds, cId, NcId);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListToReturn = new List<TblPurchaseScheduleSummaryTO>();

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {                

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return null;
            }
        }

        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForGradeNoteForDropboxCandNC(string vehicleIds, int cId, int NcId) 
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListForGradeNoteForDropboxCandNC(vehicleIds, cId, NcId); 
        }

        public ResultMessage SelectAndExportToExcelGradeNoteEnquiryReportCandNC(string vehicleIds, Int32 cId,Int32 NcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;

                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.GRADE_NOTE_ENQUIRY_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;

                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }


                if (isTakeBackUp)
                {
                    resultMessage = GradeNoteEnquiryDetailsToDropoxCandNC(vehicleIds, cId, NcId);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }
                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.GRADE_NOTE_ENQUIRY_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    Int32 result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }
        public ResultMessage GradeNoteEnquiryDetailsToDropoxCandNC(string vehicleIds, int cId,int NcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            DataSet ds = new DataSet();
            int result = 0;
            try
            {

                ds = GetListOfMasterReportForDropboxCandNC(vehicleIds, cId, NcId);

                if (ds == null || ds.Tables[0].Rows.Count == 0)
                {
                    return null;
                }
                //crete file and uplod res
                //result = CreateTempGradeNoteEnquiryExcel(ds);
                if (result != 1)
                {
                    //tran.Rollback();
                    resultMessage.DefaultBehaviour();
                    resultMessage.Text = "Error while creating excel file.";
                    return resultMessage;
                }
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.MessageType = ResultMessageE.Error;
                resultMessage.DefaultExceptionBehaviour(ex, "SalesChartEnquiryDetailsToDropbox");
                return resultMessage;
            }
            return resultMessage;

        }
        public DataSet GetListOfMasterReportForDropboxCandNC(string vehicleIds, int cId,int NcId)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;

            Boolean isTakeNonCommercialQty = false;
            Double conversionFact = 1000;
            Int16 mathroundFact = 3;

            //dynamic totalSchTO;
            DataTable totalSchTO;

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = getListofShcheduleSummaryForMasterReportForDropboxCandNC(vehicleIds, cId, NcId);
            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                GetSameProdItemsCombinedListForReportByItemName(tblPurchaseScheduleSummaryTOList);               

                List<TblProductItemTO> prodItemTOList = getListOfGrades(Constants.ItemProdCategoryE.SCRAP_OR_WASTE);
                foreach (var item in prodItemTOList)
                {
                    item.ItemName = item.ItemName.Trim();
                }
                prodItemTOList = prodItemTOList.GroupBy(x => new { x.ItemName }).Select(s => s.FirstOrDefault()).ToList();
                if (prodItemTOList != null && prodItemTOList.Count > 0)
                {
                    //dynamic ScheduleTOList = new List<dynamic>();
                    DataSet ScheduleTOList = new DataSet();

                    tblPurchaseScheduleSummaryTOList = tblPurchaseScheduleSummaryTOList.OrderBy(g => g.SupplierName).ToList();

                    String previousSuppName = String.Empty;
                    totalSchTO = new DataTable();

                    foreach (var ScheduleSummaryTO in tblPurchaseScheduleSummaryTOList)
                    {                       

                        if (!String.IsNullOrEmpty(previousSuppName))
                        {
                            if (previousSuppName != ScheduleSummaryTO.SupplierName)
                            {
                                //dynamic totalSchTOTemp = new JObject();
                                DataTable totalSchTOTemp = new DataTable();
                                totalSchTOTemp = totalSchTO;
                                ScheduleTOList.Tables.Add(totalSchTOTemp);
                                //ScheduleTOList.Merge(totalSchTOTemp);
                                previousSuppName = ScheduleSummaryTO.SupplierName;
                                totalSchTO = new DataTable();
                            }
                        }
                        else
                        {
                            previousSuppName = ScheduleSummaryTO.SupplierName;
                        }

                        //dynamic ScheduleTO = new JObject();
                        DataTable ScheduleTO = new DataTable();
                        DataColumnCollection columns = ScheduleTO.Columns;
                        DataRow dr = ScheduleTO.NewRow();
                        String columnNameDate = "Date";
                        if (!columns.Contains(columnNameDate))
                        {
                            ScheduleTO.Columns.Add(columnNameDate, typeof(string));
                        }

                        dr[columnNameDate] = ScheduleSummaryTO.CorretionCompletedOn.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture);
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameTruckNo = "TruckNo";
                        if (!columns.Contains(columnNameTruckNo))
                        {
                            ScheduleTO.Columns.Add(columnNameTruckNo, typeof(string));
                        }

                        dr[columnNameTruckNo] = ScheduleSummaryTO.VehicleNo;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameBroker = "Broker";
                        if (!columns.Contains(columnNameBroker))
                        {
                            ScheduleTO.Columns.Add(columnNameBroker, typeof(string));
                        }

                        dr[columnNameBroker] = ScheduleSummaryTO.SupplierName;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameLocation = "Location";
                        if (!columns.Contains(columnNameLocation))
                        {
                            ScheduleTO.Columns.Add(columnNameLocation, typeof(string));
                        }

                        dr[columnNameLocation] = ScheduleSummaryTO.Location;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameParty = "Party";
                        if (!columns.Contains(columnNameParty))
                        {
                            ScheduleTO.Columns.Add(columnNameParty, typeof(string));
                        }

                        dr[columnNameParty] = ScheduleSummaryTO.SupplierName;
                        //ScheduleTO.Rows.Add(dr);


                        String columnNameVehicleTypeName = "Vehicle Type";
                        if (!columns.Contains(columnNameVehicleTypeName))
                        {
                            ScheduleTO.Columns.Add(columnNameVehicleTypeName, typeof(string));
                        }

                        dr[columnNameVehicleTypeName] = ScheduleSummaryTO.VehicleTypeName;
                        //ScheduleTO.Rows.Add(dr);

                        String columnNameRemark = "Remark";
                        if (!columns.Contains(columnNameRemark))
                        {
                            ScheduleTO.Columns.Add(columnNameRemark, typeof(string));
                        }

                        dr[columnNameRemark] = "Qty";
                        //ScheduleTO.Rows.Add(dr);

                        double amount = 0;
                        double Qty = 0;

                        DataColumnCollection columnstotalSchTO = totalSchTO.Columns;
                        DataRow drtotalSchTO = totalSchTO.NewRow();
                        String colNmDate = "Date";
                        if (!columnstotalSchTO.Contains(colNmDate))
                        {
                            totalSchTO.Columns.Add(colNmDate, typeof(string));
                        }

                        drtotalSchTO[colNmDate] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmTruckNo = "TruckNo";
                        if (!columnstotalSchTO.Contains(colNmTruckNo))
                        {
                            totalSchTO.Columns.Add(colNmTruckNo, typeof(string));
                        }

                        drtotalSchTO[colNmTruckNo] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmBroker = "Broker";
                        if (!columnstotalSchTO.Contains(colNmBroker))
                        {
                            totalSchTO.Columns.Add(colNmBroker, typeof(string));
                        }

                        drtotalSchTO[colNmBroker] = ScheduleSummaryTO.SupplierName; ;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmLocation = "Location";
                        if (!columnstotalSchTO.Contains(colNmLocation))
                        {
                            totalSchTO.Columns.Add(colNmLocation, typeof(string));
                        }

                        drtotalSchTO[colNmLocation] = "Total";
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmParty = "Party";
                        if (!columnstotalSchTO.Contains(colNmParty))
                        {
                            totalSchTO.Columns.Add(colNmParty, typeof(string));
                        }

                        drtotalSchTO[colNmParty] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);


                        String colNmVehicleTypeName = "Vehicle Type";
                        if (!columnstotalSchTO.Contains(colNmVehicleTypeName))
                        {
                            totalSchTO.Columns.Add(colNmVehicleTypeName, typeof(string));
                        }

                        drtotalSchTO[colNmVehicleTypeName] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String colNmRemark = "Remark";
                        if (!columnstotalSchTO.Contains(colNmRemark))
                        {
                            totalSchTO.Columns.Add(colNmRemark, typeof(string));
                        }

                        drtotalSchTO[colNmRemark] = null;
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        foreach (var prodItemTO in prodItemTOList)
                        {
                            String columnNameprodItemTOItemName = prodItemTO.ItemName;
                            if (!columns.Contains(columnNameprodItemTOItemName))
                            {
                                ScheduleTO.Columns.Add(columnNameprodItemTOItemName, typeof(string));
                            }
                            dr[columnNameprodItemTOItemName] = "";
                            //ScheduleTO.Rows.Add(dr);

                            TblPurchaseVehicleDetailsTO DetailsTO = ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList.Where(w => w.ItemName == prodItemTO.ItemName).FirstOrDefault();

                            if (DetailsTO != null)
                            {
                                //ScheduleTO[prodItemTO.ItemName + "//" + prodItemTO.IdProdItem] = String.Format("{0:0.000}", DetailsTO.Qty);
                                dr[columnNameprodItemTOItemName] = String.Format("{0:0.000}", DetailsTO.Qty);
                                //ScheduleTO.Rows.Add(dr);

                                double ScheduleTOItemQty = 0, totalSchTOItemQty = 0, totalSchTOItemQtyTotal = 0;

                                object val = dr[columnNameprodItemTOItemName];
                                if (val == DBNull.Value)
                                {
                                    ScheduleTOItemQty = 0;
                                }
                                else
                                {
                                    ScheduleTOItemQty = Convert.ToDouble(dr[columnNameprodItemTOItemName]);
                                }

                                if (!columnstotalSchTO.Contains(columnNameprodItemTOItemName))
                                {
                                    totalSchTO.Columns.Add(columnNameprodItemTOItemName, typeof(string));
                                }

                                if (drtotalSchTO[columnNameprodItemTOItemName] == null)
                                {
                                    totalSchTOItemQty = 0;
                                }
                                else
                                {
                                    object val1 = drtotalSchTO[columnNameprodItemTOItemName];
                                    if (val1 == DBNull.Value)
                                    {
                                        totalSchTOItemQty = 0;
                                    }
                                    else
                                    {
                                        totalSchTOItemQty = Convert.ToDouble(drtotalSchTO[columnNameprodItemTOItemName]);
                                    }

                                }

                                totalSchTOItemQtyTotal = ((ScheduleTOItemQty) + (totalSchTOItemQty));
                                drtotalSchTO[columnNameprodItemTOItemName] = String.Format("{0:0.000}", totalSchTOItemQtyTotal);
                                //totalSchTO.Rows.Add(drtotalSchTO);
                            }
                            else
                            {
                                String columnNameprodItemTOItemName1 = prodItemTO.ItemName;
                                if (!columns.Contains(columnNameprodItemTOItemName1))
                                {
                                    ScheduleTO.Columns.Add(columnNameprodItemTOItemName1, typeof(string));
                                }
                                dr[columnNameprodItemTOItemName1] = "";
                                //ScheduleTO.Rows.Add(dr);


                                double totalSchTOElseItemQty = 0;

                                if (!columnstotalSchTO.Contains(columnNameprodItemTOItemName1))
                                {
                                    totalSchTO.Columns.Add(columnNameprodItemTOItemName1, typeof(string));
                                }

                                if (drtotalSchTO[columnNameprodItemTOItemName1] == null)
                                {
                                    totalSchTOElseItemQty = 0;
                                }
                                else
                                {
                                    object val2 = drtotalSchTO[columnNameprodItemTOItemName1];
                                    if (val2 == DBNull.Value)
                                    {
                                        totalSchTOElseItemQty = 0;
                                    }
                                    else
                                    {
                                        totalSchTOElseItemQty = Convert.ToDouble(drtotalSchTO[columnNameprodItemTOItemName1]);
                                    }

                                }

                                drtotalSchTO[columnNameprodItemTOItemName] = String.Format("{0:0.000}", totalSchTOElseItemQty);
                                //totalSchTO.Rows.Add(drtotalSchTO);
                            }
                        }

                        foreach (var detailsTo in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TblProductItemTO prodItemTO = prodItemTOList.Where(w => w.ItemName == detailsTo.ItemName).FirstOrDefault();

                            if (prodItemTO != null)
                            {

                            }
                            else
                            {

                                String columnNameDetailsProdItem = detailsTo.ItemName;
                                if (!columns.Contains(columnNameDetailsProdItem))
                                {
                                    ScheduleTO.Columns.Add(columnNameDetailsProdItem, typeof(string));
                                }

                                dr[columnNameDetailsProdItem] = String.Format("{0:0.000}", detailsTo.Qty);
                                //ScheduleTO.Rows.Add(dr);                                 

                                double ScheduleTODItemQty = 0, totalSchTODItemQty = 0, totalSchTODItemQtyTotal = 0;

                                object val3 = dr[columnNameDetailsProdItem];
                                if (val3 == DBNull.Value)
                                {
                                    ScheduleTODItemQty = 0;
                                }
                                else
                                {
                                    ScheduleTODItemQty = Convert.ToDouble(dr[columnNameDetailsProdItem]);
                                }

                                if (!columnstotalSchTO.Contains(columnNameDetailsProdItem))
                                {
                                    totalSchTO.Columns.Add(columnNameDetailsProdItem, typeof(string));
                                }

                                if (drtotalSchTO[columnNameDetailsProdItem] == null)
                                {
                                    totalSchTODItemQty = 0;
                                }
                                else
                                {
                                    object val4 = drtotalSchTO[columnNameDetailsProdItem];
                                    if (val4 == DBNull.Value)
                                    {
                                        totalSchTODItemQty = 0;
                                    }
                                    else
                                    {
                                        totalSchTODItemQty = Convert.ToDouble(drtotalSchTO[columnNameDetailsProdItem]);
                                    }
                                }

                                totalSchTODItemQtyTotal = ((ScheduleTODItemQty) + (totalSchTODItemQty));
                                drtotalSchTO[columnNameDetailsProdItem] = (String.Format("{0:0.000}", totalSchTODItemQtyTotal));
                                //totalSchTO.Rows.Add(drtotalSchTO);
                            }
                        }

                        double TotalAmount = 0;
                        foreach (var item in ScheduleSummaryTO.PurchaseScheduleSummaryDetailsTOList)
                        {
                            TotalAmount += (item.Qty * item.Rate) / conversionFact;
                        }

                        String columnNameTotalQty = "Total Qty";
                        if (!columns.Contains(columnNameTotalQty))
                        {
                            ScheduleTO.Columns.Add(columnNameTotalQty, typeof(string));
                        }

                        dr[columnNameTotalQty] = String.Format("{0:0.000}", ScheduleSummaryTO.Qty);
                        //ScheduleTO.Rows.Add(dr);                        

                        double ScheduleTOQty = 0, totalSchTOQty = 0, totalSchTOQtyTotal = 0;

                        object val5 = dr[columnNameTotalQty];
                        if (val5 == DBNull.Value)
                        {
                            ScheduleTOQty = 0;
                        }
                        else
                        {
                            ScheduleTOQty = Convert.ToDouble(dr[columnNameTotalQty]);
                        }

                        if (!columnstotalSchTO.Contains(columnNameTotalQty))
                        {
                            totalSchTO.Columns.Add(columnNameTotalQty, typeof(string));
                        }

                        if (drtotalSchTO[columnNameTotalQty] == null)
                        {
                            totalSchTOQty = 0;
                        }
                        else
                        {
                            object val6 = drtotalSchTO[columnNameTotalQty];
                            if (val6 == DBNull.Value)
                            {
                                totalSchTOQty = 0;
                            }
                            else
                            {
                                totalSchTOQty = Convert.ToDouble(drtotalSchTO[columnNameTotalQty]);
                            }
                        }
                        totalSchTOQtyTotal = ((totalSchTOQty) + (ScheduleTOQty));
                        drtotalSchTO[columnNameTotalQty] = String.Format("{0:0.000}", totalSchTOQtyTotal);
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String columnNameAmount = "Amount";
                        if (!columns.Contains(columnNameAmount))
                        {
                            ScheduleTO.Columns.Add(columnNameAmount, typeof(string));
                        }
                        if (TotalAmount > 0)
                            dr[columnNameAmount] = Math.Round(TotalAmount, 3);
                        else
                            dr[columnNameAmount] = "";
                        //ScheduleTO.Rows.Add(dr);

                        double ScheduleTOAmt = 0, totalSchTOAmt = 0;

                        object val7 = dr[columnNameAmount];
                        if (val7 == DBNull.Value)
                        {
                            ScheduleTOAmt = 0;
                        }
                        else
                        {
                            ScheduleTOAmt = Convert.ToDouble(dr[columnNameAmount]);
                        }

                        if (!columnstotalSchTO.Contains(columnNameAmount))
                        {
                            totalSchTO.Columns.Add(columnNameAmount, typeof(string));
                        }
                        if (drtotalSchTO[columnNameAmount] == null)
                        {
                            totalSchTOAmt = 0;
                        }
                        else
                        {
                            object val8 = drtotalSchTO[columnNameAmount];
                            if (val8 == DBNull.Value)
                            {
                                totalSchTOAmt = 0;
                            }
                            else
                            {
                                totalSchTOAmt = Convert.ToDouble(drtotalSchTO[columnNameAmount]);
                            }
                        }

                        drtotalSchTO[columnNameAmount] = ((ScheduleTOAmt) + (totalSchTOAmt));
                        //totalSchTO.Rows.Add(drtotalSchTO);

                        String columnNameTodayRate = "Todays Rate";
                        if (!columns.Contains(columnNameTodayRate))
                        {
                            ScheduleTO.Columns.Add(columnNameTodayRate, typeof(string));
                        }
                        dr[columnNameTodayRate] = ScheduleSummaryTO.RateForNC / conversionFact;
                        //ScheduleTO.Rows.Add(dr);                        

                        if (ScheduleSummaryTO.COrNcId > 0)
                        {
                            dr[columnNameTodayRate] = ScheduleSummaryTO.RateForC / conversionFact;
                            //ScheduleTO.Rows.Add(dr);
                        }

                        double ScheduleTOTodaysRate = 0, totalSchTOTodaysRate = 0;

                        object val9 = dr[columnNameTodayRate];
                        if (val9 == DBNull.Value)
                        {
                            ScheduleTOTodaysRate = 0;
                        }
                        else
                        {
                            ScheduleTOTodaysRate = Convert.ToDouble(dr[columnNameTodayRate]);
                        }

                        if (!columnstotalSchTO.Contains(columnNameTodayRate))
                        {
                            totalSchTO.Columns.Add(columnNameTodayRate, typeof(string));
                        }

                        if (drtotalSchTO[columnNameTodayRate] == null)
                        {
                            totalSchTOTodaysRate = 0;
                        }
                        else
                        {
                            object val10 = drtotalSchTO[columnNameTodayRate];
                            if (val10 == DBNull.Value)
                            {
                                totalSchTOTodaysRate = 0;
                            }
                            else
                            {
                                totalSchTOTodaysRate = Convert.ToDouble(drtotalSchTO[columnNameTodayRate]);
                            }
                        }

                        drtotalSchTO[columnNameTodayRate] = ((ScheduleTOTodaysRate) + (totalSchTOTodaysRate));

                        ScheduleTO.Rows.Add(dr);
                        totalSchTO.Rows.Add(drtotalSchTO);

                        ScheduleTOList.Tables.Add(ScheduleTO);

                    }

                    ScheduleTOList.Tables.Add(totalSchTO);
                    return ScheduleTOList;
                }
            }
            return null;
        }
        public List<TblPurchaseScheduleSummaryTO> getListofShcheduleSummaryForMasterReportForDropboxCandNC(string vehicleIds, int cId,int NcId)
        {

            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOList = SelectAllVehicleDetailsListForMasterReportForDropboxCandNC(vehicleIds, cId, NcId);
            List<TblPurchaseScheduleSummaryTO> tblPurchaseScheduleSummaryTOListToReturn = new List<TblPurchaseScheduleSummaryTO>();

            if (tblPurchaseScheduleSummaryTOList != null && tblPurchaseScheduleSummaryTOList.Count > 0)
            {
                

                Boolean isGetGradeExpDtls = false;
                _iTblPurchaseVehicleDetailsBL.SelectVehItemDtlsWithOrWithoutGradeExpDtls(tblPurchaseScheduleSummaryTOList, isGetGradeExpDtls);
                return tblPurchaseScheduleSummaryTOList;
            }
            else
            {
                return null;
            }
        }
        public List<TblPurchaseScheduleSummaryTO> SelectAllVehicleDetailsListForMasterReportForDropboxCandNC(string vehicleIds, int cId, int NcId) 
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectAllVehicleDetailsListForMasterReportForDropboxCandNC(vehicleIds, cId, NcId); 
        }

        public ResultMessage SelectAndExportToExcelWBReportCandNC(string vehicleIds, Int32 cId,Int32 NcId, DateTime currentDate)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean isTakeBackUp = true;
                List<TblReportsBackupDtlsTO> reportBackUpList = _iTblReportsBackupDtlsBL.SelectReportBackupDtls(Constants.BRMReportNameE.WB_REPORT.ToString(), currentDate);
                if (reportBackUpList != null && reportBackUpList.Count > 0)
                {
                    TblReportsBackupDtlsTO tblReportsBackupDtlsTO = reportBackUpList[0];
                    TimeSpan diff = currentDate - tblReportsBackupDtlsTO.BackupDate;
                    double hours = diff.TotalHours;
                    if (hours < 5)
                    {
                        isTakeBackUp = false;
                    }
                }

                if (isTakeBackUp)
                {
                    List<TblWBRptTO> tblWBRptTOList = _ireportDAO.SelectWBForPurchaseReportListCandNC(vehicleIds, cId, NcId);
                    if (tblWBRptTOList == null || tblWBRptTOList.Count == 0)
                    {
                        resultMessage.MessageType = ResultMessageE.Error;
                        resultMessage.DefaultBehaviour("Record not found!! tblWBRptTOList is null. ");
                        return resultMessage;
                    }
                    Int32 result = CreateTempWBReportExcel(tblWBRptTOList);
                    if (result != 1)
                    {
                        //tran.Rollback();
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while creating excel file.";
                        return resultMessage;
                    }

                    TblReportsBackupDtlsTO reportBackUpTO = new TblReportsBackupDtlsTO();
                    reportBackUpTO.ReportName = Constants.BRMReportNameE.WB_REPORT.ToString();
                    reportBackUpTO.BackupDate = currentDate;
                    reportBackUpTO.IsBackUp = 1;
                    result = _iTblReportsBackupDtlsBL.InsertTblReportsBackupDtls(reportBackUpTO);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour();
                        resultMessage.Text = "Error while InsertTblReportsBackupDtls(reportBackUpTO).";
                        return resultMessage;
                    }
                }


                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in SelectAndExportToExcelCCTransportReport()");
                return resultMessage;
            }
        }
        public List<TallyReportTO> GetListOfTallyReportCandNC(string fromDate, string toDate,int cId, int NcId, int supplierId, String purchaseManagerIds, int materialTypeId, Boolean isForNewTallyReport, string vehicleIds, Int32 isConsiderTm = 0)
        {
            Int16 mathroundFact = 3;
            DateTime from_Date = DateTime.MinValue;
            DateTime to_Date = DateTime.MinValue;
            if (Constants.IsDateTime(fromDate))
                from_Date = Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString(Constants.AzureDateFormat));
            if (Constants.IsDateTime(toDate))
                to_Date = Convert.ToDateTime(Convert.ToDateTime(toDate).ToString(Constants.AzureDateFormat));
            List<TallyReportTO> list = new List<TallyReportTO>();
            List<TallyReportTO> finalList = new List<TallyReportTO>();
            //Boolean isForBRM = false;

            Boolean isTakeNonCommercialQty = false;
            TblConfigParamsTO isTakeNonCommerQtyConfigTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.CP_SCRAP_IS_TAKE_NONCOMMERCIAL_QTY_FOR_WEIGHTED_RATE);
            if (isTakeNonCommerQtyConfigTO != null)
            {
                if (isTakeNonCommerQtyConfigTO.ConfigParamVal.ToString() == "1")
                {
                    isTakeNonCommercialQty = true;
                }
                else
                {
                    isTakeNonCommercialQty = false;
                }
            }

            String dateOfBackYears = String.Empty;
            TblConfigParamsTO dateBackYearsTO = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.DATE_BACK_YEARS);
            if (dateBackYearsTO != null)
            {
                if (!(String.IsNullOrEmpty(dateBackYearsTO.ConfigParamVal)))
                {
                    dateOfBackYears = dateBackYearsTO.ConfigParamVal.ToString();
                }
            }

            list = _ireportDAO.SelectTallyReportDetailsCandNC(from_Date, to_Date, cId, NcId, supplierId, purchaseManagerIds, materialTypeId, vehicleIds, dateOfBackYears, isConsiderTm);

            if (list != null && list.Count > 0)
            {
                if (isForNewTallyReport)
                {
                    finalList = list;
                }
                else if (!isForNewTallyReport)
                {
                    //finalList = list;


                    //Commented by minal for Kalika Changes
                    var summuryGroupList = list.ToLookup(p => p.IdPurchaseScheduleSummary).ToList();

                    if (summuryGroupList != null)
                    {
                        for (int i = 0; i < summuryGroupList.Count; i++)
                        {

                            TallyReportTO tallyReportTO = new TallyReportTO();
                            TallyReportTO tallyReportTOForProcessCharge = new TallyReportTO();
                            TallyReportTO tallyReportTOForGrandTotal = new TallyReportTO();

                            tallyReportTO.SupplierName = summuryGroupList[i].FirstOrDefault().SupplierName + " Total";
                            tallyReportTO.SupplierName = " Total";
                            tallyReportTO.GradeQty = Math.Round(summuryGroupList[i].Sum(w => w.GradeQty), mathroundFact);
                            tallyReportTO.DustQty = Math.Round(summuryGroupList[i].Sum(w => w.DustQty), mathroundFact);

                            tallyReportTO.GradeRate = Math.Round((summuryGroupList[i].Average(w => w.GradeRate)), mathroundFact);

                            tallyReportTO.TotalGradeQty = Math.Round((summuryGroupList[i].Sum(w => w.GradeQty)), mathroundFact);
                            tallyReportTO.DisplayTotalGradeQty = String.Format("{0:0.000}", tallyReportTO.TotalGradeQty);

                            double totalRate = Math.Round(summuryGroupList[i].Sum(w => w.GradeRate), mathroundFact);
                            tallyReportTO.GradeRate = Math.Round(totalRate / tallyReportTO.GradeQty, mathroundFact);
                            tallyReportTO.Total = Math.Round((summuryGroupList[i].Sum(w => w.Total)), mathroundFact);
                            //Added by minal for display Total after two decimal point for report 

                            tallyReportTO.DisplayTotal = String.Format("{0:0.00}", tallyReportTO.Total);

                            if (Startup.IsForBRM)
                            {
                                tallyReportTO.DisplayTotal = String.Format("{0:0.000}", tallyReportTO.Total);
                            }

                            if (!Startup.IsForBRM)
                            {
                                double total = 0, processCharge = 0, grandTotal = 0;
                                //Added by minal 03 May 2021 For Add Process charge
                                tallyReportTOForProcessCharge.SupplierName = "Process Charge";
                                if ((summuryGroupList[i].FirstOrDefault().IsBoth == 1) && (summuryGroupList[i].FirstOrDefault().COrNCId == (Int32)Constants.ConfirmTypeE.CONFIRM))
                                {
                                    tallyReportTOForProcessCharge.Total = 0.00;
                                }
                                else
                                {
                                    tallyReportTOForProcessCharge.Total = summuryGroupList[i].FirstOrDefault().ProcessChargePerVeh;
                                }


                                if ((summuryGroupList[i].FirstOrDefault().IsBoth == 1))
                                {
                                    Boolean isBothRecPresent = false;
                                    for (int k = 0; k < summuryGroupList.Count; k++)
                                    {
                                        if (k != i)
                                        {
                                            var isBothRecPresentList = summuryGroupList[k].Where(a => a.RootScheduleId == summuryGroupList[i].FirstOrDefault().RootScheduleId
                                    ).ToList();

                                            if (isBothRecPresentList != null && isBothRecPresentList.Count > 0)
                                            {
                                                isBothRecPresent = true;
                                                break;
                                            }
                                            else
                                            {
                                                isBothRecPresent = false;
                                            }
                                        }

                                    }

                                    if (isBothRecPresent)
                                    {
                                        tallyReportTOForProcessCharge.Total = 0.00;

                                        var enquiryList = summuryGroupList[i].Where(a => a.COrNCId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
                                        if (enquiryList != null && enquiryList.Count > 0)
                                        {
                                            tallyReportTOForProcessCharge.Total = enquiryList.FirstOrDefault().ProcessChargePerVeh;
                                        }

                                    }
                                    else
                                    {
                                        var res = summuryGroupList[i].Where(a => a.IsBoth == 1).ToList();
                                        if (res != null && res.Count > 0)
                                        {
                                            var enquiryList = res.Where(a => a.COrNCId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
                                            if (enquiryList != null && enquiryList.Count > 0)
                                            {
                                                tallyReportTOForProcessCharge.Total = enquiryList.FirstOrDefault().ProcessChargePerVeh;
                                            }
                                            else
                                            {
                                                var orderList = res.Where(a => a.COrNCId == (Int32)Constants.ConfirmTypeE.CONFIRM).ToList();
                                                if (orderList != null && orderList.Count > 0)
                                                {
                                                    tallyReportTOForProcessCharge.Total = orderList.FirstOrDefault().ProcessChargePerVeh;
                                                }
                                            }
                                        }

                                    }

                                }
                                else
                                {
                                    tallyReportTOForProcessCharge.Total = summuryGroupList[i].FirstOrDefault().ProcessChargePerVeh;
                                }

                                tallyReportTOForProcessCharge.DisplayTotal = String.Format("{0:0.00}", tallyReportTOForProcessCharge.Total);

                                if (Startup.IsForBRM)
                                {
                                    tallyReportTOForProcessCharge.DisplayTotal = String.Format("{0:0.000}", tallyReportTOForProcessCharge.Total);
                                }

                                total = tallyReportTO.Total;
                                processCharge = tallyReportTOForProcessCharge.Total;
                                grandTotal = ((total) - (processCharge));

                                tallyReportTOForGrandTotal.SupplierName = "Grand Total";
                                tallyReportTOForGrandTotal.Total = (grandTotal);
                                tallyReportTOForGrandTotal.DisplayTotal = String.Format("{0:0.00}", tallyReportTOForGrandTotal.Total);
                                if (Startup.IsForBRM)
                                {
                                    tallyReportTOForGrandTotal.DisplayTotal = String.Format("{0:0.000}", tallyReportTOForGrandTotal.Total);
                                }
                                //Added by minal 
                            }

                            double qty = tallyReportTO.GradeQty;

                            if (!isTakeNonCommercialQty)
                            {
                                qty = tallyReportTO.GradeQty - tallyReportTO.DustQty;
                            }

                            tallyReportTO.GradeRate = Math.Round(tallyReportTO.Total / qty, mathroundFact);
                            //Added by minal for display gradeRate after two decimal point for report 
                            tallyReportTO.DisplayGradeRate = String.Format("{0:0.00}", tallyReportTO.GradeRate);
                            if (Startup.IsForBRM)
                            {
                                tallyReportTO.DisplayGradeRate = String.Format("{0:0.000}", tallyReportTO.GradeRate);
                            }

                            tallyReportTO.DisplayGradeQty = String.Format("{0:0.000}", tallyReportTO.GradeQty);

                            var gruopList = summuryGroupList[i].ToList();

                            foreach (var item in summuryGroupList[i])
                            {
                                if (!Startup.IsForBRM)
                                {
                                    if (item.DisplayRecordInFirstRow == (Int32)Constants.DisplayRecordInFirstRowE.FIRST_ROW)
                                    {
                                        item.DisplayProcessChargePerVeh = tallyReportTOForProcessCharge.DisplayTotal;
                                    }
                                    else
                                    {
                                        item.DisplayProcessChargePerVeh = "0.00";
                                    }
                                    item.DisplayGrandTotal = tallyReportTOForGrandTotal.DisplayTotal;
                                }
                                if (Startup.IsForBRM)
                                {
                                    item.DisplayProcessChargePerVeh = tallyReportTOForProcessCharge.DisplayTotal;
                                    item.DisplayGrandTotal = tallyReportTOForGrandTotal.DisplayTotal;
                                }
                            }


                            //gruopList.Add(tallyReportTO);
                            //if (!Startup.IsForBRM)
                            //{
                            //    gruopList.Add(tallyReportTOForProcessCharge);
                            //    gruopList.Add(tallyReportTOForGrandTotal);
                            //}
                            finalList.AddRange(gruopList);
                        }
                    }

                    //Commented by minal for Kalika Changes

                }
            }

            return finalList;
        }
        public ResultMessage DeleteAllDtlsAgainstVehCandNC(TblPurchaseScheduleSummaryTO scheduleSummaryTO, List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();

            try
            {
                if (scheduleSummaryTO == null)
                {
                    throw new Exception("scheduleSummaryTO == null");
                }

                resultMessage = DeleteAllDataAgainstRootScheduleIdCandNC(scheduleSummaryTO.RootScheduleId, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("DeleteAllDataAgainstRootScheduleId(scheduleSummaryTO,conn,tran);");
                }

                resultMessage = DeleteVehiclePhotoDtls(scheduleSummaryTO.RootScheduleId, tblAddonsFunDtlsTOList, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    throw new Exception("Error in DeleteVehiclePhotoDtls(scheduleSummaryTO.RootScheduleId,ref tblAddonsFunDtlsTOList, conn, tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in DeleteAllDtlsAgainstVeh(TblPurchaseScheduleSummaryTO scheduleSummaryTO, ref List<TblAddonsFunDtlsTO> tblAddonsFunDtlsTOList, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }
        }
        public ResultMessage DeleteAllDataAgainstRootScheduleIdCandNC(Int32 rootScheduleId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            Boolean isInsertNcSchedule = true; //Prajakta[2019-04-15] Added and get value from configuration
            try
            {
                if (rootScheduleId <= 0)
                {
                    throw new Exception("rootScheduleId is not valid - " + rootScheduleId);
                }

                List<TblPurchaseScheduleSummaryTO> allScheduleList = SelectAllEnquiryScheduleSummaryTOByRootId(rootScheduleId, conn, tran);
                if (allScheduleList == null || allScheduleList.Count == 0)
                {
                    throw new Exception("allScheduleList == NULL against rootScheduleId = " + rootScheduleId);
                }

                // allScheduleList = allScheduleList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.NONCONFIRM).ToList();
                //allScheduleList = allScheduleList.Where(a => a.COrNcId == (Int32)Constants.ConfirmTypeE.CONFIRM).ToList();

                //allScheduleList = allScheduleList.OrderBy(a => a.StatusId).ToList();
                TblPurchaseScheduleSummaryTO insertScheduleTOForNC = null;
                Boolean isExeNew = false;

                for (int i = 0; i < allScheduleList.Count; i++)
                {
                    //Prajakta [2019-04-15] Added to insert one dummy record of NC schedule
                    // insertScheduleTOForNC = new TblPurchaseScheduleSummaryTO();
                    //if (allScheduleList[i].StatusId == (Int32)Constants.TranStatusE.New)
                    if (!isExeNew)
                    {
                        //TblPurchaseScheduleSummaryTO newScheTO = allScheduleList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.New).FirstOrDefault();
                        TblPurchaseScheduleSummaryTO newScheTO = allScheduleList.Where(a => a.IdPurchaseScheduleSummary == a.ActualRootScheduleId).FirstOrDefault();
                        if (newScheTO != null)
                        {
                            isExeNew = true;
                            insertScheduleTOForNC = newScheTO.DeepCopy();

                            TblPurchaseScheduleSummaryTO correctionTO = allScheduleList.Where(a => a.StatusId == (Int32)Constants.TranStatusE.UNLOADING_COMPLETED
                            && a.VehiclePhaseId == (Int32)Constants.PurchaseVehiclePhasesE.CORRECTIONS
                            && a.IsCorrectionCompleted == 1).FirstOrDefault();

                            if (correctionTO != null)
                            {
                                insertScheduleTOForNC.Qty = correctionTO.Qty;
                            }

                            //if (allScheduleList[i].RootScheduleId == 0)
                            //if (allScheduleList[i].StatusId == (Int32)Constants.TranStatusE.New)
                            {
                                resultMessage = DeleteAllVehicleDtlsAgainstRootScheduleId(allScheduleList[i], conn, tran);
                                if (resultMessage.MessageType != ResultMessageE.Information)
                                {
                                    throw new Exception("Error in DeleteAllVehicleDtlsAgainstRootScheduleId(allScheduleList[i],conn,tran);");
                                }
                                //continue;
                            }
                        }
                    }


                    resultMessage = DeleteAllDataAgainstVehicleScheduleCandNC(allScheduleList[i], conn, tran);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        throw new Exception("Error in DeleteAllDataAgainstVehicleSchedule(allScheduleList[i],conn,tran);");
                    }
                }

                //Prajakta [2019-04-15] Added to insert one dummy record of NC schedule
                if (isInsertNcSchedule)
                {
                    if (insertScheduleTOForNC != null)
                    {
                        resultMessage = InsertNCScheduleAfterDataExtraction(insertScheduleTOForNC, conn, tran);
                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            throw new Exception("Error in InsertNCScheduleAfterDataExtraction(insertScheduleTOForNC,conn,tran);");
                        }
                    }

                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;

            }
            catch (System.Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in DeleteAllDataAgainstRootScheduleId(Int32 rootScheduleId,SqlConnection conn,SqlTransaction tran)");
                return resultMessage;

            }
        }
        public int DeleteTblPurchaseInvoice(Int32 idPurchaseScheduleSummary, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseInvoice(idPurchaseScheduleSummary, conn, tran);
        }
        public int DeleteTblPurchaseInvoiceInterfacingDtl(Int32 idInvoice, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseInvoiceInterfacingDtl(idInvoice, conn, tran);
        }
        public int DeleteTblPurchaseInvoiceAddr(Int32 idInvoice, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseInvoiceAddr(idInvoice, conn, tran);
        }
        public int DeleteTblPurchaseInvoiceHistory(Int32 idInvoice, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseInvoiceHistory(idInvoice, conn, tran);
        }
        public int DeleteTblPurchaseInvoiceDocuments(Int32 idInvoice, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseInvoiceDocuments(idInvoice, conn, tran);
        }
        public int DeleteTblPurchaseInvoiceItemDetails(Int32 idInvoice, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseInvoiceItemDetails(idInvoice, conn, tran);
        }
        public int DeleteTblPurchaseInvoiceItemTaxDetails(Int32 idInvoice, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.DeleteTblPurchaseInvoiceItemTaxDetails(idInvoice, conn, tran);
        }

        public int SelectPurchaseInvoiceAgainstScheduleSummary(Int32 idPurchaseScheduleSummary, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectPurchaseInvoiceAgainstScheduleSummary(idPurchaseScheduleSummary, conn, tran);
        }
        public int SelectPurchaseVehLinkSauda(Int32 idPurchaseEnquiry, SqlConnection conn, SqlTransaction tran)
        {
            return _iTblPurchaseScheduleSummaryDAO.SelectPurchaseVehLinkSauda(idPurchaseEnquiry, conn, tran);
        }
        public ResultMessage UpdatePurchaseEnquiryAgainstScheduleSummary(Int32 idPurchaseEnquiry,Int32 purchaseScheduleSummaryId, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            int result = 0;

            try
            { 
               
                result = _iTblPurchaseEnquiryDAO.UpdatePurchaseEnquiryAgainstScheduleSummary(idPurchaseEnquiry, purchaseScheduleSummaryId, conn, tran);
                if (result != 1)
                {
                    throw new Exception("UpdatePurchaseEnquiryAgainstScheduleSummary(idPurchaseEnquiry, purchaseScheduleSummaryId, conn, tran);");
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "Error in UpdatePurchaseEnquiryAgainstScheduleSummary(idPurchaseEnquiry,purchaseScheduleSummaryId, SqlConnection conn, SqlTransaction tran)");
                return resultMessage;
            }

        }

    }
}
